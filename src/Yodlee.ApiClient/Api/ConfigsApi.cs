/*
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yodlee.ApiClient.Client;
using Yodlee.ApiClient.Model;

namespace Yodlee.ApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Subscribe For Notification Event
        /// </summary>
        /// <remarks>
        /// The subscribe events service is used to subscribe to an event for receiving notifications.&lt;br&gt;The callback URL, where the notification will be posted should be provided to this service.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;Customers can subscribe to REFRESH,DATA_UPDATES,AUTO_REFRESH_UPDATES,LATEST_BALANCE_UPDATES and CREDIT_ACCELERATOR_REPORT_UPDATES event.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This service is not available in developer sandbox/test environment and will be made available for testing in your dedicated environment, once the contract is signed.&lt;li&gt;The content type has to be passed as application/json for the body parameter.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event</param>
        /// <param name="eventRequest">eventRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CreateSubscriptionNotificationEvent(string eventName, CreateConfigsNotificationEventRequest eventRequest, int operationIndex = 0);

        /// <summary>
        /// Subscribe For Notification Event
        /// </summary>
        /// <remarks>
        /// The subscribe events service is used to subscribe to an event for receiving notifications.&lt;br&gt;The callback URL, where the notification will be posted should be provided to this service.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;Customers can subscribe to REFRESH,DATA_UPDATES,AUTO_REFRESH_UPDATES,LATEST_BALANCE_UPDATES and CREDIT_ACCELERATOR_REPORT_UPDATES event.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This service is not available in developer sandbox/test environment and will be made available for testing in your dedicated environment, once the contract is signed.&lt;li&gt;The content type has to be passed as application/json for the body parameter.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event</param>
        /// <param name="eventRequest">eventRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateSubscriptionNotificationEventWithHttpInfo(string eventName, CreateConfigsNotificationEventRequest eventRequest, int operationIndex = 0);
        /// <summary>
        /// Delete Notification Subscription
        /// </summary>
        /// <remarks>
        /// The delete events service is used to unsubscribe from an events service.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteSubscribedNotificationEvent(string eventName, int operationIndex = 0);

        /// <summary>
        /// Delete Notification Subscription
        /// </summary>
        /// <remarks>
        /// The delete events service is used to unsubscribe from an events service.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSubscribedNotificationEventWithHttpInfo(string eventName, int operationIndex = 0);
        /// <summary>
        /// Get Public Key
        /// </summary>
        /// <remarks>
        /// The get public key service provides the public key that should be used to encrypt user credentials while invoking POST /providerAccounts and PUT /providerAccounts endpoints.&lt;br&gt;This service will only work if the PKI (public key infrastructure) feature is enabled for the customer.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt; The key in the response is a string in PEM format.&lt;/li&gt;&lt;li&gt;This endpoint is not available in the Sandbox environment and it is useful only if the PKI feature is enabled.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigsPublicKeyResponse</returns>
        ConfigsPublicKeyResponse GetPublicEncryptionKey(int operationIndex = 0);

        /// <summary>
        /// Get Public Key
        /// </summary>
        /// <remarks>
        /// The get public key service provides the public key that should be used to encrypt user credentials while invoking POST /providerAccounts and PUT /providerAccounts endpoints.&lt;br&gt;This service will only work if the PKI (public key infrastructure) feature is enabled for the customer.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt; The key in the response is a string in PEM format.&lt;/li&gt;&lt;li&gt;This endpoint is not available in the Sandbox environment and it is useful only if the PKI feature is enabled.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigsPublicKeyResponse</returns>
        ApiResponse<ConfigsPublicKeyResponse> GetPublicEncryptionKeyWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Subscribed Notification Events
        /// </summary>
        /// <remarks>
        /// The get events service provides the list of events for which consumers subscribed to receive notifications. &lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigsNotificationResponse</returns>
        ConfigsNotificationResponse GetSubscribedNotificationEvents(string eventName = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Subscribed Notification Events
        /// </summary>
        /// <remarks>
        /// The get events service provides the list of events for which consumers subscribed to receive notifications. &lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigsNotificationResponse</returns>
        ApiResponse<ConfigsNotificationResponse> GetSubscribedNotificationEventsWithHttpInfo(string eventName = default(string), int operationIndex = 0);
        /// <summary>
        /// Update Notification Subscription
        /// </summary>
        /// <remarks>
        /// The update events service is used to update the callback URL.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;The content type has to be passed as application/json for the body parameter. &lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event</param>
        /// <param name="eventRequest">eventRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateSubscribedNotificationEvent(string eventName, UpdateConfigsNotificationEventRequest eventRequest, int operationIndex = 0);

        /// <summary>
        /// Update Notification Subscription
        /// </summary>
        /// <remarks>
        /// The update events service is used to update the callback URL.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;The content type has to be passed as application/json for the body parameter. &lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event</param>
        /// <param name="eventRequest">eventRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSubscribedNotificationEventWithHttpInfo(string eventName, UpdateConfigsNotificationEventRequest eventRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Subscribe For Notification Event
        /// </summary>
        /// <remarks>
        /// The subscribe events service is used to subscribe to an event for receiving notifications.&lt;br&gt;The callback URL, where the notification will be posted should be provided to this service.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;Customers can subscribe to REFRESH,DATA_UPDATES,AUTO_REFRESH_UPDATES,LATEST_BALANCE_UPDATES and CREDIT_ACCELERATOR_REPORT_UPDATES event.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This service is not available in developer sandbox/test environment and will be made available for testing in your dedicated environment, once the contract is signed.&lt;li&gt;The content type has to be passed as application/json for the body parameter.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event</param>
        /// <param name="eventRequest">eventRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateSubscriptionNotificationEventAsync(string eventName, CreateConfigsNotificationEventRequest eventRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Subscribe For Notification Event
        /// </summary>
        /// <remarks>
        /// The subscribe events service is used to subscribe to an event for receiving notifications.&lt;br&gt;The callback URL, where the notification will be posted should be provided to this service.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;Customers can subscribe to REFRESH,DATA_UPDATES,AUTO_REFRESH_UPDATES,LATEST_BALANCE_UPDATES and CREDIT_ACCELERATOR_REPORT_UPDATES event.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This service is not available in developer sandbox/test environment and will be made available for testing in your dedicated environment, once the contract is signed.&lt;li&gt;The content type has to be passed as application/json for the body parameter.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event</param>
        /// <param name="eventRequest">eventRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateSubscriptionNotificationEventWithHttpInfoAsync(string eventName, CreateConfigsNotificationEventRequest eventRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Notification Subscription
        /// </summary>
        /// <remarks>
        /// The delete events service is used to unsubscribe from an events service.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSubscribedNotificationEventAsync(string eventName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Notification Subscription
        /// </summary>
        /// <remarks>
        /// The delete events service is used to unsubscribe from an events service.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSubscribedNotificationEventWithHttpInfoAsync(string eventName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Public Key
        /// </summary>
        /// <remarks>
        /// The get public key service provides the public key that should be used to encrypt user credentials while invoking POST /providerAccounts and PUT /providerAccounts endpoints.&lt;br&gt;This service will only work if the PKI (public key infrastructure) feature is enabled for the customer.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt; The key in the response is a string in PEM format.&lt;/li&gt;&lt;li&gt;This endpoint is not available in the Sandbox environment and it is useful only if the PKI feature is enabled.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigsPublicKeyResponse</returns>
        System.Threading.Tasks.Task<ConfigsPublicKeyResponse> GetPublicEncryptionKeyAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Public Key
        /// </summary>
        /// <remarks>
        /// The get public key service provides the public key that should be used to encrypt user credentials while invoking POST /providerAccounts and PUT /providerAccounts endpoints.&lt;br&gt;This service will only work if the PKI (public key infrastructure) feature is enabled for the customer.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt; The key in the response is a string in PEM format.&lt;/li&gt;&lt;li&gt;This endpoint is not available in the Sandbox environment and it is useful only if the PKI feature is enabled.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigsPublicKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfigsPublicKeyResponse>> GetPublicEncryptionKeyWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Subscribed Notification Events
        /// </summary>
        /// <remarks>
        /// The get events service provides the list of events for which consumers subscribed to receive notifications. &lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigsNotificationResponse</returns>
        System.Threading.Tasks.Task<ConfigsNotificationResponse> GetSubscribedNotificationEventsAsync(string eventName = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Subscribed Notification Events
        /// </summary>
        /// <remarks>
        /// The get events service provides the list of events for which consumers subscribed to receive notifications. &lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigsNotificationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfigsNotificationResponse>> GetSubscribedNotificationEventsWithHttpInfoAsync(string eventName = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Notification Subscription
        /// </summary>
        /// <remarks>
        /// The update events service is used to update the callback URL.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;The content type has to be passed as application/json for the body parameter. &lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event</param>
        /// <param name="eventRequest">eventRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateSubscribedNotificationEventAsync(string eventName, UpdateConfigsNotificationEventRequest eventRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Notification Subscription
        /// </summary>
        /// <remarks>
        /// The update events service is used to update the callback URL.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;The content type has to be passed as application/json for the body parameter. &lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event</param>
        /// <param name="eventRequest">eventRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSubscribedNotificationEventWithHttpInfoAsync(string eventName, UpdateConfigsNotificationEventRequest eventRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigsApi : IConfigsApiSync, IConfigsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConfigsApi : IConfigsApi
    {
        private Yodlee.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConfigsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConfigsApi(string basePath)
        {
            this.Configuration = Yodlee.ApiClient.Client.Configuration.MergeConfigurations(
                Yodlee.ApiClient.Client.GlobalConfiguration.Instance,
                new Yodlee.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yodlee.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConfigsApi(Yodlee.ApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yodlee.ApiClient.Client.Configuration.MergeConfigurations(
                Yodlee.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yodlee.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ConfigsApi(Yodlee.ApiClient.Client.ISynchronousClient client, Yodlee.ApiClient.Client.IAsynchronousClient asyncClient, Yodlee.ApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yodlee.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yodlee.ApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yodlee.ApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yodlee.ApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yodlee.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Subscribe For Notification Event The subscribe events service is used to subscribe to an event for receiving notifications.&lt;br&gt;The callback URL, where the notification will be posted should be provided to this service.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;Customers can subscribe to REFRESH,DATA_UPDATES,AUTO_REFRESH_UPDATES,LATEST_BALANCE_UPDATES and CREDIT_ACCELERATOR_REPORT_UPDATES event.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This service is not available in developer sandbox/test environment and will be made available for testing in your dedicated environment, once the contract is signed.&lt;li&gt;The content type has to be passed as application/json for the body parameter.&lt;/li&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event</param>
        /// <param name="eventRequest">eventRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CreateSubscriptionNotificationEvent(string eventName, CreateConfigsNotificationEventRequest eventRequest, int operationIndex = 0)
        {
            CreateSubscriptionNotificationEventWithHttpInfo(eventName, eventRequest);
        }

        /// <summary>
        /// Subscribe For Notification Event The subscribe events service is used to subscribe to an event for receiving notifications.&lt;br&gt;The callback URL, where the notification will be posted should be provided to this service.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;Customers can subscribe to REFRESH,DATA_UPDATES,AUTO_REFRESH_UPDATES,LATEST_BALANCE_UPDATES and CREDIT_ACCELERATOR_REPORT_UPDATES event.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This service is not available in developer sandbox/test environment and will be made available for testing in your dedicated environment, once the contract is signed.&lt;li&gt;The content type has to be passed as application/json for the body parameter.&lt;/li&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event</param>
        /// <param name="eventRequest">eventRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yodlee.ApiClient.Client.ApiResponse<Object> CreateSubscriptionNotificationEventWithHttpInfo(string eventName, CreateConfigsNotificationEventRequest eventRequest, int operationIndex = 0)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'eventName' when calling ConfigsApi->CreateSubscriptionNotificationEvent");
            }

            // verify the required parameter 'eventRequest' is set
            if (eventRequest == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'eventRequest' when calling ConfigsApi->CreateSubscriptionNotificationEvent");
            }

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventName", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(eventName)); // path parameter
            localVarRequestOptions.Data = eventRequest;

            localVarRequestOptions.Operation = "ConfigsApi.CreateSubscriptionNotificationEvent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/configs/notifications/events/{eventName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubscriptionNotificationEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Subscribe For Notification Event The subscribe events service is used to subscribe to an event for receiving notifications.&lt;br&gt;The callback URL, where the notification will be posted should be provided to this service.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;Customers can subscribe to REFRESH,DATA_UPDATES,AUTO_REFRESH_UPDATES,LATEST_BALANCE_UPDATES and CREDIT_ACCELERATOR_REPORT_UPDATES event.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This service is not available in developer sandbox/test environment and will be made available for testing in your dedicated environment, once the contract is signed.&lt;li&gt;The content type has to be passed as application/json for the body parameter.&lt;/li&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event</param>
        /// <param name="eventRequest">eventRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateSubscriptionNotificationEventAsync(string eventName, CreateConfigsNotificationEventRequest eventRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateSubscriptionNotificationEventWithHttpInfoAsync(eventName, eventRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Subscribe For Notification Event The subscribe events service is used to subscribe to an event for receiving notifications.&lt;br&gt;The callback URL, where the notification will be posted should be provided to this service.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;Customers can subscribe to REFRESH,DATA_UPDATES,AUTO_REFRESH_UPDATES,LATEST_BALANCE_UPDATES and CREDIT_ACCELERATOR_REPORT_UPDATES event.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This service is not available in developer sandbox/test environment and will be made available for testing in your dedicated environment, once the contract is signed.&lt;li&gt;The content type has to be passed as application/json for the body parameter.&lt;/li&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event</param>
        /// <param name="eventRequest">eventRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<Object>> CreateSubscriptionNotificationEventWithHttpInfoAsync(string eventName, CreateConfigsNotificationEventRequest eventRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'eventName' when calling ConfigsApi->CreateSubscriptionNotificationEvent");
            }

            // verify the required parameter 'eventRequest' is set
            if (eventRequest == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'eventRequest' when calling ConfigsApi->CreateSubscriptionNotificationEvent");
            }


            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventName", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(eventName)); // path parameter
            localVarRequestOptions.Data = eventRequest;

            localVarRequestOptions.Operation = "ConfigsApi.CreateSubscriptionNotificationEvent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/configs/notifications/events/{eventName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubscriptionNotificationEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Notification Subscription The delete events service is used to unsubscribe from an events service.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteSubscribedNotificationEvent(string eventName, int operationIndex = 0)
        {
            DeleteSubscribedNotificationEventWithHttpInfo(eventName);
        }

        /// <summary>
        /// Delete Notification Subscription The delete events service is used to unsubscribe from an events service.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yodlee.ApiClient.Client.ApiResponse<Object> DeleteSubscribedNotificationEventWithHttpInfo(string eventName, int operationIndex = 0)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'eventName' when calling ConfigsApi->DeleteSubscribedNotificationEvent");
            }

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventName", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(eventName)); // path parameter

            localVarRequestOptions.Operation = "ConfigsApi.DeleteSubscribedNotificationEvent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/configs/notifications/events/{eventName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSubscribedNotificationEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Notification Subscription The delete events service is used to unsubscribe from an events service.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSubscribedNotificationEventAsync(string eventName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteSubscribedNotificationEventWithHttpInfoAsync(eventName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Notification Subscription The delete events service is used to unsubscribe from an events service.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<Object>> DeleteSubscribedNotificationEventWithHttpInfoAsync(string eventName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'eventName' when calling ConfigsApi->DeleteSubscribedNotificationEvent");
            }


            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventName", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(eventName)); // path parameter

            localVarRequestOptions.Operation = "ConfigsApi.DeleteSubscribedNotificationEvent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/configs/notifications/events/{eventName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSubscribedNotificationEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Public Key The get public key service provides the public key that should be used to encrypt user credentials while invoking POST /providerAccounts and PUT /providerAccounts endpoints.&lt;br&gt;This service will only work if the PKI (public key infrastructure) feature is enabled for the customer.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt; The key in the response is a string in PEM format.&lt;/li&gt;&lt;li&gt;This endpoint is not available in the Sandbox environment and it is useful only if the PKI feature is enabled.&lt;/li&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigsPublicKeyResponse</returns>
        public ConfigsPublicKeyResponse GetPublicEncryptionKey(int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<ConfigsPublicKeyResponse> localVarResponse = GetPublicEncryptionKeyWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Public Key The get public key service provides the public key that should be used to encrypt user credentials while invoking POST /providerAccounts and PUT /providerAccounts endpoints.&lt;br&gt;This service will only work if the PKI (public key infrastructure) feature is enabled for the customer.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt; The key in the response is a string in PEM format.&lt;/li&gt;&lt;li&gt;This endpoint is not available in the Sandbox environment and it is useful only if the PKI feature is enabled.&lt;/li&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigsPublicKeyResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<ConfigsPublicKeyResponse> GetPublicEncryptionKeyWithHttpInfo(int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ConfigsApi.GetPublicEncryptionKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ConfigsPublicKeyResponse>("/configs/publicKey", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPublicEncryptionKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Public Key The get public key service provides the public key that should be used to encrypt user credentials while invoking POST /providerAccounts and PUT /providerAccounts endpoints.&lt;br&gt;This service will only work if the PKI (public key infrastructure) feature is enabled for the customer.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt; The key in the response is a string in PEM format.&lt;/li&gt;&lt;li&gt;This endpoint is not available in the Sandbox environment and it is useful only if the PKI feature is enabled.&lt;/li&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigsPublicKeyResponse</returns>
        public async System.Threading.Tasks.Task<ConfigsPublicKeyResponse> GetPublicEncryptionKeyAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<ConfigsPublicKeyResponse> localVarResponse = await GetPublicEncryptionKeyWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Public Key The get public key service provides the public key that should be used to encrypt user credentials while invoking POST /providerAccounts and PUT /providerAccounts endpoints.&lt;br&gt;This service will only work if the PKI (public key infrastructure) feature is enabled for the customer.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt; The key in the response is a string in PEM format.&lt;/li&gt;&lt;li&gt;This endpoint is not available in the Sandbox environment and it is useful only if the PKI feature is enabled.&lt;/li&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigsPublicKeyResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<ConfigsPublicKeyResponse>> GetPublicEncryptionKeyWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ConfigsApi.GetPublicEncryptionKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConfigsPublicKeyResponse>("/configs/publicKey", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPublicEncryptionKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Subscribed Notification Events The get events service provides the list of events for which consumers subscribed to receive notifications. &lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigsNotificationResponse</returns>
        public ConfigsNotificationResponse GetSubscribedNotificationEvents(string eventName = default(string), int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<ConfigsNotificationResponse> localVarResponse = GetSubscribedNotificationEventsWithHttpInfo(eventName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Subscribed Notification Events The get events service provides the list of events for which consumers subscribed to receive notifications. &lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigsNotificationResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<ConfigsNotificationResponse> GetSubscribedNotificationEventsWithHttpInfo(string eventName = default(string), int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (eventName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "eventName", eventName));
            }

            localVarRequestOptions.Operation = "ConfigsApi.GetSubscribedNotificationEvents";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ConfigsNotificationResponse>("/configs/notifications/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubscribedNotificationEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Subscribed Notification Events The get events service provides the list of events for which consumers subscribed to receive notifications. &lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigsNotificationResponse</returns>
        public async System.Threading.Tasks.Task<ConfigsNotificationResponse> GetSubscribedNotificationEventsAsync(string eventName = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<ConfigsNotificationResponse> localVarResponse = await GetSubscribedNotificationEventsWithHttpInfoAsync(eventName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Subscribed Notification Events The get events service provides the list of events for which consumers subscribed to receive notifications. &lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigsNotificationResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<ConfigsNotificationResponse>> GetSubscribedNotificationEventsWithHttpInfoAsync(string eventName = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (eventName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "eventName", eventName));
            }

            localVarRequestOptions.Operation = "ConfigsApi.GetSubscribedNotificationEvents";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConfigsNotificationResponse>("/configs/notifications/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubscribedNotificationEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Notification Subscription The update events service is used to update the callback URL.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;The content type has to be passed as application/json for the body parameter. &lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event</param>
        /// <param name="eventRequest">eventRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateSubscribedNotificationEvent(string eventName, UpdateConfigsNotificationEventRequest eventRequest, int operationIndex = 0)
        {
            UpdateSubscribedNotificationEventWithHttpInfo(eventName, eventRequest);
        }

        /// <summary>
        /// Update Notification Subscription The update events service is used to update the callback URL.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;The content type has to be passed as application/json for the body parameter. &lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event</param>
        /// <param name="eventRequest">eventRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yodlee.ApiClient.Client.ApiResponse<Object> UpdateSubscribedNotificationEventWithHttpInfo(string eventName, UpdateConfigsNotificationEventRequest eventRequest, int operationIndex = 0)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'eventName' when calling ConfigsApi->UpdateSubscribedNotificationEvent");
            }

            // verify the required parameter 'eventRequest' is set
            if (eventRequest == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'eventRequest' when calling ConfigsApi->UpdateSubscribedNotificationEvent");
            }

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventName", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(eventName)); // path parameter
            localVarRequestOptions.Data = eventRequest;

            localVarRequestOptions.Operation = "ConfigsApi.UpdateSubscribedNotificationEvent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/configs/notifications/events/{eventName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubscribedNotificationEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Notification Subscription The update events service is used to update the callback URL.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;The content type has to be passed as application/json for the body parameter. &lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event</param>
        /// <param name="eventRequest">eventRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSubscribedNotificationEventAsync(string eventName, UpdateConfigsNotificationEventRequest eventRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateSubscribedNotificationEventWithHttpInfoAsync(eventName, eventRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Notification Subscription The update events service is used to update the callback URL.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;The content type has to be passed as application/json for the body parameter. &lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Name of the webhook subscription event</param>
        /// <param name="eventRequest">eventRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<Object>> UpdateSubscribedNotificationEventWithHttpInfoAsync(string eventName, UpdateConfigsNotificationEventRequest eventRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'eventName' when calling ConfigsApi->UpdateSubscribedNotificationEvent");
            }

            // verify the required parameter 'eventRequest' is set
            if (eventRequest == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'eventRequest' when calling ConfigsApi->UpdateSubscribedNotificationEvent");
            }


            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventName", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(eventName)); // path parameter
            localVarRequestOptions.Data = eventRequest;

            localVarRequestOptions.Operation = "ConfigsApi.UpdateSubscribedNotificationEvent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/configs/notifications/events/{eventName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubscribedNotificationEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
