/*
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yodlee.ApiClient.Client;
using Yodlee.ApiClient.Model;

namespace Yodlee.ApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create or Run Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The Create or Run Transaction Categorization Rule endpoint is used to: &lt;br&gt;Create transaction categorization rules for both system and user-defined categories.&lt;br&gt;Run all the transaction categorization rules to categorize transactions by calling the endpoint with action&#x3D;run as the query parameter. &lt;br&gt;&lt;br&gt;The input body parameters to create transaction categorization rules follow:&lt;br&gt;     categoryId - This field is mandatory and numeric&lt;br&gt;     priority - This field is optional and numeric. Priority decides the order in which the rule gets applied on transactions.&lt;br&gt;     ruleClause - This field is mandatory and should contain at least one rule&lt;br&gt;     field - The value can be description or amount&lt;br&gt;&lt;br&gt;       If the field value is description then,&lt;br&gt;         1. operation - value can be stringEquals or stringContains&lt;br&gt;         2. value - value should be min of 3 and max of 50 characters&lt;br&gt;&lt;br&gt;       If the field value is amount then, &lt;br&gt;         1. operation - value can be numberEquals, numberLessThan, numberLessThanEquals, numberGreaterThan or numberGreaterThanEquals&lt;br&gt;         2. value - min value 0 and a max value of 99999999999.99 is allowed&lt;br&gt;The HTTP response code is 201 (Created Successfully).
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">To run rules, pass action&#x3D;run. Only value run is supported (optional)</param>
        /// <param name="ruleParam">rules(JSON format) to categorize the transactions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CreateOrRunTransactionCategorizationRules(string action = default(string), string ruleParam = default(string), int operationIndex = 0);

        /// <summary>
        /// Create or Run Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The Create or Run Transaction Categorization Rule endpoint is used to: &lt;br&gt;Create transaction categorization rules for both system and user-defined categories.&lt;br&gt;Run all the transaction categorization rules to categorize transactions by calling the endpoint with action&#x3D;run as the query parameter. &lt;br&gt;&lt;br&gt;The input body parameters to create transaction categorization rules follow:&lt;br&gt;     categoryId - This field is mandatory and numeric&lt;br&gt;     priority - This field is optional and numeric. Priority decides the order in which the rule gets applied on transactions.&lt;br&gt;     ruleClause - This field is mandatory and should contain at least one rule&lt;br&gt;     field - The value can be description or amount&lt;br&gt;&lt;br&gt;       If the field value is description then,&lt;br&gt;         1. operation - value can be stringEquals or stringContains&lt;br&gt;         2. value - value should be min of 3 and max of 50 characters&lt;br&gt;&lt;br&gt;       If the field value is amount then, &lt;br&gt;         1. operation - value can be numberEquals, numberLessThan, numberLessThanEquals, numberGreaterThan or numberGreaterThanEquals&lt;br&gt;         2. value - min value 0 and a max value of 99999999999.99 is allowed&lt;br&gt;The HTTP response code is 201 (Created Successfully).
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">To run rules, pass action&#x3D;run. Only value run is supported (optional)</param>
        /// <param name="ruleParam">rules(JSON format) to categorize the transactions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateOrRunTransactionCategorizationRulesWithHttpInfo(string action = default(string), string ruleParam = default(string), int operationIndex = 0);
        /// <summary>
        /// Create Category
        /// </summary>
        /// <remarks>
        /// The create transaction categories service is used to create user-defined categories for a system-defined category.&lt;br&gt;The parentCategoryId is the system-defined category id.This can be retrieved using get transaction categories service.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 201 (Created successfully).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCategoryRequest">User Transaction Category in JSON format</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CreateTransactionCategory(TransactionCategoryRequest transactionCategoryRequest, int operationIndex = 0);

        /// <summary>
        /// Create Category
        /// </summary>
        /// <remarks>
        /// The create transaction categories service is used to create user-defined categories for a system-defined category.&lt;br&gt;The parentCategoryId is the system-defined category id.This can be retrieved using get transaction categories service.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 201 (Created successfully).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCategoryRequest">User Transaction Category in JSON format</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateTransactionCategoryWithHttpInfo(TransactionCategoryRequest transactionCategoryRequest, int operationIndex = 0);
        /// <summary>
        /// Delete Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The delete transaction categorization rule service is used to delete the given user-defined transaction categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;This will delete all the corresponding rule clauses associated with the rule.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">ruleId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteTransactionCategorizationRule(long ruleId, int operationIndex = 0);

        /// <summary>
        /// Delete Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The delete transaction categorization rule service is used to delete the given user-defined transaction categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;This will delete all the corresponding rule clauses associated with the rule.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">ruleId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTransactionCategorizationRuleWithHttpInfo(long ruleId, int operationIndex = 0);
        /// <summary>
        /// Delete Category
        /// </summary>
        /// <remarks>
        /// The delete transaction categories service is used to delete the given user-defined category.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteTransactionCategory(long categoryId, int operationIndex = 0);

        /// <summary>
        /// Delete Category
        /// </summary>
        /// <remarks>
        /// The delete transaction categories service is used to delete the given user-defined category.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTransactionCategoryWithHttpInfo(long categoryId, int operationIndex = 0);
        /// <summary>
        /// Get Transaction Category List
        /// </summary>
        /// <remarks>
        /// The categories service returns the list of available transaction categories.&lt;br&gt;High level category is returned in the response only if it is opted by the customer.&lt;br&gt;When invoked by passing the cobrand session or admin access token, this service returns the supported transaction categories at the cobrand level. &lt;br&gt;When invoked by passing the cobrand session and the user session or user access token, this service returns the transaction categories &lt;br&gt;along with user-defined categories.&lt;br&gt;Double quotes in the user-defined category name will be prefixed by backslashes (&amp;#92;) in the response, &lt;br&gt;e.g. Toys \&quot;R\&quot; Us.&lt;br/&gt;Source and id are the primary attributes of the category entity.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionCategoryResponse</returns>
        TransactionCategoryResponse GetTransactionCategories(int operationIndex = 0);

        /// <summary>
        /// Get Transaction Category List
        /// </summary>
        /// <remarks>
        /// The categories service returns the list of available transaction categories.&lt;br&gt;High level category is returned in the response only if it is opted by the customer.&lt;br&gt;When invoked by passing the cobrand session or admin access token, this service returns the supported transaction categories at the cobrand level. &lt;br&gt;When invoked by passing the cobrand session and the user session or user access token, this service returns the transaction categories &lt;br&gt;along with user-defined categories.&lt;br&gt;Double quotes in the user-defined category name will be prefixed by backslashes (&amp;#92;) in the response, &lt;br&gt;e.g. Toys \&quot;R\&quot; Us.&lt;br/&gt;Source and id are the primary attributes of the category entity.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionCategoryResponse</returns>
        ApiResponse<TransactionCategoryResponse> GetTransactionCategoriesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Transaction Categorization Rules
        /// </summary>
        /// <remarks>
        /// The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionCategorizationRuleResponse</returns>
        TransactionCategorizationRuleResponse GetTransactionCategorizationRules(int operationIndex = 0);

        /// <summary>
        /// Get Transaction Categorization Rules
        /// </summary>
        /// <remarks>
        /// The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionCategorizationRuleResponse</returns>
        ApiResponse<TransactionCategorizationRuleResponse> GetTransactionCategorizationRulesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Transaction Categorization Rules
        /// </summary>
        /// <remarks>
        /// The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TransactionCategorizationRule&gt;</returns>
        [Obsolete]
        List<TransactionCategorizationRule> GetTransactionCategorizationRulesDeprecated(int operationIndex = 0);

        /// <summary>
        /// Get Transaction Categorization Rules
        /// </summary>
        /// <remarks>
        /// The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TransactionCategorizationRule&gt;</returns>
        [Obsolete]
        ApiResponse<List<TransactionCategorizationRule>> GetTransactionCategorizationRulesDeprecatedWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Transactions
        /// </summary>
        /// <remarks>
        /// The Transaction service is used to get a list of transactions for a user.&lt;br&gt;By default, this service returns the last 30 days of transactions from today&#39;s date.&lt;br&gt;The keyword parameter performs a contains search on the original, consumer, and simple description attributes, replace the special characters #, &amp;, and + with percent-encoding values %23, %26, and %2B respectively. Eg: for -Debit# , pass the input as -Debit%23.&lt;br&gt;Values for categoryId parameter can be fetched from get transaction category list service.&lt;br&gt; The categoryId is used to filter transactions based on system-defined category as well as user-defined category.&lt;br&gt;User-defined categoryIds should be provided in the filter with the prefix &#39;&#39;U&#39;&#39;. E.g. U10002&lt;br&gt;The skip and top parameters are used for pagination. In the skip and top parameters pass the number of records to be skipped and retrieved, respectively. The response header provides the links to retrieve the next and previous set of transactions.&lt;br&gt;Double quotes in the merchant name will be prefixed by backslashes (&amp;#92;) in the response, e.g. Toys \&quot;R\&quot; Us. &lt;br&gt;sourceId is a unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts. Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.yodlee.com/docs/api/1.1/Transaction_Data_Enrichment\&quot;&gt;TDE&lt;/a&gt; is made available for bank and card accounts. The address field in the response is available only when the TDE key is turned on.&lt;/li&gt;&lt;li&gt;The pagination feature is available by default. If no values are passed in the skip and top parameters, the API will only return the first 500 transactions.&lt;/li&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionResponse</returns>
        TransactionResponse GetTransactions(string accountId = default(string), string baseType = default(string), string categoryId = default(string), string categoryType = default(string), string container = default(string), string detailCategoryId = default(string), string fromDate = default(string), string highLevelCategoryId = default(string), string keyword = default(string), int? skip = default(int?), string toDate = default(string), int? top = default(int?), string type = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Transactions
        /// </summary>
        /// <remarks>
        /// The Transaction service is used to get a list of transactions for a user.&lt;br&gt;By default, this service returns the last 30 days of transactions from today&#39;s date.&lt;br&gt;The keyword parameter performs a contains search on the original, consumer, and simple description attributes, replace the special characters #, &amp;, and + with percent-encoding values %23, %26, and %2B respectively. Eg: for -Debit# , pass the input as -Debit%23.&lt;br&gt;Values for categoryId parameter can be fetched from get transaction category list service.&lt;br&gt; The categoryId is used to filter transactions based on system-defined category as well as user-defined category.&lt;br&gt;User-defined categoryIds should be provided in the filter with the prefix &#39;&#39;U&#39;&#39;. E.g. U10002&lt;br&gt;The skip and top parameters are used for pagination. In the skip and top parameters pass the number of records to be skipped and retrieved, respectively. The response header provides the links to retrieve the next and previous set of transactions.&lt;br&gt;Double quotes in the merchant name will be prefixed by backslashes (&amp;#92;) in the response, e.g. Toys \&quot;R\&quot; Us. &lt;br&gt;sourceId is a unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts. Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.yodlee.com/docs/api/1.1/Transaction_Data_Enrichment\&quot;&gt;TDE&lt;/a&gt; is made available for bank and card accounts. The address field in the response is available only when the TDE key is turned on.&lt;/li&gt;&lt;li&gt;The pagination feature is available by default. If no values are passed in the skip and top parameters, the API will only return the first 500 transactions.&lt;/li&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionResponse</returns>
        ApiResponse<TransactionResponse> GetTransactionsWithHttpInfo(string accountId = default(string), string baseType = default(string), string categoryId = default(string), string categoryType = default(string), string container = default(string), string detailCategoryId = default(string), string fromDate = default(string), string highLevelCategoryId = default(string), string keyword = default(string), int? skip = default(int?), string toDate = default(string), int? top = default(int?), string type = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Transactions Count
        /// </summary>
        /// <remarks>
        /// The count service provides the total number of transactions for a specific user depending on the input parameters passed.&lt;br&gt;If you are implementing pagination for transactions, call this endpoint before calling GET /transactions to know the number of transactions that are returned for the input parameters passed.&lt;br&gt;The functionality of the input parameters remains the same as that of the GET /transactions endpoint.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds  (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text  (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionCountResponse</returns>
        TransactionCountResponse GetTransactionsCount(string accountId = default(string), string baseType = default(string), string categoryId = default(string), string categoryType = default(string), string container = default(string), string detailCategoryId = default(string), string fromDate = default(string), string highLevelCategoryId = default(string), string keyword = default(string), string toDate = default(string), string type = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Transactions Count
        /// </summary>
        /// <remarks>
        /// The count service provides the total number of transactions for a specific user depending on the input parameters passed.&lt;br&gt;If you are implementing pagination for transactions, call this endpoint before calling GET /transactions to know the number of transactions that are returned for the input parameters passed.&lt;br&gt;The functionality of the input parameters remains the same as that of the GET /transactions endpoint.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds  (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text  (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionCountResponse</returns>
        ApiResponse<TransactionCountResponse> GetTransactionsCountWithHttpInfo(string accountId = default(string), string baseType = default(string), string categoryId = default(string), string categoryType = default(string), string container = default(string), string detailCategoryId = default(string), string fromDate = default(string), string highLevelCategoryId = default(string), string keyword = default(string), string toDate = default(string), string type = default(string), int operationIndex = 0);
        /// <summary>
        /// Run Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The run transaction categorization rule service is used to run a rule on transactions, to categorize the transactions.&lt;br&gt;The HTTP response code is 204 (Success with no content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"></param>
        /// <param name="ruleId">Unique id of the categorization rule</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RunTransactionCategorizationRule(string action, long ruleId, int operationIndex = 0);

        /// <summary>
        /// Run Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The run transaction categorization rule service is used to run a rule on transactions, to categorize the transactions.&lt;br&gt;The HTTP response code is 204 (Success with no content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"></param>
        /// <param name="ruleId">Unique id of the categorization rule</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RunTransactionCategorizationRuleWithHttpInfo(string action, long ruleId, int operationIndex = 0);
        /// <summary>
        /// Update Transaction
        /// </summary>
        /// <remarks>
        /// The update transaction service is used to update the category,consumer description, memo, isPhysical, merchantType, detailCategory for a transaction.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">transactionId</param>
        /// <param name="transactionRequest">transactionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateTransaction(long transactionId, TransactionRequest transactionRequest, int operationIndex = 0);

        /// <summary>
        /// Update Transaction
        /// </summary>
        /// <remarks>
        /// The update transaction service is used to update the category,consumer description, memo, isPhysical, merchantType, detailCategory for a transaction.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">transactionId</param>
        /// <param name="transactionRequest">transactionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTransactionWithHttpInfo(long transactionId, TransactionRequest transactionRequest, int operationIndex = 0);
        /// <summary>
        /// Update Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The update transaction categorization rule service is used to update a categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;ruleParam JSON input should be as explained in the create transaction categorization rule service.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">ruleId</param>
        /// <param name="transactionCategoriesRuleRequest">transactionCategoriesRuleRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateTransactionCategorizationRule(long ruleId, TransactionCategorizationRuleRequest transactionCategoriesRuleRequest, int operationIndex = 0);

        /// <summary>
        /// Update Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The update transaction categorization rule service is used to update a categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;ruleParam JSON input should be as explained in the create transaction categorization rule service.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">ruleId</param>
        /// <param name="transactionCategoriesRuleRequest">transactionCategoriesRuleRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTransactionCategorizationRuleWithHttpInfo(long ruleId, TransactionCategorizationRuleRequest transactionCategoriesRuleRequest, int operationIndex = 0);
        /// <summary>
        /// Update Category
        /// </summary>
        /// <remarks>
        /// The update transaction categories service is used to update the transaction category name&lt;br&gt;for a high level category, a system-defined category and a user-defined category.&lt;br&gt;The renamed category can be set back to the original name by passing an empty string for categoryName.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCategoryRequest">updateCategoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateTransactionCategory(UpdateCategoryRequest updateCategoryRequest, int operationIndex = 0);

        /// <summary>
        /// Update Category
        /// </summary>
        /// <remarks>
        /// The update transaction categories service is used to update the transaction category name&lt;br&gt;for a high level category, a system-defined category and a user-defined category.&lt;br&gt;The renamed category can be set back to the original name by passing an empty string for categoryName.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCategoryRequest">updateCategoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTransactionCategoryWithHttpInfo(UpdateCategoryRequest updateCategoryRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create or Run Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The Create or Run Transaction Categorization Rule endpoint is used to: &lt;br&gt;Create transaction categorization rules for both system and user-defined categories.&lt;br&gt;Run all the transaction categorization rules to categorize transactions by calling the endpoint with action&#x3D;run as the query parameter. &lt;br&gt;&lt;br&gt;The input body parameters to create transaction categorization rules follow:&lt;br&gt;     categoryId - This field is mandatory and numeric&lt;br&gt;     priority - This field is optional and numeric. Priority decides the order in which the rule gets applied on transactions.&lt;br&gt;     ruleClause - This field is mandatory and should contain at least one rule&lt;br&gt;     field - The value can be description or amount&lt;br&gt;&lt;br&gt;       If the field value is description then,&lt;br&gt;         1. operation - value can be stringEquals or stringContains&lt;br&gt;         2. value - value should be min of 3 and max of 50 characters&lt;br&gt;&lt;br&gt;       If the field value is amount then, &lt;br&gt;         1. operation - value can be numberEquals, numberLessThan, numberLessThanEquals, numberGreaterThan or numberGreaterThanEquals&lt;br&gt;         2. value - min value 0 and a max value of 99999999999.99 is allowed&lt;br&gt;The HTTP response code is 201 (Created Successfully).
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">To run rules, pass action&#x3D;run. Only value run is supported (optional)</param>
        /// <param name="ruleParam">rules(JSON format) to categorize the transactions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateOrRunTransactionCategorizationRulesAsync(string action = default(string), string ruleParam = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create or Run Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The Create or Run Transaction Categorization Rule endpoint is used to: &lt;br&gt;Create transaction categorization rules for both system and user-defined categories.&lt;br&gt;Run all the transaction categorization rules to categorize transactions by calling the endpoint with action&#x3D;run as the query parameter. &lt;br&gt;&lt;br&gt;The input body parameters to create transaction categorization rules follow:&lt;br&gt;     categoryId - This field is mandatory and numeric&lt;br&gt;     priority - This field is optional and numeric. Priority decides the order in which the rule gets applied on transactions.&lt;br&gt;     ruleClause - This field is mandatory and should contain at least one rule&lt;br&gt;     field - The value can be description or amount&lt;br&gt;&lt;br&gt;       If the field value is description then,&lt;br&gt;         1. operation - value can be stringEquals or stringContains&lt;br&gt;         2. value - value should be min of 3 and max of 50 characters&lt;br&gt;&lt;br&gt;       If the field value is amount then, &lt;br&gt;         1. operation - value can be numberEquals, numberLessThan, numberLessThanEquals, numberGreaterThan or numberGreaterThanEquals&lt;br&gt;         2. value - min value 0 and a max value of 99999999999.99 is allowed&lt;br&gt;The HTTP response code is 201 (Created Successfully).
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">To run rules, pass action&#x3D;run. Only value run is supported (optional)</param>
        /// <param name="ruleParam">rules(JSON format) to categorize the transactions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateOrRunTransactionCategorizationRulesWithHttpInfoAsync(string action = default(string), string ruleParam = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Category
        /// </summary>
        /// <remarks>
        /// The create transaction categories service is used to create user-defined categories for a system-defined category.&lt;br&gt;The parentCategoryId is the system-defined category id.This can be retrieved using get transaction categories service.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 201 (Created successfully).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCategoryRequest">User Transaction Category in JSON format</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateTransactionCategoryAsync(TransactionCategoryRequest transactionCategoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Category
        /// </summary>
        /// <remarks>
        /// The create transaction categories service is used to create user-defined categories for a system-defined category.&lt;br&gt;The parentCategoryId is the system-defined category id.This can be retrieved using get transaction categories service.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 201 (Created successfully).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCategoryRequest">User Transaction Category in JSON format</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateTransactionCategoryWithHttpInfoAsync(TransactionCategoryRequest transactionCategoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The delete transaction categorization rule service is used to delete the given user-defined transaction categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;This will delete all the corresponding rule clauses associated with the rule.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">ruleId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTransactionCategorizationRuleAsync(long ruleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The delete transaction categorization rule service is used to delete the given user-defined transaction categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;This will delete all the corresponding rule clauses associated with the rule.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">ruleId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTransactionCategorizationRuleWithHttpInfoAsync(long ruleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Category
        /// </summary>
        /// <remarks>
        /// The delete transaction categories service is used to delete the given user-defined category.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTransactionCategoryAsync(long categoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Category
        /// </summary>
        /// <remarks>
        /// The delete transaction categories service is used to delete the given user-defined category.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTransactionCategoryWithHttpInfoAsync(long categoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Transaction Category List
        /// </summary>
        /// <remarks>
        /// The categories service returns the list of available transaction categories.&lt;br&gt;High level category is returned in the response only if it is opted by the customer.&lt;br&gt;When invoked by passing the cobrand session or admin access token, this service returns the supported transaction categories at the cobrand level. &lt;br&gt;When invoked by passing the cobrand session and the user session or user access token, this service returns the transaction categories &lt;br&gt;along with user-defined categories.&lt;br&gt;Double quotes in the user-defined category name will be prefixed by backslashes (&amp;#92;) in the response, &lt;br&gt;e.g. Toys \&quot;R\&quot; Us.&lt;br/&gt;Source and id are the primary attributes of the category entity.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionCategoryResponse</returns>
        System.Threading.Tasks.Task<TransactionCategoryResponse> GetTransactionCategoriesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Transaction Category List
        /// </summary>
        /// <remarks>
        /// The categories service returns the list of available transaction categories.&lt;br&gt;High level category is returned in the response only if it is opted by the customer.&lt;br&gt;When invoked by passing the cobrand session or admin access token, this service returns the supported transaction categories at the cobrand level. &lt;br&gt;When invoked by passing the cobrand session and the user session or user access token, this service returns the transaction categories &lt;br&gt;along with user-defined categories.&lt;br&gt;Double quotes in the user-defined category name will be prefixed by backslashes (&amp;#92;) in the response, &lt;br&gt;e.g. Toys \&quot;R\&quot; Us.&lt;br/&gt;Source and id are the primary attributes of the category entity.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionCategoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionCategoryResponse>> GetTransactionCategoriesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Transaction Categorization Rules
        /// </summary>
        /// <remarks>
        /// The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionCategorizationRuleResponse</returns>
        System.Threading.Tasks.Task<TransactionCategorizationRuleResponse> GetTransactionCategorizationRulesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Transaction Categorization Rules
        /// </summary>
        /// <remarks>
        /// The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionCategorizationRuleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionCategorizationRuleResponse>> GetTransactionCategorizationRulesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Transaction Categorization Rules
        /// </summary>
        /// <remarks>
        /// The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TransactionCategorizationRule&gt;</returns>
        [Obsolete]
        System.Threading.Tasks.Task<List<TransactionCategorizationRule>> GetTransactionCategorizationRulesDeprecatedAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Transaction Categorization Rules
        /// </summary>
        /// <remarks>
        /// The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TransactionCategorizationRule&gt;)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<List<TransactionCategorizationRule>>> GetTransactionCategorizationRulesDeprecatedWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Transactions
        /// </summary>
        /// <remarks>
        /// The Transaction service is used to get a list of transactions for a user.&lt;br&gt;By default, this service returns the last 30 days of transactions from today&#39;s date.&lt;br&gt;The keyword parameter performs a contains search on the original, consumer, and simple description attributes, replace the special characters #, &amp;, and + with percent-encoding values %23, %26, and %2B respectively. Eg: for -Debit# , pass the input as -Debit%23.&lt;br&gt;Values for categoryId parameter can be fetched from get transaction category list service.&lt;br&gt; The categoryId is used to filter transactions based on system-defined category as well as user-defined category.&lt;br&gt;User-defined categoryIds should be provided in the filter with the prefix &#39;&#39;U&#39;&#39;. E.g. U10002&lt;br&gt;The skip and top parameters are used for pagination. In the skip and top parameters pass the number of records to be skipped and retrieved, respectively. The response header provides the links to retrieve the next and previous set of transactions.&lt;br&gt;Double quotes in the merchant name will be prefixed by backslashes (&amp;#92;) in the response, e.g. Toys \&quot;R\&quot; Us. &lt;br&gt;sourceId is a unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts. Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.yodlee.com/docs/api/1.1/Transaction_Data_Enrichment\&quot;&gt;TDE&lt;/a&gt; is made available for bank and card accounts. The address field in the response is available only when the TDE key is turned on.&lt;/li&gt;&lt;li&gt;The pagination feature is available by default. If no values are passed in the skip and top parameters, the API will only return the first 500 transactions.&lt;/li&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionResponse</returns>
        System.Threading.Tasks.Task<TransactionResponse> GetTransactionsAsync(string accountId = default(string), string baseType = default(string), string categoryId = default(string), string categoryType = default(string), string container = default(string), string detailCategoryId = default(string), string fromDate = default(string), string highLevelCategoryId = default(string), string keyword = default(string), int? skip = default(int?), string toDate = default(string), int? top = default(int?), string type = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Transactions
        /// </summary>
        /// <remarks>
        /// The Transaction service is used to get a list of transactions for a user.&lt;br&gt;By default, this service returns the last 30 days of transactions from today&#39;s date.&lt;br&gt;The keyword parameter performs a contains search on the original, consumer, and simple description attributes, replace the special characters #, &amp;, and + with percent-encoding values %23, %26, and %2B respectively. Eg: for -Debit# , pass the input as -Debit%23.&lt;br&gt;Values for categoryId parameter can be fetched from get transaction category list service.&lt;br&gt; The categoryId is used to filter transactions based on system-defined category as well as user-defined category.&lt;br&gt;User-defined categoryIds should be provided in the filter with the prefix &#39;&#39;U&#39;&#39;. E.g. U10002&lt;br&gt;The skip and top parameters are used for pagination. In the skip and top parameters pass the number of records to be skipped and retrieved, respectively. The response header provides the links to retrieve the next and previous set of transactions.&lt;br&gt;Double quotes in the merchant name will be prefixed by backslashes (&amp;#92;) in the response, e.g. Toys \&quot;R\&quot; Us. &lt;br&gt;sourceId is a unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts. Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.yodlee.com/docs/api/1.1/Transaction_Data_Enrichment\&quot;&gt;TDE&lt;/a&gt; is made available for bank and card accounts. The address field in the response is available only when the TDE key is turned on.&lt;/li&gt;&lt;li&gt;The pagination feature is available by default. If no values are passed in the skip and top parameters, the API will only return the first 500 transactions.&lt;/li&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionResponse>> GetTransactionsWithHttpInfoAsync(string accountId = default(string), string baseType = default(string), string categoryId = default(string), string categoryType = default(string), string container = default(string), string detailCategoryId = default(string), string fromDate = default(string), string highLevelCategoryId = default(string), string keyword = default(string), int? skip = default(int?), string toDate = default(string), int? top = default(int?), string type = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Transactions Count
        /// </summary>
        /// <remarks>
        /// The count service provides the total number of transactions for a specific user depending on the input parameters passed.&lt;br&gt;If you are implementing pagination for transactions, call this endpoint before calling GET /transactions to know the number of transactions that are returned for the input parameters passed.&lt;br&gt;The functionality of the input parameters remains the same as that of the GET /transactions endpoint.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds  (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text  (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionCountResponse</returns>
        System.Threading.Tasks.Task<TransactionCountResponse> GetTransactionsCountAsync(string accountId = default(string), string baseType = default(string), string categoryId = default(string), string categoryType = default(string), string container = default(string), string detailCategoryId = default(string), string fromDate = default(string), string highLevelCategoryId = default(string), string keyword = default(string), string toDate = default(string), string type = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Transactions Count
        /// </summary>
        /// <remarks>
        /// The count service provides the total number of transactions for a specific user depending on the input parameters passed.&lt;br&gt;If you are implementing pagination for transactions, call this endpoint before calling GET /transactions to know the number of transactions that are returned for the input parameters passed.&lt;br&gt;The functionality of the input parameters remains the same as that of the GET /transactions endpoint.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds  (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text  (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionCountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionCountResponse>> GetTransactionsCountWithHttpInfoAsync(string accountId = default(string), string baseType = default(string), string categoryId = default(string), string categoryType = default(string), string container = default(string), string detailCategoryId = default(string), string fromDate = default(string), string highLevelCategoryId = default(string), string keyword = default(string), string toDate = default(string), string type = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Run Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The run transaction categorization rule service is used to run a rule on transactions, to categorize the transactions.&lt;br&gt;The HTTP response code is 204 (Success with no content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"></param>
        /// <param name="ruleId">Unique id of the categorization rule</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RunTransactionCategorizationRuleAsync(string action, long ruleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Run Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The run transaction categorization rule service is used to run a rule on transactions, to categorize the transactions.&lt;br&gt;The HTTP response code is 204 (Success with no content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"></param>
        /// <param name="ruleId">Unique id of the categorization rule</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RunTransactionCategorizationRuleWithHttpInfoAsync(string action, long ruleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Transaction
        /// </summary>
        /// <remarks>
        /// The update transaction service is used to update the category,consumer description, memo, isPhysical, merchantType, detailCategory for a transaction.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">transactionId</param>
        /// <param name="transactionRequest">transactionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTransactionAsync(long transactionId, TransactionRequest transactionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Transaction
        /// </summary>
        /// <remarks>
        /// The update transaction service is used to update the category,consumer description, memo, isPhysical, merchantType, detailCategory for a transaction.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">transactionId</param>
        /// <param name="transactionRequest">transactionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTransactionWithHttpInfoAsync(long transactionId, TransactionRequest transactionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The update transaction categorization rule service is used to update a categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;ruleParam JSON input should be as explained in the create transaction categorization rule service.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">ruleId</param>
        /// <param name="transactionCategoriesRuleRequest">transactionCategoriesRuleRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTransactionCategorizationRuleAsync(long ruleId, TransactionCategorizationRuleRequest transactionCategoriesRuleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Transaction Categorization Rule
        /// </summary>
        /// <remarks>
        /// The update transaction categorization rule service is used to update a categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;ruleParam JSON input should be as explained in the create transaction categorization rule service.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">ruleId</param>
        /// <param name="transactionCategoriesRuleRequest">transactionCategoriesRuleRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTransactionCategorizationRuleWithHttpInfoAsync(long ruleId, TransactionCategorizationRuleRequest transactionCategoriesRuleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Category
        /// </summary>
        /// <remarks>
        /// The update transaction categories service is used to update the transaction category name&lt;br&gt;for a high level category, a system-defined category and a user-defined category.&lt;br&gt;The renamed category can be set back to the original name by passing an empty string for categoryName.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCategoryRequest">updateCategoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTransactionCategoryAsync(UpdateCategoryRequest updateCategoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Category
        /// </summary>
        /// <remarks>
        /// The update transaction categories service is used to update the transaction category name&lt;br&gt;for a high level category, a system-defined category and a user-defined category.&lt;br&gt;The renamed category can be set back to the original name by passing an empty string for categoryName.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCategoryRequest">updateCategoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTransactionCategoryWithHttpInfoAsync(UpdateCategoryRequest updateCategoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionsApi : ITransactionsApiSync, ITransactionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransactionsApi : ITransactionsApi
    {
        private Yodlee.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionsApi(string basePath)
        {
            this.Configuration = Yodlee.ApiClient.Client.Configuration.MergeConfigurations(
                Yodlee.ApiClient.Client.GlobalConfiguration.Instance,
                new Yodlee.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yodlee.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransactionsApi(Yodlee.ApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yodlee.ApiClient.Client.Configuration.MergeConfigurations(
                Yodlee.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yodlee.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TransactionsApi(Yodlee.ApiClient.Client.ISynchronousClient client, Yodlee.ApiClient.Client.IAsynchronousClient asyncClient, Yodlee.ApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yodlee.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yodlee.ApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yodlee.ApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yodlee.ApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yodlee.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create or Run Transaction Categorization Rule The Create or Run Transaction Categorization Rule endpoint is used to: &lt;br&gt;Create transaction categorization rules for both system and user-defined categories.&lt;br&gt;Run all the transaction categorization rules to categorize transactions by calling the endpoint with action&#x3D;run as the query parameter. &lt;br&gt;&lt;br&gt;The input body parameters to create transaction categorization rules follow:&lt;br&gt;     categoryId - This field is mandatory and numeric&lt;br&gt;     priority - This field is optional and numeric. Priority decides the order in which the rule gets applied on transactions.&lt;br&gt;     ruleClause - This field is mandatory and should contain at least one rule&lt;br&gt;     field - The value can be description or amount&lt;br&gt;&lt;br&gt;       If the field value is description then,&lt;br&gt;         1. operation - value can be stringEquals or stringContains&lt;br&gt;         2. value - value should be min of 3 and max of 50 characters&lt;br&gt;&lt;br&gt;       If the field value is amount then, &lt;br&gt;         1. operation - value can be numberEquals, numberLessThan, numberLessThanEquals, numberGreaterThan or numberGreaterThanEquals&lt;br&gt;         2. value - min value 0 and a max value of 99999999999.99 is allowed&lt;br&gt;The HTTP response code is 201 (Created Successfully).
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">To run rules, pass action&#x3D;run. Only value run is supported (optional)</param>
        /// <param name="ruleParam">rules(JSON format) to categorize the transactions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CreateOrRunTransactionCategorizationRules(string action = default(string), string ruleParam = default(string), int operationIndex = 0)
        {
            CreateOrRunTransactionCategorizationRulesWithHttpInfo(action, ruleParam);
        }

        /// <summary>
        /// Create or Run Transaction Categorization Rule The Create or Run Transaction Categorization Rule endpoint is used to: &lt;br&gt;Create transaction categorization rules for both system and user-defined categories.&lt;br&gt;Run all the transaction categorization rules to categorize transactions by calling the endpoint with action&#x3D;run as the query parameter. &lt;br&gt;&lt;br&gt;The input body parameters to create transaction categorization rules follow:&lt;br&gt;     categoryId - This field is mandatory and numeric&lt;br&gt;     priority - This field is optional and numeric. Priority decides the order in which the rule gets applied on transactions.&lt;br&gt;     ruleClause - This field is mandatory and should contain at least one rule&lt;br&gt;     field - The value can be description or amount&lt;br&gt;&lt;br&gt;       If the field value is description then,&lt;br&gt;         1. operation - value can be stringEquals or stringContains&lt;br&gt;         2. value - value should be min of 3 and max of 50 characters&lt;br&gt;&lt;br&gt;       If the field value is amount then, &lt;br&gt;         1. operation - value can be numberEquals, numberLessThan, numberLessThanEquals, numberGreaterThan or numberGreaterThanEquals&lt;br&gt;         2. value - min value 0 and a max value of 99999999999.99 is allowed&lt;br&gt;The HTTP response code is 201 (Created Successfully).
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">To run rules, pass action&#x3D;run. Only value run is supported (optional)</param>
        /// <param name="ruleParam">rules(JSON format) to categorize the transactions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yodlee.ApiClient.Client.ApiResponse<Object> CreateOrRunTransactionCategorizationRulesWithHttpInfo(string action = default(string), string ruleParam = default(string), int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }
            if (ruleParam != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "ruleParam", ruleParam));
            }

            localVarRequestOptions.Operation = "TransactionsApi.CreateOrRunTransactionCategorizationRules";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transactions/categories/rules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrRunTransactionCategorizationRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or Run Transaction Categorization Rule The Create or Run Transaction Categorization Rule endpoint is used to: &lt;br&gt;Create transaction categorization rules for both system and user-defined categories.&lt;br&gt;Run all the transaction categorization rules to categorize transactions by calling the endpoint with action&#x3D;run as the query parameter. &lt;br&gt;&lt;br&gt;The input body parameters to create transaction categorization rules follow:&lt;br&gt;     categoryId - This field is mandatory and numeric&lt;br&gt;     priority - This field is optional and numeric. Priority decides the order in which the rule gets applied on transactions.&lt;br&gt;     ruleClause - This field is mandatory and should contain at least one rule&lt;br&gt;     field - The value can be description or amount&lt;br&gt;&lt;br&gt;       If the field value is description then,&lt;br&gt;         1. operation - value can be stringEquals or stringContains&lt;br&gt;         2. value - value should be min of 3 and max of 50 characters&lt;br&gt;&lt;br&gt;       If the field value is amount then, &lt;br&gt;         1. operation - value can be numberEquals, numberLessThan, numberLessThanEquals, numberGreaterThan or numberGreaterThanEquals&lt;br&gt;         2. value - min value 0 and a max value of 99999999999.99 is allowed&lt;br&gt;The HTTP response code is 201 (Created Successfully).
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">To run rules, pass action&#x3D;run. Only value run is supported (optional)</param>
        /// <param name="ruleParam">rules(JSON format) to categorize the transactions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateOrRunTransactionCategorizationRulesAsync(string action = default(string), string ruleParam = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateOrRunTransactionCategorizationRulesWithHttpInfoAsync(action, ruleParam, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create or Run Transaction Categorization Rule The Create or Run Transaction Categorization Rule endpoint is used to: &lt;br&gt;Create transaction categorization rules for both system and user-defined categories.&lt;br&gt;Run all the transaction categorization rules to categorize transactions by calling the endpoint with action&#x3D;run as the query parameter. &lt;br&gt;&lt;br&gt;The input body parameters to create transaction categorization rules follow:&lt;br&gt;     categoryId - This field is mandatory and numeric&lt;br&gt;     priority - This field is optional and numeric. Priority decides the order in which the rule gets applied on transactions.&lt;br&gt;     ruleClause - This field is mandatory and should contain at least one rule&lt;br&gt;     field - The value can be description or amount&lt;br&gt;&lt;br&gt;       If the field value is description then,&lt;br&gt;         1. operation - value can be stringEquals or stringContains&lt;br&gt;         2. value - value should be min of 3 and max of 50 characters&lt;br&gt;&lt;br&gt;       If the field value is amount then, &lt;br&gt;         1. operation - value can be numberEquals, numberLessThan, numberLessThanEquals, numberGreaterThan or numberGreaterThanEquals&lt;br&gt;         2. value - min value 0 and a max value of 99999999999.99 is allowed&lt;br&gt;The HTTP response code is 201 (Created Successfully).
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action">To run rules, pass action&#x3D;run. Only value run is supported (optional)</param>
        /// <param name="ruleParam">rules(JSON format) to categorize the transactions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<Object>> CreateOrRunTransactionCategorizationRulesWithHttpInfoAsync(string action = default(string), string ruleParam = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }
            if (ruleParam != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "ruleParam", ruleParam));
            }

            localVarRequestOptions.Operation = "TransactionsApi.CreateOrRunTransactionCategorizationRules";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transactions/categories/rules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrRunTransactionCategorizationRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Category The create transaction categories service is used to create user-defined categories for a system-defined category.&lt;br&gt;The parentCategoryId is the system-defined category id.This can be retrieved using get transaction categories service.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 201 (Created successfully).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCategoryRequest">User Transaction Category in JSON format</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CreateTransactionCategory(TransactionCategoryRequest transactionCategoryRequest, int operationIndex = 0)
        {
            CreateTransactionCategoryWithHttpInfo(transactionCategoryRequest);
        }

        /// <summary>
        /// Create Category The create transaction categories service is used to create user-defined categories for a system-defined category.&lt;br&gt;The parentCategoryId is the system-defined category id.This can be retrieved using get transaction categories service.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 201 (Created successfully).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCategoryRequest">User Transaction Category in JSON format</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yodlee.ApiClient.Client.ApiResponse<Object> CreateTransactionCategoryWithHttpInfo(TransactionCategoryRequest transactionCategoryRequest, int operationIndex = 0)
        {
            // verify the required parameter 'transactionCategoryRequest' is set
            if (transactionCategoryRequest == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'transactionCategoryRequest' when calling TransactionsApi->CreateTransactionCategory");
            }

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transactionCategoryRequest;

            localVarRequestOptions.Operation = "TransactionsApi.CreateTransactionCategory";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transactions/categories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTransactionCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Category The create transaction categories service is used to create user-defined categories for a system-defined category.&lt;br&gt;The parentCategoryId is the system-defined category id.This can be retrieved using get transaction categories service.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 201 (Created successfully).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCategoryRequest">User Transaction Category in JSON format</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateTransactionCategoryAsync(TransactionCategoryRequest transactionCategoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateTransactionCategoryWithHttpInfoAsync(transactionCategoryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create Category The create transaction categories service is used to create user-defined categories for a system-defined category.&lt;br&gt;The parentCategoryId is the system-defined category id.This can be retrieved using get transaction categories service.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 201 (Created successfully).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCategoryRequest">User Transaction Category in JSON format</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<Object>> CreateTransactionCategoryWithHttpInfoAsync(TransactionCategoryRequest transactionCategoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionCategoryRequest' is set
            if (transactionCategoryRequest == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'transactionCategoryRequest' when calling TransactionsApi->CreateTransactionCategory");
            }


            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transactionCategoryRequest;

            localVarRequestOptions.Operation = "TransactionsApi.CreateTransactionCategory";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transactions/categories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTransactionCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Transaction Categorization Rule The delete transaction categorization rule service is used to delete the given user-defined transaction categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;This will delete all the corresponding rule clauses associated with the rule.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">ruleId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteTransactionCategorizationRule(long ruleId, int operationIndex = 0)
        {
            DeleteTransactionCategorizationRuleWithHttpInfo(ruleId);
        }

        /// <summary>
        /// Delete Transaction Categorization Rule The delete transaction categorization rule service is used to delete the given user-defined transaction categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;This will delete all the corresponding rule clauses associated with the rule.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">ruleId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yodlee.ApiClient.Client.ApiResponse<Object> DeleteTransactionCategorizationRuleWithHttpInfo(long ruleId, int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ruleId", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(ruleId)); // path parameter

            localVarRequestOptions.Operation = "TransactionsApi.DeleteTransactionCategorizationRule";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/transactions/categories/rules/{ruleId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTransactionCategorizationRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Transaction Categorization Rule The delete transaction categorization rule service is used to delete the given user-defined transaction categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;This will delete all the corresponding rule clauses associated with the rule.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">ruleId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTransactionCategorizationRuleAsync(long ruleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTransactionCategorizationRuleWithHttpInfoAsync(ruleId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Transaction Categorization Rule The delete transaction categorization rule service is used to delete the given user-defined transaction categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;This will delete all the corresponding rule clauses associated with the rule.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">ruleId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<Object>> DeleteTransactionCategorizationRuleWithHttpInfoAsync(long ruleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ruleId", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(ruleId)); // path parameter

            localVarRequestOptions.Operation = "TransactionsApi.DeleteTransactionCategorizationRule";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/transactions/categories/rules/{ruleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTransactionCategorizationRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Category The delete transaction categories service is used to delete the given user-defined category.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteTransactionCategory(long categoryId, int operationIndex = 0)
        {
            DeleteTransactionCategoryWithHttpInfo(categoryId);
        }

        /// <summary>
        /// Delete Category The delete transaction categories service is used to delete the given user-defined category.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yodlee.ApiClient.Client.ApiResponse<Object> DeleteTransactionCategoryWithHttpInfo(long categoryId, int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("categoryId", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(categoryId)); // path parameter

            localVarRequestOptions.Operation = "TransactionsApi.DeleteTransactionCategory";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/transactions/categories/{categoryId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTransactionCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Category The delete transaction categories service is used to delete the given user-defined category.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTransactionCategoryAsync(long categoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTransactionCategoryWithHttpInfoAsync(categoryId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Category The delete transaction categories service is used to delete the given user-defined category.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">categoryId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<Object>> DeleteTransactionCategoryWithHttpInfoAsync(long categoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("categoryId", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(categoryId)); // path parameter

            localVarRequestOptions.Operation = "TransactionsApi.DeleteTransactionCategory";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/transactions/categories/{categoryId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTransactionCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Transaction Category List The categories service returns the list of available transaction categories.&lt;br&gt;High level category is returned in the response only if it is opted by the customer.&lt;br&gt;When invoked by passing the cobrand session or admin access token, this service returns the supported transaction categories at the cobrand level. &lt;br&gt;When invoked by passing the cobrand session and the user session or user access token, this service returns the transaction categories &lt;br&gt;along with user-defined categories.&lt;br&gt;Double quotes in the user-defined category name will be prefixed by backslashes (&amp;#92;) in the response, &lt;br&gt;e.g. Toys \&quot;R\&quot; Us.&lt;br/&gt;Source and id are the primary attributes of the category entity.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionCategoryResponse</returns>
        public TransactionCategoryResponse GetTransactionCategories(int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<TransactionCategoryResponse> localVarResponse = GetTransactionCategoriesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transaction Category List The categories service returns the list of available transaction categories.&lt;br&gt;High level category is returned in the response only if it is opted by the customer.&lt;br&gt;When invoked by passing the cobrand session or admin access token, this service returns the supported transaction categories at the cobrand level. &lt;br&gt;When invoked by passing the cobrand session and the user session or user access token, this service returns the transaction categories &lt;br&gt;along with user-defined categories.&lt;br&gt;Double quotes in the user-defined category name will be prefixed by backslashes (&amp;#92;) in the response, &lt;br&gt;e.g. Toys \&quot;R\&quot; Us.&lt;br/&gt;Source and id are the primary attributes of the category entity.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionCategoryResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<TransactionCategoryResponse> GetTransactionCategoriesWithHttpInfo(int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TransactionsApi.GetTransactionCategories";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionCategoryResponse>("/transactions/categories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactionCategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Transaction Category List The categories service returns the list of available transaction categories.&lt;br&gt;High level category is returned in the response only if it is opted by the customer.&lt;br&gt;When invoked by passing the cobrand session or admin access token, this service returns the supported transaction categories at the cobrand level. &lt;br&gt;When invoked by passing the cobrand session and the user session or user access token, this service returns the transaction categories &lt;br&gt;along with user-defined categories.&lt;br&gt;Double quotes in the user-defined category name will be prefixed by backslashes (&amp;#92;) in the response, &lt;br&gt;e.g. Toys \&quot;R\&quot; Us.&lt;br/&gt;Source and id are the primary attributes of the category entity.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionCategoryResponse</returns>
        public async System.Threading.Tasks.Task<TransactionCategoryResponse> GetTransactionCategoriesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<TransactionCategoryResponse> localVarResponse = await GetTransactionCategoriesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transaction Category List The categories service returns the list of available transaction categories.&lt;br&gt;High level category is returned in the response only if it is opted by the customer.&lt;br&gt;When invoked by passing the cobrand session or admin access token, this service returns the supported transaction categories at the cobrand level. &lt;br&gt;When invoked by passing the cobrand session and the user session or user access token, this service returns the transaction categories &lt;br&gt;along with user-defined categories.&lt;br&gt;Double quotes in the user-defined category name will be prefixed by backslashes (&amp;#92;) in the response, &lt;br&gt;e.g. Toys \&quot;R\&quot; Us.&lt;br/&gt;Source and id are the primary attributes of the category entity.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionCategoryResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<TransactionCategoryResponse>> GetTransactionCategoriesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TransactionsApi.GetTransactionCategories";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionCategoryResponse>("/transactions/categories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactionCategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Transaction Categorization Rules The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionCategorizationRuleResponse</returns>
        public TransactionCategorizationRuleResponse GetTransactionCategorizationRules(int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<TransactionCategorizationRuleResponse> localVarResponse = GetTransactionCategorizationRulesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transaction Categorization Rules The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionCategorizationRuleResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<TransactionCategorizationRuleResponse> GetTransactionCategorizationRulesWithHttpInfo(int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TransactionsApi.GetTransactionCategorizationRules";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionCategorizationRuleResponse>("/transactions/categories/txnRules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactionCategorizationRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Transaction Categorization Rules The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionCategorizationRuleResponse</returns>
        public async System.Threading.Tasks.Task<TransactionCategorizationRuleResponse> GetTransactionCategorizationRulesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<TransactionCategorizationRuleResponse> localVarResponse = await GetTransactionCategorizationRulesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transaction Categorization Rules The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionCategorizationRuleResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<TransactionCategorizationRuleResponse>> GetTransactionCategorizationRulesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TransactionsApi.GetTransactionCategorizationRules";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionCategorizationRuleResponse>("/transactions/categories/txnRules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactionCategorizationRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Transaction Categorization Rules The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TransactionCategorizationRule&gt;</returns>
        [Obsolete]
        public List<TransactionCategorizationRule> GetTransactionCategorizationRulesDeprecated(int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<List<TransactionCategorizationRule>> localVarResponse = GetTransactionCategorizationRulesDeprecatedWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transaction Categorization Rules The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TransactionCategorizationRule&gt;</returns>
        [Obsolete]
        public Yodlee.ApiClient.Client.ApiResponse<List<TransactionCategorizationRule>> GetTransactionCategorizationRulesDeprecatedWithHttpInfo(int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TransactionsApi.GetTransactionCategorizationRulesDeprecated";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TransactionCategorizationRule>>("/transactions/categories/rules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactionCategorizationRulesDeprecated", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Transaction Categorization Rules The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TransactionCategorizationRule&gt;</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<List<TransactionCategorizationRule>> GetTransactionCategorizationRulesDeprecatedAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<List<TransactionCategorizationRule>> localVarResponse = await GetTransactionCategorizationRulesDeprecatedWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transaction Categorization Rules The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TransactionCategorizationRule&gt;)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<List<TransactionCategorizationRule>>> GetTransactionCategorizationRulesDeprecatedWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TransactionsApi.GetTransactionCategorizationRulesDeprecated";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TransactionCategorizationRule>>("/transactions/categories/rules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactionCategorizationRulesDeprecated", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Transactions The Transaction service is used to get a list of transactions for a user.&lt;br&gt;By default, this service returns the last 30 days of transactions from today&#39;s date.&lt;br&gt;The keyword parameter performs a contains search on the original, consumer, and simple description attributes, replace the special characters #, &amp;, and + with percent-encoding values %23, %26, and %2B respectively. Eg: for -Debit# , pass the input as -Debit%23.&lt;br&gt;Values for categoryId parameter can be fetched from get transaction category list service.&lt;br&gt; The categoryId is used to filter transactions based on system-defined category as well as user-defined category.&lt;br&gt;User-defined categoryIds should be provided in the filter with the prefix &#39;&#39;U&#39;&#39;. E.g. U10002&lt;br&gt;The skip and top parameters are used for pagination. In the skip and top parameters pass the number of records to be skipped and retrieved, respectively. The response header provides the links to retrieve the next and previous set of transactions.&lt;br&gt;Double quotes in the merchant name will be prefixed by backslashes (&amp;#92;) in the response, e.g. Toys \&quot;R\&quot; Us. &lt;br&gt;sourceId is a unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts. Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.yodlee.com/docs/api/1.1/Transaction_Data_Enrichment\&quot;&gt;TDE&lt;/a&gt; is made available for bank and card accounts. The address field in the response is available only when the TDE key is turned on.&lt;/li&gt;&lt;li&gt;The pagination feature is available by default. If no values are passed in the skip and top parameters, the API will only return the first 500 transactions.&lt;/li&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionResponse</returns>
        public TransactionResponse GetTransactions(string accountId = default(string), string baseType = default(string), string categoryId = default(string), string categoryType = default(string), string container = default(string), string detailCategoryId = default(string), string fromDate = default(string), string highLevelCategoryId = default(string), string keyword = default(string), int? skip = default(int?), string toDate = default(string), int? top = default(int?), string type = default(string), int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<TransactionResponse> localVarResponse = GetTransactionsWithHttpInfo(accountId, baseType, categoryId, categoryType, container, detailCategoryId, fromDate, highLevelCategoryId, keyword, skip, toDate, top, type);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transactions The Transaction service is used to get a list of transactions for a user.&lt;br&gt;By default, this service returns the last 30 days of transactions from today&#39;s date.&lt;br&gt;The keyword parameter performs a contains search on the original, consumer, and simple description attributes, replace the special characters #, &amp;, and + with percent-encoding values %23, %26, and %2B respectively. Eg: for -Debit# , pass the input as -Debit%23.&lt;br&gt;Values for categoryId parameter can be fetched from get transaction category list service.&lt;br&gt; The categoryId is used to filter transactions based on system-defined category as well as user-defined category.&lt;br&gt;User-defined categoryIds should be provided in the filter with the prefix &#39;&#39;U&#39;&#39;. E.g. U10002&lt;br&gt;The skip and top parameters are used for pagination. In the skip and top parameters pass the number of records to be skipped and retrieved, respectively. The response header provides the links to retrieve the next and previous set of transactions.&lt;br&gt;Double quotes in the merchant name will be prefixed by backslashes (&amp;#92;) in the response, e.g. Toys \&quot;R\&quot; Us. &lt;br&gt;sourceId is a unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts. Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.yodlee.com/docs/api/1.1/Transaction_Data_Enrichment\&quot;&gt;TDE&lt;/a&gt; is made available for bank and card accounts. The address field in the response is available only when the TDE key is turned on.&lt;/li&gt;&lt;li&gt;The pagination feature is available by default. If no values are passed in the skip and top parameters, the API will only return the first 500 transactions.&lt;/li&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<TransactionResponse> GetTransactionsWithHttpInfo(string accountId = default(string), string baseType = default(string), string categoryId = default(string), string categoryType = default(string), string container = default(string), string detailCategoryId = default(string), string fromDate = default(string), string highLevelCategoryId = default(string), string keyword = default(string), int? skip = default(int?), string toDate = default(string), int? top = default(int?), string type = default(string), int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "accountId", accountId));
            }
            if (baseType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "baseType", baseType));
            }
            if (categoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "categoryId", categoryId));
            }
            if (categoryType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "categoryType", categoryType));
            }
            if (container != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "container", container));
            }
            if (detailCategoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "detailCategoryId", detailCategoryId));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (highLevelCategoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "highLevelCategoryId", highLevelCategoryId));
            }
            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "top", top));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            localVarRequestOptions.Operation = "TransactionsApi.GetTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionResponse>("/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Transactions The Transaction service is used to get a list of transactions for a user.&lt;br&gt;By default, this service returns the last 30 days of transactions from today&#39;s date.&lt;br&gt;The keyword parameter performs a contains search on the original, consumer, and simple description attributes, replace the special characters #, &amp;, and + with percent-encoding values %23, %26, and %2B respectively. Eg: for -Debit# , pass the input as -Debit%23.&lt;br&gt;Values for categoryId parameter can be fetched from get transaction category list service.&lt;br&gt; The categoryId is used to filter transactions based on system-defined category as well as user-defined category.&lt;br&gt;User-defined categoryIds should be provided in the filter with the prefix &#39;&#39;U&#39;&#39;. E.g. U10002&lt;br&gt;The skip and top parameters are used for pagination. In the skip and top parameters pass the number of records to be skipped and retrieved, respectively. The response header provides the links to retrieve the next and previous set of transactions.&lt;br&gt;Double quotes in the merchant name will be prefixed by backslashes (&amp;#92;) in the response, e.g. Toys \&quot;R\&quot; Us. &lt;br&gt;sourceId is a unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts. Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.yodlee.com/docs/api/1.1/Transaction_Data_Enrichment\&quot;&gt;TDE&lt;/a&gt; is made available for bank and card accounts. The address field in the response is available only when the TDE key is turned on.&lt;/li&gt;&lt;li&gt;The pagination feature is available by default. If no values are passed in the skip and top parameters, the API will only return the first 500 transactions.&lt;/li&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionResponse</returns>
        public async System.Threading.Tasks.Task<TransactionResponse> GetTransactionsAsync(string accountId = default(string), string baseType = default(string), string categoryId = default(string), string categoryType = default(string), string container = default(string), string detailCategoryId = default(string), string fromDate = default(string), string highLevelCategoryId = default(string), string keyword = default(string), int? skip = default(int?), string toDate = default(string), int? top = default(int?), string type = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<TransactionResponse> localVarResponse = await GetTransactionsWithHttpInfoAsync(accountId, baseType, categoryId, categoryType, container, detailCategoryId, fromDate, highLevelCategoryId, keyword, skip, toDate, top, type, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transactions The Transaction service is used to get a list of transactions for a user.&lt;br&gt;By default, this service returns the last 30 days of transactions from today&#39;s date.&lt;br&gt;The keyword parameter performs a contains search on the original, consumer, and simple description attributes, replace the special characters #, &amp;, and + with percent-encoding values %23, %26, and %2B respectively. Eg: for -Debit# , pass the input as -Debit%23.&lt;br&gt;Values for categoryId parameter can be fetched from get transaction category list service.&lt;br&gt; The categoryId is used to filter transactions based on system-defined category as well as user-defined category.&lt;br&gt;User-defined categoryIds should be provided in the filter with the prefix &#39;&#39;U&#39;&#39;. E.g. U10002&lt;br&gt;The skip and top parameters are used for pagination. In the skip and top parameters pass the number of records to be skipped and retrieved, respectively. The response header provides the links to retrieve the next and previous set of transactions.&lt;br&gt;Double quotes in the merchant name will be prefixed by backslashes (&amp;#92;) in the response, e.g. Toys \&quot;R\&quot; Us. &lt;br&gt;sourceId is a unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts. Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.yodlee.com/docs/api/1.1/Transaction_Data_Enrichment\&quot;&gt;TDE&lt;/a&gt; is made available for bank and card accounts. The address field in the response is available only when the TDE key is turned on.&lt;/li&gt;&lt;li&gt;The pagination feature is available by default. If no values are passed in the skip and top parameters, the API will only return the first 500 transactions.&lt;/li&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<TransactionResponse>> GetTransactionsWithHttpInfoAsync(string accountId = default(string), string baseType = default(string), string categoryId = default(string), string categoryType = default(string), string container = default(string), string detailCategoryId = default(string), string fromDate = default(string), string highLevelCategoryId = default(string), string keyword = default(string), int? skip = default(int?), string toDate = default(string), int? top = default(int?), string type = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "accountId", accountId));
            }
            if (baseType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "baseType", baseType));
            }
            if (categoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "categoryId", categoryId));
            }
            if (categoryType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "categoryType", categoryType));
            }
            if (container != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "container", container));
            }
            if (detailCategoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "detailCategoryId", detailCategoryId));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (highLevelCategoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "highLevelCategoryId", highLevelCategoryId));
            }
            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "top", top));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            localVarRequestOptions.Operation = "TransactionsApi.GetTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionResponse>("/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Transactions Count The count service provides the total number of transactions for a specific user depending on the input parameters passed.&lt;br&gt;If you are implementing pagination for transactions, call this endpoint before calling GET /transactions to know the number of transactions that are returned for the input parameters passed.&lt;br&gt;The functionality of the input parameters remains the same as that of the GET /transactions endpoint.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds  (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text  (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionCountResponse</returns>
        public TransactionCountResponse GetTransactionsCount(string accountId = default(string), string baseType = default(string), string categoryId = default(string), string categoryType = default(string), string container = default(string), string detailCategoryId = default(string), string fromDate = default(string), string highLevelCategoryId = default(string), string keyword = default(string), string toDate = default(string), string type = default(string), int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<TransactionCountResponse> localVarResponse = GetTransactionsCountWithHttpInfo(accountId, baseType, categoryId, categoryType, container, detailCategoryId, fromDate, highLevelCategoryId, keyword, toDate, type);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transactions Count The count service provides the total number of transactions for a specific user depending on the input parameters passed.&lt;br&gt;If you are implementing pagination for transactions, call this endpoint before calling GET /transactions to know the number of transactions that are returned for the input parameters passed.&lt;br&gt;The functionality of the input parameters remains the same as that of the GET /transactions endpoint.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds  (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text  (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionCountResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<TransactionCountResponse> GetTransactionsCountWithHttpInfo(string accountId = default(string), string baseType = default(string), string categoryId = default(string), string categoryType = default(string), string container = default(string), string detailCategoryId = default(string), string fromDate = default(string), string highLevelCategoryId = default(string), string keyword = default(string), string toDate = default(string), string type = default(string), int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "accountId", accountId));
            }
            if (baseType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "baseType", baseType));
            }
            if (categoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "categoryId", categoryId));
            }
            if (categoryType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "categoryType", categoryType));
            }
            if (container != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "container", container));
            }
            if (detailCategoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "detailCategoryId", detailCategoryId));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (highLevelCategoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "highLevelCategoryId", highLevelCategoryId));
            }
            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            localVarRequestOptions.Operation = "TransactionsApi.GetTransactionsCount";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionCountResponse>("/transactions/count", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactionsCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Transactions Count The count service provides the total number of transactions for a specific user depending on the input parameters passed.&lt;br&gt;If you are implementing pagination for transactions, call this endpoint before calling GET /transactions to know the number of transactions that are returned for the input parameters passed.&lt;br&gt;The functionality of the input parameters remains the same as that of the GET /transactions endpoint.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds  (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text  (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionCountResponse</returns>
        public async System.Threading.Tasks.Task<TransactionCountResponse> GetTransactionsCountAsync(string accountId = default(string), string baseType = default(string), string categoryId = default(string), string categoryType = default(string), string container = default(string), string detailCategoryId = default(string), string fromDate = default(string), string highLevelCategoryId = default(string), string keyword = default(string), string toDate = default(string), string type = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<TransactionCountResponse> localVarResponse = await GetTransactionsCountWithHttpInfoAsync(accountId, baseType, categoryId, categoryType, container, detailCategoryId, fromDate, highLevelCategoryId, keyword, toDate, type, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transactions Count The count service provides the total number of transactions for a specific user depending on the input parameters passed.&lt;br&gt;If you are implementing pagination for transactions, call this endpoint before calling GET /transactions to know the number of transactions that are returned for the input parameters passed.&lt;br&gt;The functionality of the input parameters remains the same as that of the GET /transactions endpoint.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountIds  (optional)</param>
        /// <param name="baseType">DEBIT/CREDIT (optional)</param>
        /// <param name="categoryId">Comma separated categoryIds (optional)</param>
        /// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan (optional)</param>
        /// <param name="detailCategoryId">Comma separated detailCategoryIds (optional)</param>
        /// <param name="fromDate">Transaction from date(YYYY-MM-DD) (optional)</param>
        /// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds (optional)</param>
        /// <param name="keyword">Transaction search text  (optional)</param>
        /// <param name="toDate">Transaction end date (YYYY-MM-DD) (optional)</param>
        /// <param name="type">Transaction Type(SELL,SWEEP, etc.) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionCountResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<TransactionCountResponse>> GetTransactionsCountWithHttpInfoAsync(string accountId = default(string), string baseType = default(string), string categoryId = default(string), string categoryType = default(string), string container = default(string), string detailCategoryId = default(string), string fromDate = default(string), string highLevelCategoryId = default(string), string keyword = default(string), string toDate = default(string), string type = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "accountId", accountId));
            }
            if (baseType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "baseType", baseType));
            }
            if (categoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "categoryId", categoryId));
            }
            if (categoryType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "categoryType", categoryType));
            }
            if (container != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "container", container));
            }
            if (detailCategoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "detailCategoryId", detailCategoryId));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (highLevelCategoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "highLevelCategoryId", highLevelCategoryId));
            }
            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            localVarRequestOptions.Operation = "TransactionsApi.GetTransactionsCount";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionCountResponse>("/transactions/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactionsCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run Transaction Categorization Rule The run transaction categorization rule service is used to run a rule on transactions, to categorize the transactions.&lt;br&gt;The HTTP response code is 204 (Success with no content).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"></param>
        /// <param name="ruleId">Unique id of the categorization rule</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RunTransactionCategorizationRule(string action, long ruleId, int operationIndex = 0)
        {
            RunTransactionCategorizationRuleWithHttpInfo(action, ruleId);
        }

        /// <summary>
        /// Run Transaction Categorization Rule The run transaction categorization rule service is used to run a rule on transactions, to categorize the transactions.&lt;br&gt;The HTTP response code is 204 (Success with no content).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"></param>
        /// <param name="ruleId">Unique id of the categorization rule</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yodlee.ApiClient.Client.ApiResponse<Object> RunTransactionCategorizationRuleWithHttpInfo(string action, long ruleId, int operationIndex = 0)
        {
            // verify the required parameter 'action' is set
            if (action == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'action' when calling TransactionsApi->RunTransactionCategorizationRule");
            }

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ruleId", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(ruleId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "action", action));

            localVarRequestOptions.Operation = "TransactionsApi.RunTransactionCategorizationRule";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transactions/categories/rules/{ruleId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunTransactionCategorizationRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run Transaction Categorization Rule The run transaction categorization rule service is used to run a rule on transactions, to categorize the transactions.&lt;br&gt;The HTTP response code is 204 (Success with no content).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"></param>
        /// <param name="ruleId">Unique id of the categorization rule</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RunTransactionCategorizationRuleAsync(string action, long ruleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RunTransactionCategorizationRuleWithHttpInfoAsync(action, ruleId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Run Transaction Categorization Rule The run transaction categorization rule service is used to run a rule on transactions, to categorize the transactions.&lt;br&gt;The HTTP response code is 204 (Success with no content).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="action"></param>
        /// <param name="ruleId">Unique id of the categorization rule</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<Object>> RunTransactionCategorizationRuleWithHttpInfoAsync(string action, long ruleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'action' is set
            if (action == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'action' when calling TransactionsApi->RunTransactionCategorizationRule");
            }


            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ruleId", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(ruleId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "action", action));

            localVarRequestOptions.Operation = "TransactionsApi.RunTransactionCategorizationRule";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transactions/categories/rules/{ruleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunTransactionCategorizationRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Transaction The update transaction service is used to update the category,consumer description, memo, isPhysical, merchantType, detailCategory for a transaction.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">transactionId</param>
        /// <param name="transactionRequest">transactionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateTransaction(long transactionId, TransactionRequest transactionRequest, int operationIndex = 0)
        {
            UpdateTransactionWithHttpInfo(transactionId, transactionRequest);
        }

        /// <summary>
        /// Update Transaction The update transaction service is used to update the category,consumer description, memo, isPhysical, merchantType, detailCategory for a transaction.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">transactionId</param>
        /// <param name="transactionRequest">transactionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yodlee.ApiClient.Client.ApiResponse<Object> UpdateTransactionWithHttpInfo(long transactionId, TransactionRequest transactionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'transactionRequest' is set
            if (transactionRequest == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'transactionRequest' when calling TransactionsApi->UpdateTransaction");
            }

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transactionId", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(transactionId)); // path parameter
            localVarRequestOptions.Data = transactionRequest;

            localVarRequestOptions.Operation = "TransactionsApi.UpdateTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/transactions/{transactionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Transaction The update transaction service is used to update the category,consumer description, memo, isPhysical, merchantType, detailCategory for a transaction.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">transactionId</param>
        /// <param name="transactionRequest">transactionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTransactionAsync(long transactionId, TransactionRequest transactionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateTransactionWithHttpInfoAsync(transactionId, transactionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Transaction The update transaction service is used to update the category,consumer description, memo, isPhysical, merchantType, detailCategory for a transaction.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">transactionId</param>
        /// <param name="transactionRequest">transactionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<Object>> UpdateTransactionWithHttpInfoAsync(long transactionId, TransactionRequest transactionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionRequest' is set
            if (transactionRequest == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'transactionRequest' when calling TransactionsApi->UpdateTransaction");
            }


            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transactionId", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(transactionId)); // path parameter
            localVarRequestOptions.Data = transactionRequest;

            localVarRequestOptions.Operation = "TransactionsApi.UpdateTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/transactions/{transactionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Transaction Categorization Rule The update transaction categorization rule service is used to update a categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;ruleParam JSON input should be as explained in the create transaction categorization rule service.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">ruleId</param>
        /// <param name="transactionCategoriesRuleRequest">transactionCategoriesRuleRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateTransactionCategorizationRule(long ruleId, TransactionCategorizationRuleRequest transactionCategoriesRuleRequest, int operationIndex = 0)
        {
            UpdateTransactionCategorizationRuleWithHttpInfo(ruleId, transactionCategoriesRuleRequest);
        }

        /// <summary>
        /// Update Transaction Categorization Rule The update transaction categorization rule service is used to update a categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;ruleParam JSON input should be as explained in the create transaction categorization rule service.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">ruleId</param>
        /// <param name="transactionCategoriesRuleRequest">transactionCategoriesRuleRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yodlee.ApiClient.Client.ApiResponse<Object> UpdateTransactionCategorizationRuleWithHttpInfo(long ruleId, TransactionCategorizationRuleRequest transactionCategoriesRuleRequest, int operationIndex = 0)
        {
            // verify the required parameter 'transactionCategoriesRuleRequest' is set
            if (transactionCategoriesRuleRequest == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'transactionCategoriesRuleRequest' when calling TransactionsApi->UpdateTransactionCategorizationRule");
            }

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ruleId", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(ruleId)); // path parameter
            localVarRequestOptions.Data = transactionCategoriesRuleRequest;

            localVarRequestOptions.Operation = "TransactionsApi.UpdateTransactionCategorizationRule";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/transactions/categories/rules/{ruleId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTransactionCategorizationRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Transaction Categorization Rule The update transaction categorization rule service is used to update a categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;ruleParam JSON input should be as explained in the create transaction categorization rule service.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">ruleId</param>
        /// <param name="transactionCategoriesRuleRequest">transactionCategoriesRuleRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTransactionCategorizationRuleAsync(long ruleId, TransactionCategorizationRuleRequest transactionCategoriesRuleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateTransactionCategorizationRuleWithHttpInfoAsync(ruleId, transactionCategoriesRuleRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Transaction Categorization Rule The update transaction categorization rule service is used to update a categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;ruleParam JSON input should be as explained in the create transaction categorization rule service.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">ruleId</param>
        /// <param name="transactionCategoriesRuleRequest">transactionCategoriesRuleRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<Object>> UpdateTransactionCategorizationRuleWithHttpInfoAsync(long ruleId, TransactionCategorizationRuleRequest transactionCategoriesRuleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionCategoriesRuleRequest' is set
            if (transactionCategoriesRuleRequest == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'transactionCategoriesRuleRequest' when calling TransactionsApi->UpdateTransactionCategorizationRule");
            }


            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ruleId", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(ruleId)); // path parameter
            localVarRequestOptions.Data = transactionCategoriesRuleRequest;

            localVarRequestOptions.Operation = "TransactionsApi.UpdateTransactionCategorizationRule";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/transactions/categories/rules/{ruleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTransactionCategorizationRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Category The update transaction categories service is used to update the transaction category name&lt;br&gt;for a high level category, a system-defined category and a user-defined category.&lt;br&gt;The renamed category can be set back to the original name by passing an empty string for categoryName.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCategoryRequest">updateCategoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateTransactionCategory(UpdateCategoryRequest updateCategoryRequest, int operationIndex = 0)
        {
            UpdateTransactionCategoryWithHttpInfo(updateCategoryRequest);
        }

        /// <summary>
        /// Update Category The update transaction categories service is used to update the transaction category name&lt;br&gt;for a high level category, a system-defined category and a user-defined category.&lt;br&gt;The renamed category can be set back to the original name by passing an empty string for categoryName.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCategoryRequest">updateCategoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yodlee.ApiClient.Client.ApiResponse<Object> UpdateTransactionCategoryWithHttpInfo(UpdateCategoryRequest updateCategoryRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateCategoryRequest' is set
            if (updateCategoryRequest == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'updateCategoryRequest' when calling TransactionsApi->UpdateTransactionCategory");
            }

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateCategoryRequest;

            localVarRequestOptions.Operation = "TransactionsApi.UpdateTransactionCategory";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/transactions/categories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTransactionCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Category The update transaction categories service is used to update the transaction category name&lt;br&gt;for a high level category, a system-defined category and a user-defined category.&lt;br&gt;The renamed category can be set back to the original name by passing an empty string for categoryName.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCategoryRequest">updateCategoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTransactionCategoryAsync(UpdateCategoryRequest updateCategoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateTransactionCategoryWithHttpInfoAsync(updateCategoryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Category The update transaction categories service is used to update the transaction category name&lt;br&gt;for a high level category, a system-defined category and a user-defined category.&lt;br&gt;The renamed category can be set back to the original name by passing an empty string for categoryName.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCategoryRequest">updateCategoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<Object>> UpdateTransactionCategoryWithHttpInfoAsync(UpdateCategoryRequest updateCategoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateCategoryRequest' is set
            if (updateCategoryRequest == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'updateCategoryRequest' when calling TransactionsApi->UpdateTransactionCategory");
            }


            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateCategoryRequest;

            localVarRequestOptions.Operation = "TransactionsApi.UpdateTransactionCategory";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/transactions/categories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTransactionCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
