/*
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yodlee.ApiClient.Client;
using Yodlee.ApiClient.Model;

namespace Yodlee.ApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDerivedApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Holding Summary
        /// </summary>
        /// <remarks>
        /// The get holding summary service is used to get the summary of asset classifications for the user.&lt;br&gt;By default, accounts with status as ACTIVE and TO BE CLOSED will be considered.&lt;br&gt;If the include parameter value is passed as details then a summary with holdings and account information is returned.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">Comma separated accountIds (optional)</param>
        /// <param name="classificationType">e.g. Country, Sector, etc. (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DerivedHoldingSummaryResponse</returns>
        DerivedHoldingSummaryResponse GetHoldingSummary(string accountIds = default(string), string classificationType = default(string), string include = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Holding Summary
        /// </summary>
        /// <remarks>
        /// The get holding summary service is used to get the summary of asset classifications for the user.&lt;br&gt;By default, accounts with status as ACTIVE and TO BE CLOSED will be considered.&lt;br&gt;If the include parameter value is passed as details then a summary with holdings and account information is returned.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">Comma separated accountIds (optional)</param>
        /// <param name="classificationType">e.g. Country, Sector, etc. (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DerivedHoldingSummaryResponse</returns>
        ApiResponse<DerivedHoldingSummaryResponse> GetHoldingSummaryWithHttpInfo(string accountIds = default(string), string classificationType = default(string), string include = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Networth Summary
        /// </summary>
        /// <remarks>
        /// The get networth service is used to get the networth for the user.&lt;br&gt;If the include parameter value is passed as details then networth with historical balances is returned. &lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">comma separated accountIds (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities (optional)</param>
        /// <param name="fromDate">from date for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="interval">D-daily, W-weekly or M-monthly (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">toDate for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DerivedNetworthResponse</returns>
        DerivedNetworthResponse GetNetworth(string accountIds = default(string), string container = default(string), string fromDate = default(string), string include = default(string), string interval = default(string), int? skip = default(int?), string toDate = default(string), int? top = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Networth Summary
        /// </summary>
        /// <remarks>
        /// The get networth service is used to get the networth for the user.&lt;br&gt;If the include parameter value is passed as details then networth with historical balances is returned. &lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">comma separated accountIds (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities (optional)</param>
        /// <param name="fromDate">from date for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="interval">D-daily, W-weekly or M-monthly (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">toDate for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DerivedNetworthResponse</returns>
        ApiResponse<DerivedNetworthResponse> GetNetworthWithHttpInfo(string accountIds = default(string), string container = default(string), string fromDate = default(string), string include = default(string), string interval = default(string), int? skip = default(int?), string toDate = default(string), int? top = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get Transaction Summary
        /// </summary>
        /// <remarks>
        /// The transaction summary service provides the summary values of transactions for the given date range by category type, high-level categories, or system-defined categories.&lt;br&gt;&lt;br&gt;Yodlee has the transaction data stored for a day, month, year and week per category as per the availability of user&#39;s data. If the include parameter value is passed as details, then summary details will be returned depending on the interval passed-monthly is the default.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ol&gt; &lt;li&gt; Details can be requested for only one system-defined category&lt;li&gt;Passing categoryType is mandatory except when the groupBy value is CATEGORY_TYPE&lt;li&gt;Dates will not be respected for monthly, yearly, and weekly details&lt;li&gt;When monthly details are requested, only the fromDate and toDate month will be respected&lt;li&gt;When yearly details are requested, only the fromDate and toDate year will be respected&lt;li&gt;For weekly data points, details will be provided for every Sunday date available within the fromDate and toDate&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter&lt;/li&gt;&lt;/ol&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupBy">CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY</param>
        /// <param name="accountId">comma separated account Ids (optional)</param>
        /// <param name="categoryId">comma separated categoryIds (optional)</param>
        /// <param name="categoryType">INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION (optional)</param>
        /// <param name="fromDate">YYYY-MM-DD format (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="includeUserCategory">TRUE/FALSE (optional)</param>
        /// <param name="interval">D-daily, W-weekly, M-mothly or Y-yearly (optional)</param>
        /// <param name="toDate">YYYY-MM-DD format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DerivedTransactionSummaryResponse</returns>
        DerivedTransactionSummaryResponse GetTransactionSummary(string groupBy, string accountId = default(string), string categoryId = default(string), string categoryType = default(string), string fromDate = default(string), string include = default(string), bool? includeUserCategory = default(bool?), string interval = default(string), string toDate = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Transaction Summary
        /// </summary>
        /// <remarks>
        /// The transaction summary service provides the summary values of transactions for the given date range by category type, high-level categories, or system-defined categories.&lt;br&gt;&lt;br&gt;Yodlee has the transaction data stored for a day, month, year and week per category as per the availability of user&#39;s data. If the include parameter value is passed as details, then summary details will be returned depending on the interval passed-monthly is the default.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ol&gt; &lt;li&gt; Details can be requested for only one system-defined category&lt;li&gt;Passing categoryType is mandatory except when the groupBy value is CATEGORY_TYPE&lt;li&gt;Dates will not be respected for monthly, yearly, and weekly details&lt;li&gt;When monthly details are requested, only the fromDate and toDate month will be respected&lt;li&gt;When yearly details are requested, only the fromDate and toDate year will be respected&lt;li&gt;For weekly data points, details will be provided for every Sunday date available within the fromDate and toDate&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter&lt;/li&gt;&lt;/ol&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupBy">CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY</param>
        /// <param name="accountId">comma separated account Ids (optional)</param>
        /// <param name="categoryId">comma separated categoryIds (optional)</param>
        /// <param name="categoryType">INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION (optional)</param>
        /// <param name="fromDate">YYYY-MM-DD format (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="includeUserCategory">TRUE/FALSE (optional)</param>
        /// <param name="interval">D-daily, W-weekly, M-mothly or Y-yearly (optional)</param>
        /// <param name="toDate">YYYY-MM-DD format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DerivedTransactionSummaryResponse</returns>
        ApiResponse<DerivedTransactionSummaryResponse> GetTransactionSummaryWithHttpInfo(string groupBy, string accountId = default(string), string categoryId = default(string), string categoryType = default(string), string fromDate = default(string), string include = default(string), bool? includeUserCategory = default(bool?), string interval = default(string), string toDate = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDerivedApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Holding Summary
        /// </summary>
        /// <remarks>
        /// The get holding summary service is used to get the summary of asset classifications for the user.&lt;br&gt;By default, accounts with status as ACTIVE and TO BE CLOSED will be considered.&lt;br&gt;If the include parameter value is passed as details then a summary with holdings and account information is returned.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">Comma separated accountIds (optional)</param>
        /// <param name="classificationType">e.g. Country, Sector, etc. (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DerivedHoldingSummaryResponse</returns>
        System.Threading.Tasks.Task<DerivedHoldingSummaryResponse> GetHoldingSummaryAsync(string accountIds = default(string), string classificationType = default(string), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Holding Summary
        /// </summary>
        /// <remarks>
        /// The get holding summary service is used to get the summary of asset classifications for the user.&lt;br&gt;By default, accounts with status as ACTIVE and TO BE CLOSED will be considered.&lt;br&gt;If the include parameter value is passed as details then a summary with holdings and account information is returned.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">Comma separated accountIds (optional)</param>
        /// <param name="classificationType">e.g. Country, Sector, etc. (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DerivedHoldingSummaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DerivedHoldingSummaryResponse>> GetHoldingSummaryWithHttpInfoAsync(string accountIds = default(string), string classificationType = default(string), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Networth Summary
        /// </summary>
        /// <remarks>
        /// The get networth service is used to get the networth for the user.&lt;br&gt;If the include parameter value is passed as details then networth with historical balances is returned. &lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">comma separated accountIds (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities (optional)</param>
        /// <param name="fromDate">from date for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="interval">D-daily, W-weekly or M-monthly (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">toDate for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DerivedNetworthResponse</returns>
        System.Threading.Tasks.Task<DerivedNetworthResponse> GetNetworthAsync(string accountIds = default(string), string container = default(string), string fromDate = default(string), string include = default(string), string interval = default(string), int? skip = default(int?), string toDate = default(string), int? top = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Networth Summary
        /// </summary>
        /// <remarks>
        /// The get networth service is used to get the networth for the user.&lt;br&gt;If the include parameter value is passed as details then networth with historical balances is returned. &lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">comma separated accountIds (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities (optional)</param>
        /// <param name="fromDate">from date for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="interval">D-daily, W-weekly or M-monthly (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">toDate for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DerivedNetworthResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DerivedNetworthResponse>> GetNetworthWithHttpInfoAsync(string accountIds = default(string), string container = default(string), string fromDate = default(string), string include = default(string), string interval = default(string), int? skip = default(int?), string toDate = default(string), int? top = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Transaction Summary
        /// </summary>
        /// <remarks>
        /// The transaction summary service provides the summary values of transactions for the given date range by category type, high-level categories, or system-defined categories.&lt;br&gt;&lt;br&gt;Yodlee has the transaction data stored for a day, month, year and week per category as per the availability of user&#39;s data. If the include parameter value is passed as details, then summary details will be returned depending on the interval passed-monthly is the default.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ol&gt; &lt;li&gt; Details can be requested for only one system-defined category&lt;li&gt;Passing categoryType is mandatory except when the groupBy value is CATEGORY_TYPE&lt;li&gt;Dates will not be respected for monthly, yearly, and weekly details&lt;li&gt;When monthly details are requested, only the fromDate and toDate month will be respected&lt;li&gt;When yearly details are requested, only the fromDate and toDate year will be respected&lt;li&gt;For weekly data points, details will be provided for every Sunday date available within the fromDate and toDate&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter&lt;/li&gt;&lt;/ol&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupBy">CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY</param>
        /// <param name="accountId">comma separated account Ids (optional)</param>
        /// <param name="categoryId">comma separated categoryIds (optional)</param>
        /// <param name="categoryType">INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION (optional)</param>
        /// <param name="fromDate">YYYY-MM-DD format (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="includeUserCategory">TRUE/FALSE (optional)</param>
        /// <param name="interval">D-daily, W-weekly, M-mothly or Y-yearly (optional)</param>
        /// <param name="toDate">YYYY-MM-DD format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DerivedTransactionSummaryResponse</returns>
        System.Threading.Tasks.Task<DerivedTransactionSummaryResponse> GetTransactionSummaryAsync(string groupBy, string accountId = default(string), string categoryId = default(string), string categoryType = default(string), string fromDate = default(string), string include = default(string), bool? includeUserCategory = default(bool?), string interval = default(string), string toDate = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Transaction Summary
        /// </summary>
        /// <remarks>
        /// The transaction summary service provides the summary values of transactions for the given date range by category type, high-level categories, or system-defined categories.&lt;br&gt;&lt;br&gt;Yodlee has the transaction data stored for a day, month, year and week per category as per the availability of user&#39;s data. If the include parameter value is passed as details, then summary details will be returned depending on the interval passed-monthly is the default.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ol&gt; &lt;li&gt; Details can be requested for only one system-defined category&lt;li&gt;Passing categoryType is mandatory except when the groupBy value is CATEGORY_TYPE&lt;li&gt;Dates will not be respected for monthly, yearly, and weekly details&lt;li&gt;When monthly details are requested, only the fromDate and toDate month will be respected&lt;li&gt;When yearly details are requested, only the fromDate and toDate year will be respected&lt;li&gt;For weekly data points, details will be provided for every Sunday date available within the fromDate and toDate&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter&lt;/li&gt;&lt;/ol&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupBy">CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY</param>
        /// <param name="accountId">comma separated account Ids (optional)</param>
        /// <param name="categoryId">comma separated categoryIds (optional)</param>
        /// <param name="categoryType">INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION (optional)</param>
        /// <param name="fromDate">YYYY-MM-DD format (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="includeUserCategory">TRUE/FALSE (optional)</param>
        /// <param name="interval">D-daily, W-weekly, M-mothly or Y-yearly (optional)</param>
        /// <param name="toDate">YYYY-MM-DD format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DerivedTransactionSummaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DerivedTransactionSummaryResponse>> GetTransactionSummaryWithHttpInfoAsync(string groupBy, string accountId = default(string), string categoryId = default(string), string categoryType = default(string), string fromDate = default(string), string include = default(string), bool? includeUserCategory = default(bool?), string interval = default(string), string toDate = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDerivedApi : IDerivedApiSync, IDerivedApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DerivedApi : IDerivedApi
    {
        private Yodlee.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DerivedApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DerivedApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DerivedApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DerivedApi(string basePath)
        {
            this.Configuration = Yodlee.ApiClient.Client.Configuration.MergeConfigurations(
                Yodlee.ApiClient.Client.GlobalConfiguration.Instance,
                new Yodlee.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yodlee.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DerivedApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DerivedApi(Yodlee.ApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yodlee.ApiClient.Client.Configuration.MergeConfigurations(
                Yodlee.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yodlee.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DerivedApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DerivedApi(Yodlee.ApiClient.Client.ISynchronousClient client, Yodlee.ApiClient.Client.IAsynchronousClient asyncClient, Yodlee.ApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yodlee.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yodlee.ApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yodlee.ApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yodlee.ApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yodlee.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Holding Summary The get holding summary service is used to get the summary of asset classifications for the user.&lt;br&gt;By default, accounts with status as ACTIVE and TO BE CLOSED will be considered.&lt;br&gt;If the include parameter value is passed as details then a summary with holdings and account information is returned.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">Comma separated accountIds (optional)</param>
        /// <param name="classificationType">e.g. Country, Sector, etc. (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DerivedHoldingSummaryResponse</returns>
        public DerivedHoldingSummaryResponse GetHoldingSummary(string accountIds = default(string), string classificationType = default(string), string include = default(string), int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<DerivedHoldingSummaryResponse> localVarResponse = GetHoldingSummaryWithHttpInfo(accountIds, classificationType, include);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Holding Summary The get holding summary service is used to get the summary of asset classifications for the user.&lt;br&gt;By default, accounts with status as ACTIVE and TO BE CLOSED will be considered.&lt;br&gt;If the include parameter value is passed as details then a summary with holdings and account information is returned.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">Comma separated accountIds (optional)</param>
        /// <param name="classificationType">e.g. Country, Sector, etc. (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DerivedHoldingSummaryResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<DerivedHoldingSummaryResponse> GetHoldingSummaryWithHttpInfo(string accountIds = default(string), string classificationType = default(string), string include = default(string), int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "accountIds", accountIds));
            }
            if (classificationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "classificationType", classificationType));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "DerivedApi.GetHoldingSummary";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<DerivedHoldingSummaryResponse>("/derived/holdingSummary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHoldingSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Holding Summary The get holding summary service is used to get the summary of asset classifications for the user.&lt;br&gt;By default, accounts with status as ACTIVE and TO BE CLOSED will be considered.&lt;br&gt;If the include parameter value is passed as details then a summary with holdings and account information is returned.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">Comma separated accountIds (optional)</param>
        /// <param name="classificationType">e.g. Country, Sector, etc. (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DerivedHoldingSummaryResponse</returns>
        public async System.Threading.Tasks.Task<DerivedHoldingSummaryResponse> GetHoldingSummaryAsync(string accountIds = default(string), string classificationType = default(string), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<DerivedHoldingSummaryResponse> localVarResponse = await GetHoldingSummaryWithHttpInfoAsync(accountIds, classificationType, include, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Holding Summary The get holding summary service is used to get the summary of asset classifications for the user.&lt;br&gt;By default, accounts with status as ACTIVE and TO BE CLOSED will be considered.&lt;br&gt;If the include parameter value is passed as details then a summary with holdings and account information is returned.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">Comma separated accountIds (optional)</param>
        /// <param name="classificationType">e.g. Country, Sector, etc. (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DerivedHoldingSummaryResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<DerivedHoldingSummaryResponse>> GetHoldingSummaryWithHttpInfoAsync(string accountIds = default(string), string classificationType = default(string), string include = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "accountIds", accountIds));
            }
            if (classificationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "classificationType", classificationType));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "DerivedApi.GetHoldingSummary";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DerivedHoldingSummaryResponse>("/derived/holdingSummary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHoldingSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Networth Summary The get networth service is used to get the networth for the user.&lt;br&gt;If the include parameter value is passed as details then networth with historical balances is returned. &lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">comma separated accountIds (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities (optional)</param>
        /// <param name="fromDate">from date for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="interval">D-daily, W-weekly or M-monthly (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">toDate for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DerivedNetworthResponse</returns>
        public DerivedNetworthResponse GetNetworth(string accountIds = default(string), string container = default(string), string fromDate = default(string), string include = default(string), string interval = default(string), int? skip = default(int?), string toDate = default(string), int? top = default(int?), int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<DerivedNetworthResponse> localVarResponse = GetNetworthWithHttpInfo(accountIds, container, fromDate, include, interval, skip, toDate, top);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Networth Summary The get networth service is used to get the networth for the user.&lt;br&gt;If the include parameter value is passed as details then networth with historical balances is returned. &lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">comma separated accountIds (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities (optional)</param>
        /// <param name="fromDate">from date for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="interval">D-daily, W-weekly or M-monthly (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">toDate for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DerivedNetworthResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<DerivedNetworthResponse> GetNetworthWithHttpInfo(string accountIds = default(string), string container = default(string), string fromDate = default(string), string include = default(string), string interval = default(string), int? skip = default(int?), string toDate = default(string), int? top = default(int?), int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "accountIds", accountIds));
            }
            if (container != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "container", container));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "interval", interval));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "top", top));
            }

            localVarRequestOptions.Operation = "DerivedApi.GetNetworth";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<DerivedNetworthResponse>("/derived/networth", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNetworth", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Networth Summary The get networth service is used to get the networth for the user.&lt;br&gt;If the include parameter value is passed as details then networth with historical balances is returned. &lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">comma separated accountIds (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities (optional)</param>
        /// <param name="fromDate">from date for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="interval">D-daily, W-weekly or M-monthly (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">toDate for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DerivedNetworthResponse</returns>
        public async System.Threading.Tasks.Task<DerivedNetworthResponse> GetNetworthAsync(string accountIds = default(string), string container = default(string), string fromDate = default(string), string include = default(string), string interval = default(string), int? skip = default(int?), string toDate = default(string), int? top = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<DerivedNetworthResponse> localVarResponse = await GetNetworthWithHttpInfoAsync(accountIds, container, fromDate, include, interval, skip, toDate, top, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Networth Summary The get networth service is used to get the networth for the user.&lt;br&gt;If the include parameter value is passed as details then networth with historical balances is returned. &lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">comma separated accountIds (optional)</param>
        /// <param name="container">bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities (optional)</param>
        /// <param name="fromDate">from date for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="interval">D-daily, W-weekly or M-monthly (optional)</param>
        /// <param name="skip">skip (Min 0) (optional)</param>
        /// <param name="toDate">toDate for balance retrieval (YYYY-MM-DD) (optional)</param>
        /// <param name="top">top (Max 500) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DerivedNetworthResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<DerivedNetworthResponse>> GetNetworthWithHttpInfoAsync(string accountIds = default(string), string container = default(string), string fromDate = default(string), string include = default(string), string interval = default(string), int? skip = default(int?), string toDate = default(string), int? top = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "accountIds", accountIds));
            }
            if (container != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "container", container));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "interval", interval));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "top", top));
            }

            localVarRequestOptions.Operation = "DerivedApi.GetNetworth";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DerivedNetworthResponse>("/derived/networth", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNetworth", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Transaction Summary The transaction summary service provides the summary values of transactions for the given date range by category type, high-level categories, or system-defined categories.&lt;br&gt;&lt;br&gt;Yodlee has the transaction data stored for a day, month, year and week per category as per the availability of user&#39;s data. If the include parameter value is passed as details, then summary details will be returned depending on the interval passed-monthly is the default.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ol&gt; &lt;li&gt; Details can be requested for only one system-defined category&lt;li&gt;Passing categoryType is mandatory except when the groupBy value is CATEGORY_TYPE&lt;li&gt;Dates will not be respected for monthly, yearly, and weekly details&lt;li&gt;When monthly details are requested, only the fromDate and toDate month will be respected&lt;li&gt;When yearly details are requested, only the fromDate and toDate year will be respected&lt;li&gt;For weekly data points, details will be provided for every Sunday date available within the fromDate and toDate&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter&lt;/li&gt;&lt;/ol&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupBy">CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY</param>
        /// <param name="accountId">comma separated account Ids (optional)</param>
        /// <param name="categoryId">comma separated categoryIds (optional)</param>
        /// <param name="categoryType">INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION (optional)</param>
        /// <param name="fromDate">YYYY-MM-DD format (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="includeUserCategory">TRUE/FALSE (optional)</param>
        /// <param name="interval">D-daily, W-weekly, M-mothly or Y-yearly (optional)</param>
        /// <param name="toDate">YYYY-MM-DD format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DerivedTransactionSummaryResponse</returns>
        public DerivedTransactionSummaryResponse GetTransactionSummary(string groupBy, string accountId = default(string), string categoryId = default(string), string categoryType = default(string), string fromDate = default(string), string include = default(string), bool? includeUserCategory = default(bool?), string interval = default(string), string toDate = default(string), int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<DerivedTransactionSummaryResponse> localVarResponse = GetTransactionSummaryWithHttpInfo(groupBy, accountId, categoryId, categoryType, fromDate, include, includeUserCategory, interval, toDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transaction Summary The transaction summary service provides the summary values of transactions for the given date range by category type, high-level categories, or system-defined categories.&lt;br&gt;&lt;br&gt;Yodlee has the transaction data stored for a day, month, year and week per category as per the availability of user&#39;s data. If the include parameter value is passed as details, then summary details will be returned depending on the interval passed-monthly is the default.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ol&gt; &lt;li&gt; Details can be requested for only one system-defined category&lt;li&gt;Passing categoryType is mandatory except when the groupBy value is CATEGORY_TYPE&lt;li&gt;Dates will not be respected for monthly, yearly, and weekly details&lt;li&gt;When monthly details are requested, only the fromDate and toDate month will be respected&lt;li&gt;When yearly details are requested, only the fromDate and toDate year will be respected&lt;li&gt;For weekly data points, details will be provided for every Sunday date available within the fromDate and toDate&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter&lt;/li&gt;&lt;/ol&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupBy">CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY</param>
        /// <param name="accountId">comma separated account Ids (optional)</param>
        /// <param name="categoryId">comma separated categoryIds (optional)</param>
        /// <param name="categoryType">INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION (optional)</param>
        /// <param name="fromDate">YYYY-MM-DD format (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="includeUserCategory">TRUE/FALSE (optional)</param>
        /// <param name="interval">D-daily, W-weekly, M-mothly or Y-yearly (optional)</param>
        /// <param name="toDate">YYYY-MM-DD format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DerivedTransactionSummaryResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<DerivedTransactionSummaryResponse> GetTransactionSummaryWithHttpInfo(string groupBy, string accountId = default(string), string categoryId = default(string), string categoryType = default(string), string fromDate = default(string), string include = default(string), bool? includeUserCategory = default(bool?), string interval = default(string), string toDate = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'groupBy' is set
            if (groupBy == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'groupBy' when calling DerivedApi->GetTransactionSummary");
            }

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "accountId", accountId));
            }
            if (categoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "categoryId", categoryId));
            }
            if (categoryType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "categoryType", categoryType));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "groupBy", groupBy));
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            if (includeUserCategory != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "includeUserCategory", includeUserCategory));
            }
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "interval", interval));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }

            localVarRequestOptions.Operation = "DerivedApi.GetTransactionSummary";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<DerivedTransactionSummaryResponse>("/derived/transactionSummary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactionSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Transaction Summary The transaction summary service provides the summary values of transactions for the given date range by category type, high-level categories, or system-defined categories.&lt;br&gt;&lt;br&gt;Yodlee has the transaction data stored for a day, month, year and week per category as per the availability of user&#39;s data. If the include parameter value is passed as details, then summary details will be returned depending on the interval passed-monthly is the default.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ol&gt; &lt;li&gt; Details can be requested for only one system-defined category&lt;li&gt;Passing categoryType is mandatory except when the groupBy value is CATEGORY_TYPE&lt;li&gt;Dates will not be respected for monthly, yearly, and weekly details&lt;li&gt;When monthly details are requested, only the fromDate and toDate month will be respected&lt;li&gt;When yearly details are requested, only the fromDate and toDate year will be respected&lt;li&gt;For weekly data points, details will be provided for every Sunday date available within the fromDate and toDate&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter&lt;/li&gt;&lt;/ol&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupBy">CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY</param>
        /// <param name="accountId">comma separated account Ids (optional)</param>
        /// <param name="categoryId">comma separated categoryIds (optional)</param>
        /// <param name="categoryType">INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION (optional)</param>
        /// <param name="fromDate">YYYY-MM-DD format (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="includeUserCategory">TRUE/FALSE (optional)</param>
        /// <param name="interval">D-daily, W-weekly, M-mothly or Y-yearly (optional)</param>
        /// <param name="toDate">YYYY-MM-DD format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DerivedTransactionSummaryResponse</returns>
        public async System.Threading.Tasks.Task<DerivedTransactionSummaryResponse> GetTransactionSummaryAsync(string groupBy, string accountId = default(string), string categoryId = default(string), string categoryType = default(string), string fromDate = default(string), string include = default(string), bool? includeUserCategory = default(bool?), string interval = default(string), string toDate = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<DerivedTransactionSummaryResponse> localVarResponse = await GetTransactionSummaryWithHttpInfoAsync(groupBy, accountId, categoryId, categoryType, fromDate, include, includeUserCategory, interval, toDate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transaction Summary The transaction summary service provides the summary values of transactions for the given date range by category type, high-level categories, or system-defined categories.&lt;br&gt;&lt;br&gt;Yodlee has the transaction data stored for a day, month, year and week per category as per the availability of user&#39;s data. If the include parameter value is passed as details, then summary details will be returned depending on the interval passed-monthly is the default.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ol&gt; &lt;li&gt; Details can be requested for only one system-defined category&lt;li&gt;Passing categoryType is mandatory except when the groupBy value is CATEGORY_TYPE&lt;li&gt;Dates will not be respected for monthly, yearly, and weekly details&lt;li&gt;When monthly details are requested, only the fromDate and toDate month will be respected&lt;li&gt;When yearly details are requested, only the fromDate and toDate year will be respected&lt;li&gt;For weekly data points, details will be provided for every Sunday date available within the fromDate and toDate&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter&lt;/li&gt;&lt;/ol&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupBy">CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY</param>
        /// <param name="accountId">comma separated account Ids (optional)</param>
        /// <param name="categoryId">comma separated categoryIds (optional)</param>
        /// <param name="categoryType">INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION (optional)</param>
        /// <param name="fromDate">YYYY-MM-DD format (optional)</param>
        /// <param name="include">details (optional)</param>
        /// <param name="includeUserCategory">TRUE/FALSE (optional)</param>
        /// <param name="interval">D-daily, W-weekly, M-mothly or Y-yearly (optional)</param>
        /// <param name="toDate">YYYY-MM-DD format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DerivedTransactionSummaryResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<DerivedTransactionSummaryResponse>> GetTransactionSummaryWithHttpInfoAsync(string groupBy, string accountId = default(string), string categoryId = default(string), string categoryType = default(string), string fromDate = default(string), string include = default(string), bool? includeUserCategory = default(bool?), string interval = default(string), string toDate = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupBy' is set
            if (groupBy == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'groupBy' when calling DerivedApi->GetTransactionSummary");
            }


            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "accountId", accountId));
            }
            if (categoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "categoryId", categoryId));
            }
            if (categoryType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "categoryType", categoryType));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "groupBy", groupBy));
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            if (includeUserCategory != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "includeUserCategory", includeUserCategory));
            }
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "interval", interval));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }

            localVarRequestOptions.Operation = "DerivedApi.GetTransactionSummary";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DerivedTransactionSummaryResponse>("/derived/transactionSummary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactionSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
