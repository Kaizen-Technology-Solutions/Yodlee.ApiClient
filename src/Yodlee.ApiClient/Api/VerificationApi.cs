/*
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yodlee.ApiClient.Client;
using Yodlee.ApiClient.Model;

namespace Yodlee.ApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVerificationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Classification Summary
        /// </summary>
        /// <remarks>
        /// The get classification summary API service returns attributes that provide account-level and transaction-level summary for a user&#39;s account.&lt;br&gt;&lt;br&gt;As a prerequisite, the Account Verification customers should have Transactions enabled to fetch a response. The API can be invoked only for an account verified by the user following the get verified accounts API call. If the prerequisite is not satisfied, an appropriate error will be returned on invoking the API.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">accountId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClassificationSummaryResponse</returns>
        ClassificationSummaryResponse GetClassificationSummary(string accountId, int operationIndex = 0);

        /// <summary>
        /// Get Classification Summary
        /// </summary>
        /// <remarks>
        /// The get classification summary API service returns attributes that provide account-level and transaction-level summary for a user&#39;s account.&lt;br&gt;&lt;br&gt;As a prerequisite, the Account Verification customers should have Transactions enabled to fetch a response. The API can be invoked only for an account verified by the user following the get verified accounts API call. If the prerequisite is not satisfied, an appropriate error will be returned on invoking the API.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">accountId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClassificationSummaryResponse</returns>
        ApiResponse<ClassificationSummaryResponse> GetClassificationSummaryWithHttpInfo(string accountId, int operationIndex = 0);
        /// <summary>
        /// Get Holder Profile
        /// </summary>
        /// <remarks>
        /// The Holder Profile API service allows retrieving the user&#39;s profile details (i.e., PII data such as name, email, phone number, and address) that are available at the provider account and each account level. The API accepts the providerAccountId and retrieves the profile information available under it and all the details available under each of the associated accounts.  &lt;br&gt;&lt;br&gt;This service can only be invoked by Yodlee API v1.1, FastLink 3, and FastLink 4 customers. &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">accountId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HolderProfileResponse</returns>
        HolderProfileResponse GetHolderProfile(string providerAccountId, string accountId = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Holder Profile
        /// </summary>
        /// <remarks>
        /// The Holder Profile API service allows retrieving the user&#39;s profile details (i.e., PII data such as name, email, phone number, and address) that are available at the provider account and each account level. The API accepts the providerAccountId and retrieves the profile information available under it and all the details available under each of the associated accounts.  &lt;br&gt;&lt;br&gt;This service can only be invoked by Yodlee API v1.1, FastLink 3, and FastLink 4 customers. &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">accountId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HolderProfileResponse</returns>
        ApiResponse<HolderProfileResponse> GetHolderProfileWithHttpInfo(string providerAccountId, string accountId = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Verification Status
        /// </summary>
        /// <remarks>
        /// The get verification status service is used to retrieve the verification status of all accounts for which the MS or CDV process has been initiated.&lt;br&gt;For the MS process, the account details object returns the aggregated information of the verified accounts. For the CDV process, the account details object returns the user provided account information.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountId (optional)</param>
        /// <param name="providerAccountId">Comma separated providerAccountId (optional)</param>
        /// <param name="verificationType">verificationType (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VerificationStatusResponse</returns>
        VerificationStatusResponse GetVerificationStatus(string accountId = default(string), string providerAccountId = default(string), string verificationType = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Verification Status
        /// </summary>
        /// <remarks>
        /// The get verification status service is used to retrieve the verification status of all accounts for which the MS or CDV process has been initiated.&lt;br&gt;For the MS process, the account details object returns the aggregated information of the verified accounts. For the CDV process, the account details object returns the user provided account information.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountId (optional)</param>
        /// <param name="providerAccountId">Comma separated providerAccountId (optional)</param>
        /// <param name="verificationType">verificationType (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VerificationStatusResponse</returns>
        ApiResponse<VerificationStatusResponse> GetVerificationStatusWithHttpInfo(string accountId = default(string), string providerAccountId = default(string), string verificationType = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Verified Accounts
        /// </summary>
        /// <remarks>
        /// The Verified Accounts API v1.1 provides information about the bank and investment accounts that the user  has selected for verification, during the Account Verification flow on FastLink 4. By default, the API only returns information of the accounts that were selected and have been successfully verified. &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">Comma separated accountIds. (optional)</param>
        /// <param name="isSelected">Comma separated isSelected. Allowed values are true, false &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is true. (optional)</param>
        /// <param name="verificationStatus">Comma separated verificationStatus. Allowed values are SUCCESS, FAILED &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is SUCCESS. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VerifiedAccountResponse</returns>
        VerifiedAccountResponse GetVerifiedAccounts(string providerAccountId, string accountId = default(string), string isSelected = default(string), string verificationStatus = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Verified Accounts
        /// </summary>
        /// <remarks>
        /// The Verified Accounts API v1.1 provides information about the bank and investment accounts that the user  has selected for verification, during the Account Verification flow on FastLink 4. By default, the API only returns information of the accounts that were selected and have been successfully verified. &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">Comma separated accountIds. (optional)</param>
        /// <param name="isSelected">Comma separated isSelected. Allowed values are true, false &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is true. (optional)</param>
        /// <param name="verificationStatus">Comma separated verificationStatus. Allowed values are SUCCESS, FAILED &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is SUCCESS. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VerifiedAccountResponse</returns>
        ApiResponse<VerifiedAccountResponse> GetVerifiedAccountsWithHttpInfo(string providerAccountId, string accountId = default(string), string isSelected = default(string), string verificationStatus = default(string), int operationIndex = 0);
        /// <summary>
        /// Initiaite Challenge Deposit
        /// </summary>
        /// <remarks>
        /// The post verification service is used to initiate the matching service (MS) and the challenge deposit account verification (CDV) process to verify account ownership.&lt;br&gt;The MS and CDV process can verify ownership of only bank accounts (i.e., checking and savings).&lt;br&gt;The MS verification can be initiated only for an already aggregated account or a providerAccount.&lt;br&gt;The prerequisite for the MS verification process is to request the ACCT_PROFILE dataset with the HOLDER_NAME attribute.&lt;br&gt;In the MS verification process, a string-match of the account holder name with the registered user name is performed instantaneously. You can contact the Yodlee CustomerCare to configure the full name or only the last name match.&lt;br&gt;Once the CDV process is initiated Yodlee will post the microtransaction (i.e., credit and debit) in the user&#39;s account. The CDV process takes 2 to 3 days to complete as it requires the user to provide the microtransaction details.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;The verificationId in the response can be used to track the verification request.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#39;s assistance to set up a dedicated environment.
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verificationParam">verification information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VerificationResponse</returns>
        VerificationResponse InitiateMatchingOrChallengeDepositeVerification(VerificationRequest verificationParam, int operationIndex = 0);

        /// <summary>
        /// Initiaite Challenge Deposit
        /// </summary>
        /// <remarks>
        /// The post verification service is used to initiate the matching service (MS) and the challenge deposit account verification (CDV) process to verify account ownership.&lt;br&gt;The MS and CDV process can verify ownership of only bank accounts (i.e., checking and savings).&lt;br&gt;The MS verification can be initiated only for an already aggregated account or a providerAccount.&lt;br&gt;The prerequisite for the MS verification process is to request the ACCT_PROFILE dataset with the HOLDER_NAME attribute.&lt;br&gt;In the MS verification process, a string-match of the account holder name with the registered user name is performed instantaneously. You can contact the Yodlee CustomerCare to configure the full name or only the last name match.&lt;br&gt;Once the CDV process is initiated Yodlee will post the microtransaction (i.e., credit and debit) in the user&#39;s account. The CDV process takes 2 to 3 days to complete as it requires the user to provide the microtransaction details.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;The verificationId in the response can be used to track the verification request.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#39;s assistance to set up a dedicated environment.
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verificationParam">verification information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VerificationResponse</returns>
        ApiResponse<VerificationResponse> InitiateMatchingOrChallengeDepositeVerificationWithHttpInfo(VerificationRequest verificationParam, int operationIndex = 0);
        /// <summary>
        /// Verify Challenge Deposit
        /// </summary>
        /// <remarks>
        /// The put verification service is used to complete the challenge deposit verification (CDV) process.&lt;br&gt;This service is used only by the customer of CDV flow.&lt;br&gt;In the CDV process, the user-provided microtransaction details (i.e., credit and debit) is matched against the microtransactions posted by Yodlee. For a successful verification of the account&#39;s ownership both the microtransaction details should match.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#39;s assistance to set up a dedicated environment.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verificationParam">verification information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VerificationResponse</returns>
        VerificationResponse VerifyChallengeDeposit(UpdateVerificationRequest verificationParam, int operationIndex = 0);

        /// <summary>
        /// Verify Challenge Deposit
        /// </summary>
        /// <remarks>
        /// The put verification service is used to complete the challenge deposit verification (CDV) process.&lt;br&gt;This service is used only by the customer of CDV flow.&lt;br&gt;In the CDV process, the user-provided microtransaction details (i.e., credit and debit) is matched against the microtransactions posted by Yodlee. For a successful verification of the account&#39;s ownership both the microtransaction details should match.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#39;s assistance to set up a dedicated environment.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verificationParam">verification information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VerificationResponse</returns>
        ApiResponse<VerificationResponse> VerifyChallengeDepositWithHttpInfo(UpdateVerificationRequest verificationParam, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVerificationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Classification Summary
        /// </summary>
        /// <remarks>
        /// The get classification summary API service returns attributes that provide account-level and transaction-level summary for a user&#39;s account.&lt;br&gt;&lt;br&gt;As a prerequisite, the Account Verification customers should have Transactions enabled to fetch a response. The API can be invoked only for an account verified by the user following the get verified accounts API call. If the prerequisite is not satisfied, an appropriate error will be returned on invoking the API.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">accountId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClassificationSummaryResponse</returns>
        System.Threading.Tasks.Task<ClassificationSummaryResponse> GetClassificationSummaryAsync(string accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Classification Summary
        /// </summary>
        /// <remarks>
        /// The get classification summary API service returns attributes that provide account-level and transaction-level summary for a user&#39;s account.&lt;br&gt;&lt;br&gt;As a prerequisite, the Account Verification customers should have Transactions enabled to fetch a response. The API can be invoked only for an account verified by the user following the get verified accounts API call. If the prerequisite is not satisfied, an appropriate error will be returned on invoking the API.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">accountId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClassificationSummaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClassificationSummaryResponse>> GetClassificationSummaryWithHttpInfoAsync(string accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Holder Profile
        /// </summary>
        /// <remarks>
        /// The Holder Profile API service allows retrieving the user&#39;s profile details (i.e., PII data such as name, email, phone number, and address) that are available at the provider account and each account level. The API accepts the providerAccountId and retrieves the profile information available under it and all the details available under each of the associated accounts.  &lt;br&gt;&lt;br&gt;This service can only be invoked by Yodlee API v1.1, FastLink 3, and FastLink 4 customers. &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">accountId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HolderProfileResponse</returns>
        System.Threading.Tasks.Task<HolderProfileResponse> GetHolderProfileAsync(string providerAccountId, string accountId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Holder Profile
        /// </summary>
        /// <remarks>
        /// The Holder Profile API service allows retrieving the user&#39;s profile details (i.e., PII data such as name, email, phone number, and address) that are available at the provider account and each account level. The API accepts the providerAccountId and retrieves the profile information available under it and all the details available under each of the associated accounts.  &lt;br&gt;&lt;br&gt;This service can only be invoked by Yodlee API v1.1, FastLink 3, and FastLink 4 customers. &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">accountId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HolderProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HolderProfileResponse>> GetHolderProfileWithHttpInfoAsync(string providerAccountId, string accountId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Verification Status
        /// </summary>
        /// <remarks>
        /// The get verification status service is used to retrieve the verification status of all accounts for which the MS or CDV process has been initiated.&lt;br&gt;For the MS process, the account details object returns the aggregated information of the verified accounts. For the CDV process, the account details object returns the user provided account information.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountId (optional)</param>
        /// <param name="providerAccountId">Comma separated providerAccountId (optional)</param>
        /// <param name="verificationType">verificationType (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerificationStatusResponse</returns>
        System.Threading.Tasks.Task<VerificationStatusResponse> GetVerificationStatusAsync(string accountId = default(string), string providerAccountId = default(string), string verificationType = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Verification Status
        /// </summary>
        /// <remarks>
        /// The get verification status service is used to retrieve the verification status of all accounts for which the MS or CDV process has been initiated.&lt;br&gt;For the MS process, the account details object returns the aggregated information of the verified accounts. For the CDV process, the account details object returns the user provided account information.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountId (optional)</param>
        /// <param name="providerAccountId">Comma separated providerAccountId (optional)</param>
        /// <param name="verificationType">verificationType (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerificationStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerificationStatusResponse>> GetVerificationStatusWithHttpInfoAsync(string accountId = default(string), string providerAccountId = default(string), string verificationType = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Verified Accounts
        /// </summary>
        /// <remarks>
        /// The Verified Accounts API v1.1 provides information about the bank and investment accounts that the user  has selected for verification, during the Account Verification flow on FastLink 4. By default, the API only returns information of the accounts that were selected and have been successfully verified. &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">Comma separated accountIds. (optional)</param>
        /// <param name="isSelected">Comma separated isSelected. Allowed values are true, false &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is true. (optional)</param>
        /// <param name="verificationStatus">Comma separated verificationStatus. Allowed values are SUCCESS, FAILED &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is SUCCESS. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerifiedAccountResponse</returns>
        System.Threading.Tasks.Task<VerifiedAccountResponse> GetVerifiedAccountsAsync(string providerAccountId, string accountId = default(string), string isSelected = default(string), string verificationStatus = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Verified Accounts
        /// </summary>
        /// <remarks>
        /// The Verified Accounts API v1.1 provides information about the bank and investment accounts that the user  has selected for verification, during the Account Verification flow on FastLink 4. By default, the API only returns information of the accounts that were selected and have been successfully verified. &lt;br&gt;&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">Comma separated accountIds. (optional)</param>
        /// <param name="isSelected">Comma separated isSelected. Allowed values are true, false &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is true. (optional)</param>
        /// <param name="verificationStatus">Comma separated verificationStatus. Allowed values are SUCCESS, FAILED &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is SUCCESS. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerifiedAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerifiedAccountResponse>> GetVerifiedAccountsWithHttpInfoAsync(string providerAccountId, string accountId = default(string), string isSelected = default(string), string verificationStatus = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Initiaite Challenge Deposit
        /// </summary>
        /// <remarks>
        /// The post verification service is used to initiate the matching service (MS) and the challenge deposit account verification (CDV) process to verify account ownership.&lt;br&gt;The MS and CDV process can verify ownership of only bank accounts (i.e., checking and savings).&lt;br&gt;The MS verification can be initiated only for an already aggregated account or a providerAccount.&lt;br&gt;The prerequisite for the MS verification process is to request the ACCT_PROFILE dataset with the HOLDER_NAME attribute.&lt;br&gt;In the MS verification process, a string-match of the account holder name with the registered user name is performed instantaneously. You can contact the Yodlee CustomerCare to configure the full name or only the last name match.&lt;br&gt;Once the CDV process is initiated Yodlee will post the microtransaction (i.e., credit and debit) in the user&#39;s account. The CDV process takes 2 to 3 days to complete as it requires the user to provide the microtransaction details.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;The verificationId in the response can be used to track the verification request.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#39;s assistance to set up a dedicated environment.
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verificationParam">verification information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerificationResponse</returns>
        System.Threading.Tasks.Task<VerificationResponse> InitiateMatchingOrChallengeDepositeVerificationAsync(VerificationRequest verificationParam, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Initiaite Challenge Deposit
        /// </summary>
        /// <remarks>
        /// The post verification service is used to initiate the matching service (MS) and the challenge deposit account verification (CDV) process to verify account ownership.&lt;br&gt;The MS and CDV process can verify ownership of only bank accounts (i.e., checking and savings).&lt;br&gt;The MS verification can be initiated only for an already aggregated account or a providerAccount.&lt;br&gt;The prerequisite for the MS verification process is to request the ACCT_PROFILE dataset with the HOLDER_NAME attribute.&lt;br&gt;In the MS verification process, a string-match of the account holder name with the registered user name is performed instantaneously. You can contact the Yodlee CustomerCare to configure the full name or only the last name match.&lt;br&gt;Once the CDV process is initiated Yodlee will post the microtransaction (i.e., credit and debit) in the user&#39;s account. The CDV process takes 2 to 3 days to complete as it requires the user to provide the microtransaction details.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;The verificationId in the response can be used to track the verification request.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#39;s assistance to set up a dedicated environment.
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verificationParam">verification information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerificationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerificationResponse>> InitiateMatchingOrChallengeDepositeVerificationWithHttpInfoAsync(VerificationRequest verificationParam, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Verify Challenge Deposit
        /// </summary>
        /// <remarks>
        /// The put verification service is used to complete the challenge deposit verification (CDV) process.&lt;br&gt;This service is used only by the customer of CDV flow.&lt;br&gt;In the CDV process, the user-provided microtransaction details (i.e., credit and debit) is matched against the microtransactions posted by Yodlee. For a successful verification of the account&#39;s ownership both the microtransaction details should match.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#39;s assistance to set up a dedicated environment.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verificationParam">verification information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerificationResponse</returns>
        System.Threading.Tasks.Task<VerificationResponse> VerifyChallengeDepositAsync(UpdateVerificationRequest verificationParam, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Verify Challenge Deposit
        /// </summary>
        /// <remarks>
        /// The put verification service is used to complete the challenge deposit verification (CDV) process.&lt;br&gt;This service is used only by the customer of CDV flow.&lt;br&gt;In the CDV process, the user-provided microtransaction details (i.e., credit and debit) is matched against the microtransactions posted by Yodlee. For a successful verification of the account&#39;s ownership both the microtransaction details should match.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#39;s assistance to set up a dedicated environment.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verificationParam">verification information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerificationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerificationResponse>> VerifyChallengeDepositWithHttpInfoAsync(UpdateVerificationRequest verificationParam, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVerificationApi : IVerificationApiSync, IVerificationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VerificationApi : IVerificationApi
    {
        private Yodlee.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VerificationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VerificationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VerificationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VerificationApi(string basePath)
        {
            this.Configuration = Yodlee.ApiClient.Client.Configuration.MergeConfigurations(
                Yodlee.ApiClient.Client.GlobalConfiguration.Instance,
                new Yodlee.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yodlee.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VerificationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VerificationApi(Yodlee.ApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yodlee.ApiClient.Client.Configuration.MergeConfigurations(
                Yodlee.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yodlee.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VerificationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public VerificationApi(Yodlee.ApiClient.Client.ISynchronousClient client, Yodlee.ApiClient.Client.IAsynchronousClient asyncClient, Yodlee.ApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yodlee.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yodlee.ApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yodlee.ApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yodlee.ApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yodlee.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Classification Summary The get classification summary API service returns attributes that provide account-level and transaction-level summary for a user&#39;s account.&lt;br&gt;&lt;br&gt;As a prerequisite, the Account Verification customers should have Transactions enabled to fetch a response. The API can be invoked only for an account verified by the user following the get verified accounts API call. If the prerequisite is not satisfied, an appropriate error will be returned on invoking the API.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">accountId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClassificationSummaryResponse</returns>
        public ClassificationSummaryResponse GetClassificationSummary(string accountId, int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<ClassificationSummaryResponse> localVarResponse = GetClassificationSummaryWithHttpInfo(accountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Classification Summary The get classification summary API service returns attributes that provide account-level and transaction-level summary for a user&#39;s account.&lt;br&gt;&lt;br&gt;As a prerequisite, the Account Verification customers should have Transactions enabled to fetch a response. The API can be invoked only for an account verified by the user following the get verified accounts API call. If the prerequisite is not satisfied, an appropriate error will be returned on invoking the API.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">accountId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClassificationSummaryResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<ClassificationSummaryResponse> GetClassificationSummaryWithHttpInfo(string accountId, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'accountId' when calling VerificationApi->GetClassificationSummary");
            }

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "accountId", accountId));

            localVarRequestOptions.Operation = "VerificationApi.GetClassificationSummary";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ClassificationSummaryResponse>("/verification/classification/summary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClassificationSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Classification Summary The get classification summary API service returns attributes that provide account-level and transaction-level summary for a user&#39;s account.&lt;br&gt;&lt;br&gt;As a prerequisite, the Account Verification customers should have Transactions enabled to fetch a response. The API can be invoked only for an account verified by the user following the get verified accounts API call. If the prerequisite is not satisfied, an appropriate error will be returned on invoking the API.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">accountId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClassificationSummaryResponse</returns>
        public async System.Threading.Tasks.Task<ClassificationSummaryResponse> GetClassificationSummaryAsync(string accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<ClassificationSummaryResponse> localVarResponse = await GetClassificationSummaryWithHttpInfoAsync(accountId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Classification Summary The get classification summary API service returns attributes that provide account-level and transaction-level summary for a user&#39;s account.&lt;br&gt;&lt;br&gt;As a prerequisite, the Account Verification customers should have Transactions enabled to fetch a response. The API can be invoked only for an account verified by the user following the get verified accounts API call. If the prerequisite is not satisfied, an appropriate error will be returned on invoking the API.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">accountId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClassificationSummaryResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<ClassificationSummaryResponse>> GetClassificationSummaryWithHttpInfoAsync(string accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'accountId' when calling VerificationApi->GetClassificationSummary");
            }


            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "accountId", accountId));

            localVarRequestOptions.Operation = "VerificationApi.GetClassificationSummary";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClassificationSummaryResponse>("/verification/classification/summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClassificationSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Holder Profile The Holder Profile API service allows retrieving the user&#39;s profile details (i.e., PII data such as name, email, phone number, and address) that are available at the provider account and each account level. The API accepts the providerAccountId and retrieves the profile information available under it and all the details available under each of the associated accounts.  &lt;br&gt;&lt;br&gt;This service can only be invoked by Yodlee API v1.1, FastLink 3, and FastLink 4 customers. &lt;br&gt;&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">accountId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HolderProfileResponse</returns>
        public HolderProfileResponse GetHolderProfile(string providerAccountId, string accountId = default(string), int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<HolderProfileResponse> localVarResponse = GetHolderProfileWithHttpInfo(providerAccountId, accountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Holder Profile The Holder Profile API service allows retrieving the user&#39;s profile details (i.e., PII data such as name, email, phone number, and address) that are available at the provider account and each account level. The API accepts the providerAccountId and retrieves the profile information available under it and all the details available under each of the associated accounts.  &lt;br&gt;&lt;br&gt;This service can only be invoked by Yodlee API v1.1, FastLink 3, and FastLink 4 customers. &lt;br&gt;&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">accountId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HolderProfileResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<HolderProfileResponse> GetHolderProfileWithHttpInfo(string providerAccountId, string accountId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'providerAccountId' is set
            if (providerAccountId == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'providerAccountId' when calling VerificationApi->GetHolderProfile");
            }

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "accountId", accountId));
            }
            localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "providerAccountId", providerAccountId));

            localVarRequestOptions.Operation = "VerificationApi.GetHolderProfile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<HolderProfileResponse>("/verification/holderProfile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHolderProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Holder Profile The Holder Profile API service allows retrieving the user&#39;s profile details (i.e., PII data such as name, email, phone number, and address) that are available at the provider account and each account level. The API accepts the providerAccountId and retrieves the profile information available under it and all the details available under each of the associated accounts.  &lt;br&gt;&lt;br&gt;This service can only be invoked by Yodlee API v1.1, FastLink 3, and FastLink 4 customers. &lt;br&gt;&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">accountId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HolderProfileResponse</returns>
        public async System.Threading.Tasks.Task<HolderProfileResponse> GetHolderProfileAsync(string providerAccountId, string accountId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<HolderProfileResponse> localVarResponse = await GetHolderProfileWithHttpInfoAsync(providerAccountId, accountId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Holder Profile The Holder Profile API service allows retrieving the user&#39;s profile details (i.e., PII data such as name, email, phone number, and address) that are available at the provider account and each account level. The API accepts the providerAccountId and retrieves the profile information available under it and all the details available under each of the associated accounts.  &lt;br&gt;&lt;br&gt;This service can only be invoked by Yodlee API v1.1, FastLink 3, and FastLink 4 customers. &lt;br&gt;&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">accountId (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HolderProfileResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<HolderProfileResponse>> GetHolderProfileWithHttpInfoAsync(string providerAccountId, string accountId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'providerAccountId' is set
            if (providerAccountId == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'providerAccountId' when calling VerificationApi->GetHolderProfile");
            }


            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "accountId", accountId));
            }
            localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "providerAccountId", providerAccountId));

            localVarRequestOptions.Operation = "VerificationApi.GetHolderProfile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HolderProfileResponse>("/verification/holderProfile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHolderProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Verification Status The get verification status service is used to retrieve the verification status of all accounts for which the MS or CDV process has been initiated.&lt;br&gt;For the MS process, the account details object returns the aggregated information of the verified accounts. For the CDV process, the account details object returns the user provided account information.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountId (optional)</param>
        /// <param name="providerAccountId">Comma separated providerAccountId (optional)</param>
        /// <param name="verificationType">verificationType (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VerificationStatusResponse</returns>
        public VerificationStatusResponse GetVerificationStatus(string accountId = default(string), string providerAccountId = default(string), string verificationType = default(string), int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<VerificationStatusResponse> localVarResponse = GetVerificationStatusWithHttpInfo(accountId, providerAccountId, verificationType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Verification Status The get verification status service is used to retrieve the verification status of all accounts for which the MS or CDV process has been initiated.&lt;br&gt;For the MS process, the account details object returns the aggregated information of the verified accounts. For the CDV process, the account details object returns the user provided account information.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountId (optional)</param>
        /// <param name="providerAccountId">Comma separated providerAccountId (optional)</param>
        /// <param name="verificationType">verificationType (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VerificationStatusResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<VerificationStatusResponse> GetVerificationStatusWithHttpInfo(string accountId = default(string), string providerAccountId = default(string), string verificationType = default(string), int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "accountId", accountId));
            }
            if (providerAccountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "providerAccountId", providerAccountId));
            }
            if (verificationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "verificationType", verificationType));
            }

            localVarRequestOptions.Operation = "VerificationApi.GetVerificationStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<VerificationStatusResponse>("/verification", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVerificationStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Verification Status The get verification status service is used to retrieve the verification status of all accounts for which the MS or CDV process has been initiated.&lt;br&gt;For the MS process, the account details object returns the aggregated information of the verified accounts. For the CDV process, the account details object returns the user provided account information.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountId (optional)</param>
        /// <param name="providerAccountId">Comma separated providerAccountId (optional)</param>
        /// <param name="verificationType">verificationType (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerificationStatusResponse</returns>
        public async System.Threading.Tasks.Task<VerificationStatusResponse> GetVerificationStatusAsync(string accountId = default(string), string providerAccountId = default(string), string verificationType = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<VerificationStatusResponse> localVarResponse = await GetVerificationStatusWithHttpInfoAsync(accountId, providerAccountId, verificationType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Verification Status The get verification status service is used to retrieve the verification status of all accounts for which the MS or CDV process has been initiated.&lt;br&gt;For the MS process, the account details object returns the aggregated information of the verified accounts. For the CDV process, the account details object returns the user provided account information.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Comma separated accountId (optional)</param>
        /// <param name="providerAccountId">Comma separated providerAccountId (optional)</param>
        /// <param name="verificationType">verificationType (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerificationStatusResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<VerificationStatusResponse>> GetVerificationStatusWithHttpInfoAsync(string accountId = default(string), string providerAccountId = default(string), string verificationType = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "accountId", accountId));
            }
            if (providerAccountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "providerAccountId", providerAccountId));
            }
            if (verificationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "verificationType", verificationType));
            }

            localVarRequestOptions.Operation = "VerificationApi.GetVerificationStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VerificationStatusResponse>("/verification", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVerificationStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Verified Accounts The Verified Accounts API v1.1 provides information about the bank and investment accounts that the user  has selected for verification, during the Account Verification flow on FastLink 4. By default, the API only returns information of the accounts that were selected and have been successfully verified. &lt;br&gt;&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">Comma separated accountIds. (optional)</param>
        /// <param name="isSelected">Comma separated isSelected. Allowed values are true, false &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is true. (optional)</param>
        /// <param name="verificationStatus">Comma separated verificationStatus. Allowed values are SUCCESS, FAILED &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is SUCCESS. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VerifiedAccountResponse</returns>
        public VerifiedAccountResponse GetVerifiedAccounts(string providerAccountId, string accountId = default(string), string isSelected = default(string), string verificationStatus = default(string), int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<VerifiedAccountResponse> localVarResponse = GetVerifiedAccountsWithHttpInfo(providerAccountId, accountId, isSelected, verificationStatus);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Verified Accounts The Verified Accounts API v1.1 provides information about the bank and investment accounts that the user  has selected for verification, during the Account Verification flow on FastLink 4. By default, the API only returns information of the accounts that were selected and have been successfully verified. &lt;br&gt;&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">Comma separated accountIds. (optional)</param>
        /// <param name="isSelected">Comma separated isSelected. Allowed values are true, false &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is true. (optional)</param>
        /// <param name="verificationStatus">Comma separated verificationStatus. Allowed values are SUCCESS, FAILED &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is SUCCESS. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VerifiedAccountResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<VerifiedAccountResponse> GetVerifiedAccountsWithHttpInfo(string providerAccountId, string accountId = default(string), string isSelected = default(string), string verificationStatus = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'providerAccountId' is set
            if (providerAccountId == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'providerAccountId' when calling VerificationApi->GetVerifiedAccounts");
            }

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "accountId", accountId));
            }
            if (isSelected != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "isSelected", isSelected));
            }
            localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "providerAccountId", providerAccountId));
            if (verificationStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "verificationStatus", verificationStatus));
            }

            localVarRequestOptions.Operation = "VerificationApi.GetVerifiedAccounts";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<VerifiedAccountResponse>("/verification/verifiedAccounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVerifiedAccounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Verified Accounts The Verified Accounts API v1.1 provides information about the bank and investment accounts that the user  has selected for verification, during the Account Verification flow on FastLink 4. By default, the API only returns information of the accounts that were selected and have been successfully verified. &lt;br&gt;&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">Comma separated accountIds. (optional)</param>
        /// <param name="isSelected">Comma separated isSelected. Allowed values are true, false &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is true. (optional)</param>
        /// <param name="verificationStatus">Comma separated verificationStatus. Allowed values are SUCCESS, FAILED &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is SUCCESS. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerifiedAccountResponse</returns>
        public async System.Threading.Tasks.Task<VerifiedAccountResponse> GetVerifiedAccountsAsync(string providerAccountId, string accountId = default(string), string isSelected = default(string), string verificationStatus = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<VerifiedAccountResponse> localVarResponse = await GetVerifiedAccountsWithHttpInfoAsync(providerAccountId, accountId, isSelected, verificationStatus, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Verified Accounts The Verified Accounts API v1.1 provides information about the bank and investment accounts that the user  has selected for verification, during the Account Verification flow on FastLink 4. By default, the API only returns information of the accounts that were selected and have been successfully verified. &lt;br&gt;&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerAccountId">providerAccountId.</param>
        /// <param name="accountId">Comma separated accountIds. (optional)</param>
        /// <param name="isSelected">Comma separated isSelected. Allowed values are true, false &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is true. (optional)</param>
        /// <param name="verificationStatus">Comma separated verificationStatus. Allowed values are SUCCESS, FAILED &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; If no value is passed, the implicit default value is SUCCESS. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerifiedAccountResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<VerifiedAccountResponse>> GetVerifiedAccountsWithHttpInfoAsync(string providerAccountId, string accountId = default(string), string isSelected = default(string), string verificationStatus = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'providerAccountId' is set
            if (providerAccountId == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'providerAccountId' when calling VerificationApi->GetVerifiedAccounts");
            }


            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "accountId", accountId));
            }
            if (isSelected != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "isSelected", isSelected));
            }
            localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "providerAccountId", providerAccountId));
            if (verificationStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "verificationStatus", verificationStatus));
            }

            localVarRequestOptions.Operation = "VerificationApi.GetVerifiedAccounts";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VerifiedAccountResponse>("/verification/verifiedAccounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVerifiedAccounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiaite Challenge Deposit The post verification service is used to initiate the matching service (MS) and the challenge deposit account verification (CDV) process to verify account ownership.&lt;br&gt;The MS and CDV process can verify ownership of only bank accounts (i.e., checking and savings).&lt;br&gt;The MS verification can be initiated only for an already aggregated account or a providerAccount.&lt;br&gt;The prerequisite for the MS verification process is to request the ACCT_PROFILE dataset with the HOLDER_NAME attribute.&lt;br&gt;In the MS verification process, a string-match of the account holder name with the registered user name is performed instantaneously. You can contact the Yodlee CustomerCare to configure the full name or only the last name match.&lt;br&gt;Once the CDV process is initiated Yodlee will post the microtransaction (i.e., credit and debit) in the user&#39;s account. The CDV process takes 2 to 3 days to complete as it requires the user to provide the microtransaction details.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;The verificationId in the response can be used to track the verification request.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#39;s assistance to set up a dedicated environment.
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verificationParam">verification information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VerificationResponse</returns>
        public VerificationResponse InitiateMatchingOrChallengeDepositeVerification(VerificationRequest verificationParam, int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<VerificationResponse> localVarResponse = InitiateMatchingOrChallengeDepositeVerificationWithHttpInfo(verificationParam);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initiaite Challenge Deposit The post verification service is used to initiate the matching service (MS) and the challenge deposit account verification (CDV) process to verify account ownership.&lt;br&gt;The MS and CDV process can verify ownership of only bank accounts (i.e., checking and savings).&lt;br&gt;The MS verification can be initiated only for an already aggregated account or a providerAccount.&lt;br&gt;The prerequisite for the MS verification process is to request the ACCT_PROFILE dataset with the HOLDER_NAME attribute.&lt;br&gt;In the MS verification process, a string-match of the account holder name with the registered user name is performed instantaneously. You can contact the Yodlee CustomerCare to configure the full name or only the last name match.&lt;br&gt;Once the CDV process is initiated Yodlee will post the microtransaction (i.e., credit and debit) in the user&#39;s account. The CDV process takes 2 to 3 days to complete as it requires the user to provide the microtransaction details.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;The verificationId in the response can be used to track the verification request.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#39;s assistance to set up a dedicated environment.
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verificationParam">verification information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VerificationResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<VerificationResponse> InitiateMatchingOrChallengeDepositeVerificationWithHttpInfo(VerificationRequest verificationParam, int operationIndex = 0)
        {
            // verify the required parameter 'verificationParam' is set
            if (verificationParam == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'verificationParam' when calling VerificationApi->InitiateMatchingOrChallengeDepositeVerification");
            }

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = verificationParam;

            localVarRequestOptions.Operation = "VerificationApi.InitiateMatchingOrChallengeDepositeVerification";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<VerificationResponse>("/verification", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InitiateMatchingOrChallengeDepositeVerification", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiaite Challenge Deposit The post verification service is used to initiate the matching service (MS) and the challenge deposit account verification (CDV) process to verify account ownership.&lt;br&gt;The MS and CDV process can verify ownership of only bank accounts (i.e., checking and savings).&lt;br&gt;The MS verification can be initiated only for an already aggregated account or a providerAccount.&lt;br&gt;The prerequisite for the MS verification process is to request the ACCT_PROFILE dataset with the HOLDER_NAME attribute.&lt;br&gt;In the MS verification process, a string-match of the account holder name with the registered user name is performed instantaneously. You can contact the Yodlee CustomerCare to configure the full name or only the last name match.&lt;br&gt;Once the CDV process is initiated Yodlee will post the microtransaction (i.e., credit and debit) in the user&#39;s account. The CDV process takes 2 to 3 days to complete as it requires the user to provide the microtransaction details.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;The verificationId in the response can be used to track the verification request.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#39;s assistance to set up a dedicated environment.
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verificationParam">verification information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerificationResponse</returns>
        public async System.Threading.Tasks.Task<VerificationResponse> InitiateMatchingOrChallengeDepositeVerificationAsync(VerificationRequest verificationParam, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<VerificationResponse> localVarResponse = await InitiateMatchingOrChallengeDepositeVerificationWithHttpInfoAsync(verificationParam, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initiaite Challenge Deposit The post verification service is used to initiate the matching service (MS) and the challenge deposit account verification (CDV) process to verify account ownership.&lt;br&gt;The MS and CDV process can verify ownership of only bank accounts (i.e., checking and savings).&lt;br&gt;The MS verification can be initiated only for an already aggregated account or a providerAccount.&lt;br&gt;The prerequisite for the MS verification process is to request the ACCT_PROFILE dataset with the HOLDER_NAME attribute.&lt;br&gt;In the MS verification process, a string-match of the account holder name with the registered user name is performed instantaneously. You can contact the Yodlee CustomerCare to configure the full name or only the last name match.&lt;br&gt;Once the CDV process is initiated Yodlee will post the microtransaction (i.e., credit and debit) in the user&#39;s account. The CDV process takes 2 to 3 days to complete as it requires the user to provide the microtransaction details.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;The verificationId in the response can be used to track the verification request.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#39;s assistance to set up a dedicated environment.
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verificationParam">verification information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerificationResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<VerificationResponse>> InitiateMatchingOrChallengeDepositeVerificationWithHttpInfoAsync(VerificationRequest verificationParam, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'verificationParam' is set
            if (verificationParam == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'verificationParam' when calling VerificationApi->InitiateMatchingOrChallengeDepositeVerification");
            }


            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = verificationParam;

            localVarRequestOptions.Operation = "VerificationApi.InitiateMatchingOrChallengeDepositeVerification";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<VerificationResponse>("/verification", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InitiateMatchingOrChallengeDepositeVerification", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify Challenge Deposit The put verification service is used to complete the challenge deposit verification (CDV) process.&lt;br&gt;This service is used only by the customer of CDV flow.&lt;br&gt;In the CDV process, the user-provided microtransaction details (i.e., credit and debit) is matched against the microtransactions posted by Yodlee. For a successful verification of the account&#39;s ownership both the microtransaction details should match.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#39;s assistance to set up a dedicated environment.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verificationParam">verification information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VerificationResponse</returns>
        public VerificationResponse VerifyChallengeDeposit(UpdateVerificationRequest verificationParam, int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<VerificationResponse> localVarResponse = VerifyChallengeDepositWithHttpInfo(verificationParam);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify Challenge Deposit The put verification service is used to complete the challenge deposit verification (CDV) process.&lt;br&gt;This service is used only by the customer of CDV flow.&lt;br&gt;In the CDV process, the user-provided microtransaction details (i.e., credit and debit) is matched against the microtransactions posted by Yodlee. For a successful verification of the account&#39;s ownership both the microtransaction details should match.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#39;s assistance to set up a dedicated environment.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verificationParam">verification information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VerificationResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<VerificationResponse> VerifyChallengeDepositWithHttpInfo(UpdateVerificationRequest verificationParam, int operationIndex = 0)
        {
            // verify the required parameter 'verificationParam' is set
            if (verificationParam == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'verificationParam' when calling VerificationApi->VerifyChallengeDeposit");
            }

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = verificationParam;

            localVarRequestOptions.Operation = "VerificationApi.VerifyChallengeDeposit";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<VerificationResponse>("/verification", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyChallengeDeposit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify Challenge Deposit The put verification service is used to complete the challenge deposit verification (CDV) process.&lt;br&gt;This service is used only by the customer of CDV flow.&lt;br&gt;In the CDV process, the user-provided microtransaction details (i.e., credit and debit) is matched against the microtransactions posted by Yodlee. For a successful verification of the account&#39;s ownership both the microtransaction details should match.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#39;s assistance to set up a dedicated environment.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verificationParam">verification information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerificationResponse</returns>
        public async System.Threading.Tasks.Task<VerificationResponse> VerifyChallengeDepositAsync(UpdateVerificationRequest verificationParam, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<VerificationResponse> localVarResponse = await VerifyChallengeDepositWithHttpInfoAsync(verificationParam, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify Challenge Deposit The put verification service is used to complete the challenge deposit verification (CDV) process.&lt;br&gt;This service is used only by the customer of CDV flow.&lt;br&gt;In the CDV process, the user-provided microtransaction details (i.e., credit and debit) is matched against the microtransactions posted by Yodlee. For a successful verification of the account&#39;s ownership both the microtransaction details should match.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#39;s assistance to set up a dedicated environment.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verificationParam">verification information</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerificationResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<VerificationResponse>> VerifyChallengeDepositWithHttpInfoAsync(UpdateVerificationRequest verificationParam, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'verificationParam' is set
            if (verificationParam == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'verificationParam' when calling VerificationApi->VerifyChallengeDeposit");
            }


            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = verificationParam;

            localVarRequestOptions.Operation = "VerificationApi.VerifyChallengeDeposit";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<VerificationResponse>("/verification", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyChallengeDeposit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
