/*
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yodlee.ApiClient.Client;
using Yodlee.ApiClient.Model;

namespace Yodlee.ApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentProcessorApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Account Details
        /// </summary>
        /// <remarks>
        /// The get account details service retrieves account information such as account name, type, status, balance, account number and transfer code (for example, routing number of the bank account in the US) of the verified account associated with the &lt;code&gt;processorToken&lt;/code&gt;. The &lt;code&gt;lastUpdated&lt;/code&gt; field indicates when the account information was last updated. We recommend using this service when looking for details related to the financial account, for instance, the full account number and bank transfer code for initiating a payment.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note: &lt;/b&gt;Remember to include the &lt;code&gt;Authorization&lt;/code&gt; header.
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorToken">Token shared by customer to access financial account information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentAccountResponse</returns>
        PaymentAccountResponse GetVerifiedAccount(string processorToken, int operationIndex = 0);

        /// <summary>
        /// Get Account Details
        /// </summary>
        /// <remarks>
        /// The get account details service retrieves account information such as account name, type, status, balance, account number and transfer code (for example, routing number of the bank account in the US) of the verified account associated with the &lt;code&gt;processorToken&lt;/code&gt;. The &lt;code&gt;lastUpdated&lt;/code&gt; field indicates when the account information was last updated. We recommend using this service when looking for details related to the financial account, for instance, the full account number and bank transfer code for initiating a payment.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note: &lt;/b&gt;Remember to include the &lt;code&gt;Authorization&lt;/code&gt; header.
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorToken">Token shared by customer to access financial account information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentAccountResponse</returns>
        ApiResponse<PaymentAccountResponse> GetVerifiedAccountWithHttpInfo(string processorToken, int operationIndex = 0);
        /// <summary>
        /// Get Account Balance
        /// </summary>
        /// <remarks>
        /// The get account balance service retrieves the account balance information of the verified account associated with the &lt;code&gt;processorToken&lt;/code&gt;. The response returns additional account information including account names, type and status, along with the account balance information. &lt;br&gt;This service forces an update of the account balances. While other services also return the account balances, this service attempts to refresh the account balances in real-time rather than return a cached value. Refer to the &lt;code&gt;lastUpdated&lt;/code&gt; field to determine when the account balances were refreshed. We recommend using this service when looking for the latest balance for the account.&lt;br&gt;While posting a debit against an account, it is generally advisable to check the available balance field to verify the availability of sufficient funds. This service returns both available and current balances: &lt;ul&gt;&lt;li&gt;&lt;b&gt;Available Balance&lt;/b&gt; is the amount in the account that is available for spending. The value is aggregated from the FI. For checking accounts with overdrafts, the available balance amount may include the overdraft amount if the FI adds the overdraft balance to the available balance.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Current Balance&lt;/b&gt; is the total amount of money in the account, aggregated from the FI.&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;b&gt;Note: &lt;/b&gt;Remember to include the &lt;code&gt;Authorization&lt;/code&gt; header.
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorToken">Token shared by customer to access financial account information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentAccountBalanceResponse</returns>
        PaymentAccountBalanceResponse GetVerifiedAccountBalance(string processorToken, int operationIndex = 0);

        /// <summary>
        /// Get Account Balance
        /// </summary>
        /// <remarks>
        /// The get account balance service retrieves the account balance information of the verified account associated with the &lt;code&gt;processorToken&lt;/code&gt;. The response returns additional account information including account names, type and status, along with the account balance information. &lt;br&gt;This service forces an update of the account balances. While other services also return the account balances, this service attempts to refresh the account balances in real-time rather than return a cached value. Refer to the &lt;code&gt;lastUpdated&lt;/code&gt; field to determine when the account balances were refreshed. We recommend using this service when looking for the latest balance for the account.&lt;br&gt;While posting a debit against an account, it is generally advisable to check the available balance field to verify the availability of sufficient funds. This service returns both available and current balances: &lt;ul&gt;&lt;li&gt;&lt;b&gt;Available Balance&lt;/b&gt; is the amount in the account that is available for spending. The value is aggregated from the FI. For checking accounts with overdrafts, the available balance amount may include the overdraft amount if the FI adds the overdraft balance to the available balance.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Current Balance&lt;/b&gt; is the total amount of money in the account, aggregated from the FI.&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;b&gt;Note: &lt;/b&gt;Remember to include the &lt;code&gt;Authorization&lt;/code&gt; header.
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorToken">Token shared by customer to access financial account information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentAccountBalanceResponse</returns>
        ApiResponse<PaymentAccountBalanceResponse> GetVerifiedAccountBalanceWithHttpInfo(string processorToken, int operationIndex = 0);
        /// <summary>
        /// Get Account Holder Details
        /// </summary>
        /// <remarks>
        /// The get account holder details service retrieves the account holder information such as name, email, phone number, address, etc. of the verified financial account associated with the &lt;code&gt;processorToken&lt;/code&gt;. The &lt;code&gt;lastUpdated&lt;/code&gt; field indicates when the account information was last updated. We recommend using this service when looking for information related to the account holder(s), for instance, to confirm the account holder&#39;s name. &lt;br&gt;&lt;br&gt;&lt;b&gt;Note: &lt;/b&gt;Remember to include the &lt;code&gt;Authorization&lt;/code&gt; header.
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorToken">Token shared by customer to access financial account information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentAccountHolderResponse</returns>
        PaymentAccountHolderResponse GetVerifiedAccountHolder(string processorToken, int operationIndex = 0);

        /// <summary>
        /// Get Account Holder Details
        /// </summary>
        /// <remarks>
        /// The get account holder details service retrieves the account holder information such as name, email, phone number, address, etc. of the verified financial account associated with the &lt;code&gt;processorToken&lt;/code&gt;. The &lt;code&gt;lastUpdated&lt;/code&gt; field indicates when the account information was last updated. We recommend using this service when looking for information related to the account holder(s), for instance, to confirm the account holder&#39;s name. &lt;br&gt;&lt;br&gt;&lt;b&gt;Note: &lt;/b&gt;Remember to include the &lt;code&gt;Authorization&lt;/code&gt; header.
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorToken">Token shared by customer to access financial account information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentAccountHolderResponse</returns>
        ApiResponse<PaymentAccountHolderResponse> GetVerifiedAccountHolderWithHttpInfo(string processorToken, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentProcessorApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Account Details
        /// </summary>
        /// <remarks>
        /// The get account details service retrieves account information such as account name, type, status, balance, account number and transfer code (for example, routing number of the bank account in the US) of the verified account associated with the &lt;code&gt;processorToken&lt;/code&gt;. The &lt;code&gt;lastUpdated&lt;/code&gt; field indicates when the account information was last updated. We recommend using this service when looking for details related to the financial account, for instance, the full account number and bank transfer code for initiating a payment.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note: &lt;/b&gt;Remember to include the &lt;code&gt;Authorization&lt;/code&gt; header.
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorToken">Token shared by customer to access financial account information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentAccountResponse</returns>
        System.Threading.Tasks.Task<PaymentAccountResponse> GetVerifiedAccountAsync(string processorToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Account Details
        /// </summary>
        /// <remarks>
        /// The get account details service retrieves account information such as account name, type, status, balance, account number and transfer code (for example, routing number of the bank account in the US) of the verified account associated with the &lt;code&gt;processorToken&lt;/code&gt;. The &lt;code&gt;lastUpdated&lt;/code&gt; field indicates when the account information was last updated. We recommend using this service when looking for details related to the financial account, for instance, the full account number and bank transfer code for initiating a payment.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note: &lt;/b&gt;Remember to include the &lt;code&gt;Authorization&lt;/code&gt; header.
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorToken">Token shared by customer to access financial account information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentAccountResponse>> GetVerifiedAccountWithHttpInfoAsync(string processorToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Account Balance
        /// </summary>
        /// <remarks>
        /// The get account balance service retrieves the account balance information of the verified account associated with the &lt;code&gt;processorToken&lt;/code&gt;. The response returns additional account information including account names, type and status, along with the account balance information. &lt;br&gt;This service forces an update of the account balances. While other services also return the account balances, this service attempts to refresh the account balances in real-time rather than return a cached value. Refer to the &lt;code&gt;lastUpdated&lt;/code&gt; field to determine when the account balances were refreshed. We recommend using this service when looking for the latest balance for the account.&lt;br&gt;While posting a debit against an account, it is generally advisable to check the available balance field to verify the availability of sufficient funds. This service returns both available and current balances: &lt;ul&gt;&lt;li&gt;&lt;b&gt;Available Balance&lt;/b&gt; is the amount in the account that is available for spending. The value is aggregated from the FI. For checking accounts with overdrafts, the available balance amount may include the overdraft amount if the FI adds the overdraft balance to the available balance.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Current Balance&lt;/b&gt; is the total amount of money in the account, aggregated from the FI.&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;b&gt;Note: &lt;/b&gt;Remember to include the &lt;code&gt;Authorization&lt;/code&gt; header.
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorToken">Token shared by customer to access financial account information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentAccountBalanceResponse</returns>
        System.Threading.Tasks.Task<PaymentAccountBalanceResponse> GetVerifiedAccountBalanceAsync(string processorToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Account Balance
        /// </summary>
        /// <remarks>
        /// The get account balance service retrieves the account balance information of the verified account associated with the &lt;code&gt;processorToken&lt;/code&gt;. The response returns additional account information including account names, type and status, along with the account balance information. &lt;br&gt;This service forces an update of the account balances. While other services also return the account balances, this service attempts to refresh the account balances in real-time rather than return a cached value. Refer to the &lt;code&gt;lastUpdated&lt;/code&gt; field to determine when the account balances were refreshed. We recommend using this service when looking for the latest balance for the account.&lt;br&gt;While posting a debit against an account, it is generally advisable to check the available balance field to verify the availability of sufficient funds. This service returns both available and current balances: &lt;ul&gt;&lt;li&gt;&lt;b&gt;Available Balance&lt;/b&gt; is the amount in the account that is available for spending. The value is aggregated from the FI. For checking accounts with overdrafts, the available balance amount may include the overdraft amount if the FI adds the overdraft balance to the available balance.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Current Balance&lt;/b&gt; is the total amount of money in the account, aggregated from the FI.&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;b&gt;Note: &lt;/b&gt;Remember to include the &lt;code&gt;Authorization&lt;/code&gt; header.
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorToken">Token shared by customer to access financial account information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentAccountBalanceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentAccountBalanceResponse>> GetVerifiedAccountBalanceWithHttpInfoAsync(string processorToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Account Holder Details
        /// </summary>
        /// <remarks>
        /// The get account holder details service retrieves the account holder information such as name, email, phone number, address, etc. of the verified financial account associated with the &lt;code&gt;processorToken&lt;/code&gt;. The &lt;code&gt;lastUpdated&lt;/code&gt; field indicates when the account information was last updated. We recommend using this service when looking for information related to the account holder(s), for instance, to confirm the account holder&#39;s name. &lt;br&gt;&lt;br&gt;&lt;b&gt;Note: &lt;/b&gt;Remember to include the &lt;code&gt;Authorization&lt;/code&gt; header.
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorToken">Token shared by customer to access financial account information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentAccountHolderResponse</returns>
        System.Threading.Tasks.Task<PaymentAccountHolderResponse> GetVerifiedAccountHolderAsync(string processorToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Account Holder Details
        /// </summary>
        /// <remarks>
        /// The get account holder details service retrieves the account holder information such as name, email, phone number, address, etc. of the verified financial account associated with the &lt;code&gt;processorToken&lt;/code&gt;. The &lt;code&gt;lastUpdated&lt;/code&gt; field indicates when the account information was last updated. We recommend using this service when looking for information related to the account holder(s), for instance, to confirm the account holder&#39;s name. &lt;br&gt;&lt;br&gt;&lt;b&gt;Note: &lt;/b&gt;Remember to include the &lt;code&gt;Authorization&lt;/code&gt; header.
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorToken">Token shared by customer to access financial account information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentAccountHolderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentAccountHolderResponse>> GetVerifiedAccountHolderWithHttpInfoAsync(string processorToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentProcessorApi : IPaymentProcessorApiSync, IPaymentProcessorApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentProcessorApi : IPaymentProcessorApi
    {
        private Yodlee.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentProcessorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentProcessorApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentProcessorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentProcessorApi(string basePath)
        {
            this.Configuration = Yodlee.ApiClient.Client.Configuration.MergeConfigurations(
                Yodlee.ApiClient.Client.GlobalConfiguration.Instance,
                new Yodlee.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yodlee.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentProcessorApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentProcessorApi(Yodlee.ApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yodlee.ApiClient.Client.Configuration.MergeConfigurations(
                Yodlee.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yodlee.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentProcessorApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PaymentProcessorApi(Yodlee.ApiClient.Client.ISynchronousClient client, Yodlee.ApiClient.Client.IAsynchronousClient asyncClient, Yodlee.ApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yodlee.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yodlee.ApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yodlee.ApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yodlee.ApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yodlee.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Account Details The get account details service retrieves account information such as account name, type, status, balance, account number and transfer code (for example, routing number of the bank account in the US) of the verified account associated with the &lt;code&gt;processorToken&lt;/code&gt;. The &lt;code&gt;lastUpdated&lt;/code&gt; field indicates when the account information was last updated. We recommend using this service when looking for details related to the financial account, for instance, the full account number and bank transfer code for initiating a payment.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note: &lt;/b&gt;Remember to include the &lt;code&gt;Authorization&lt;/code&gt; header.
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorToken">Token shared by customer to access financial account information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentAccountResponse</returns>
        public PaymentAccountResponse GetVerifiedAccount(string processorToken, int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<PaymentAccountResponse> localVarResponse = GetVerifiedAccountWithHttpInfo(processorToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Details The get account details service retrieves account information such as account name, type, status, balance, account number and transfer code (for example, routing number of the bank account in the US) of the verified account associated with the &lt;code&gt;processorToken&lt;/code&gt;. The &lt;code&gt;lastUpdated&lt;/code&gt; field indicates when the account information was last updated. We recommend using this service when looking for details related to the financial account, for instance, the full account number and bank transfer code for initiating a payment.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note: &lt;/b&gt;Remember to include the &lt;code&gt;Authorization&lt;/code&gt; header.
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorToken">Token shared by customer to access financial account information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentAccountResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<PaymentAccountResponse> GetVerifiedAccountWithHttpInfo(string processorToken, int operationIndex = 0)
        {
            // verify the required parameter 'processorToken' is set
            if (processorToken == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'processorToken' when calling PaymentProcessorApi->GetVerifiedAccount");
            }

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("processorToken", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(processorToken)); // header parameter

            localVarRequestOptions.Operation = "PaymentProcessorApi.GetVerifiedAccount";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PaymentAccountResponse>("/partner/paymentProcessor/account", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVerifiedAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Account Details The get account details service retrieves account information such as account name, type, status, balance, account number and transfer code (for example, routing number of the bank account in the US) of the verified account associated with the &lt;code&gt;processorToken&lt;/code&gt;. The &lt;code&gt;lastUpdated&lt;/code&gt; field indicates when the account information was last updated. We recommend using this service when looking for details related to the financial account, for instance, the full account number and bank transfer code for initiating a payment.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note: &lt;/b&gt;Remember to include the &lt;code&gt;Authorization&lt;/code&gt; header.
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorToken">Token shared by customer to access financial account information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentAccountResponse</returns>
        public async System.Threading.Tasks.Task<PaymentAccountResponse> GetVerifiedAccountAsync(string processorToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<PaymentAccountResponse> localVarResponse = await GetVerifiedAccountWithHttpInfoAsync(processorToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Details The get account details service retrieves account information such as account name, type, status, balance, account number and transfer code (for example, routing number of the bank account in the US) of the verified account associated with the &lt;code&gt;processorToken&lt;/code&gt;. The &lt;code&gt;lastUpdated&lt;/code&gt; field indicates when the account information was last updated. We recommend using this service when looking for details related to the financial account, for instance, the full account number and bank transfer code for initiating a payment.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note: &lt;/b&gt;Remember to include the &lt;code&gt;Authorization&lt;/code&gt; header.
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorToken">Token shared by customer to access financial account information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentAccountResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<PaymentAccountResponse>> GetVerifiedAccountWithHttpInfoAsync(string processorToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'processorToken' is set
            if (processorToken == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'processorToken' when calling PaymentProcessorApi->GetVerifiedAccount");
            }


            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("processorToken", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(processorToken)); // header parameter

            localVarRequestOptions.Operation = "PaymentProcessorApi.GetVerifiedAccount";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaymentAccountResponse>("/partner/paymentProcessor/account", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVerifiedAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Account Balance The get account balance service retrieves the account balance information of the verified account associated with the &lt;code&gt;processorToken&lt;/code&gt;. The response returns additional account information including account names, type and status, along with the account balance information. &lt;br&gt;This service forces an update of the account balances. While other services also return the account balances, this service attempts to refresh the account balances in real-time rather than return a cached value. Refer to the &lt;code&gt;lastUpdated&lt;/code&gt; field to determine when the account balances were refreshed. We recommend using this service when looking for the latest balance for the account.&lt;br&gt;While posting a debit against an account, it is generally advisable to check the available balance field to verify the availability of sufficient funds. This service returns both available and current balances: &lt;ul&gt;&lt;li&gt;&lt;b&gt;Available Balance&lt;/b&gt; is the amount in the account that is available for spending. The value is aggregated from the FI. For checking accounts with overdrafts, the available balance amount may include the overdraft amount if the FI adds the overdraft balance to the available balance.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Current Balance&lt;/b&gt; is the total amount of money in the account, aggregated from the FI.&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;b&gt;Note: &lt;/b&gt;Remember to include the &lt;code&gt;Authorization&lt;/code&gt; header.
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorToken">Token shared by customer to access financial account information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentAccountBalanceResponse</returns>
        public PaymentAccountBalanceResponse GetVerifiedAccountBalance(string processorToken, int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<PaymentAccountBalanceResponse> localVarResponse = GetVerifiedAccountBalanceWithHttpInfo(processorToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Balance The get account balance service retrieves the account balance information of the verified account associated with the &lt;code&gt;processorToken&lt;/code&gt;. The response returns additional account information including account names, type and status, along with the account balance information. &lt;br&gt;This service forces an update of the account balances. While other services also return the account balances, this service attempts to refresh the account balances in real-time rather than return a cached value. Refer to the &lt;code&gt;lastUpdated&lt;/code&gt; field to determine when the account balances were refreshed. We recommend using this service when looking for the latest balance for the account.&lt;br&gt;While posting a debit against an account, it is generally advisable to check the available balance field to verify the availability of sufficient funds. This service returns both available and current balances: &lt;ul&gt;&lt;li&gt;&lt;b&gt;Available Balance&lt;/b&gt; is the amount in the account that is available for spending. The value is aggregated from the FI. For checking accounts with overdrafts, the available balance amount may include the overdraft amount if the FI adds the overdraft balance to the available balance.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Current Balance&lt;/b&gt; is the total amount of money in the account, aggregated from the FI.&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;b&gt;Note: &lt;/b&gt;Remember to include the &lt;code&gt;Authorization&lt;/code&gt; header.
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorToken">Token shared by customer to access financial account information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentAccountBalanceResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<PaymentAccountBalanceResponse> GetVerifiedAccountBalanceWithHttpInfo(string processorToken, int operationIndex = 0)
        {
            // verify the required parameter 'processorToken' is set
            if (processorToken == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'processorToken' when calling PaymentProcessorApi->GetVerifiedAccountBalance");
            }

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("processorToken", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(processorToken)); // header parameter

            localVarRequestOptions.Operation = "PaymentProcessorApi.GetVerifiedAccountBalance";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PaymentAccountBalanceResponse>("/partner/paymentProcessor/account/balance", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVerifiedAccountBalance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Account Balance The get account balance service retrieves the account balance information of the verified account associated with the &lt;code&gt;processorToken&lt;/code&gt;. The response returns additional account information including account names, type and status, along with the account balance information. &lt;br&gt;This service forces an update of the account balances. While other services also return the account balances, this service attempts to refresh the account balances in real-time rather than return a cached value. Refer to the &lt;code&gt;lastUpdated&lt;/code&gt; field to determine when the account balances were refreshed. We recommend using this service when looking for the latest balance for the account.&lt;br&gt;While posting a debit against an account, it is generally advisable to check the available balance field to verify the availability of sufficient funds. This service returns both available and current balances: &lt;ul&gt;&lt;li&gt;&lt;b&gt;Available Balance&lt;/b&gt; is the amount in the account that is available for spending. The value is aggregated from the FI. For checking accounts with overdrafts, the available balance amount may include the overdraft amount if the FI adds the overdraft balance to the available balance.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Current Balance&lt;/b&gt; is the total amount of money in the account, aggregated from the FI.&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;b&gt;Note: &lt;/b&gt;Remember to include the &lt;code&gt;Authorization&lt;/code&gt; header.
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorToken">Token shared by customer to access financial account information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentAccountBalanceResponse</returns>
        public async System.Threading.Tasks.Task<PaymentAccountBalanceResponse> GetVerifiedAccountBalanceAsync(string processorToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<PaymentAccountBalanceResponse> localVarResponse = await GetVerifiedAccountBalanceWithHttpInfoAsync(processorToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Balance The get account balance service retrieves the account balance information of the verified account associated with the &lt;code&gt;processorToken&lt;/code&gt;. The response returns additional account information including account names, type and status, along with the account balance information. &lt;br&gt;This service forces an update of the account balances. While other services also return the account balances, this service attempts to refresh the account balances in real-time rather than return a cached value. Refer to the &lt;code&gt;lastUpdated&lt;/code&gt; field to determine when the account balances were refreshed. We recommend using this service when looking for the latest balance for the account.&lt;br&gt;While posting a debit against an account, it is generally advisable to check the available balance field to verify the availability of sufficient funds. This service returns both available and current balances: &lt;ul&gt;&lt;li&gt;&lt;b&gt;Available Balance&lt;/b&gt; is the amount in the account that is available for spending. The value is aggregated from the FI. For checking accounts with overdrafts, the available balance amount may include the overdraft amount if the FI adds the overdraft balance to the available balance.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Current Balance&lt;/b&gt; is the total amount of money in the account, aggregated from the FI.&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;b&gt;Note: &lt;/b&gt;Remember to include the &lt;code&gt;Authorization&lt;/code&gt; header.
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorToken">Token shared by customer to access financial account information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentAccountBalanceResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<PaymentAccountBalanceResponse>> GetVerifiedAccountBalanceWithHttpInfoAsync(string processorToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'processorToken' is set
            if (processorToken == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'processorToken' when calling PaymentProcessorApi->GetVerifiedAccountBalance");
            }


            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("processorToken", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(processorToken)); // header parameter

            localVarRequestOptions.Operation = "PaymentProcessorApi.GetVerifiedAccountBalance";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaymentAccountBalanceResponse>("/partner/paymentProcessor/account/balance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVerifiedAccountBalance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Account Holder Details The get account holder details service retrieves the account holder information such as name, email, phone number, address, etc. of the verified financial account associated with the &lt;code&gt;processorToken&lt;/code&gt;. The &lt;code&gt;lastUpdated&lt;/code&gt; field indicates when the account information was last updated. We recommend using this service when looking for information related to the account holder(s), for instance, to confirm the account holder&#39;s name. &lt;br&gt;&lt;br&gt;&lt;b&gt;Note: &lt;/b&gt;Remember to include the &lt;code&gt;Authorization&lt;/code&gt; header.
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorToken">Token shared by customer to access financial account information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentAccountHolderResponse</returns>
        public PaymentAccountHolderResponse GetVerifiedAccountHolder(string processorToken, int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<PaymentAccountHolderResponse> localVarResponse = GetVerifiedAccountHolderWithHttpInfo(processorToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Holder Details The get account holder details service retrieves the account holder information such as name, email, phone number, address, etc. of the verified financial account associated with the &lt;code&gt;processorToken&lt;/code&gt;. The &lt;code&gt;lastUpdated&lt;/code&gt; field indicates when the account information was last updated. We recommend using this service when looking for information related to the account holder(s), for instance, to confirm the account holder&#39;s name. &lt;br&gt;&lt;br&gt;&lt;b&gt;Note: &lt;/b&gt;Remember to include the &lt;code&gt;Authorization&lt;/code&gt; header.
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorToken">Token shared by customer to access financial account information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentAccountHolderResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<PaymentAccountHolderResponse> GetVerifiedAccountHolderWithHttpInfo(string processorToken, int operationIndex = 0)
        {
            // verify the required parameter 'processorToken' is set
            if (processorToken == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'processorToken' when calling PaymentProcessorApi->GetVerifiedAccountHolder");
            }

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("processorToken", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(processorToken)); // header parameter

            localVarRequestOptions.Operation = "PaymentProcessorApi.GetVerifiedAccountHolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PaymentAccountHolderResponse>("/partner/paymentProcessor/account/holder", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVerifiedAccountHolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Account Holder Details The get account holder details service retrieves the account holder information such as name, email, phone number, address, etc. of the verified financial account associated with the &lt;code&gt;processorToken&lt;/code&gt;. The &lt;code&gt;lastUpdated&lt;/code&gt; field indicates when the account information was last updated. We recommend using this service when looking for information related to the account holder(s), for instance, to confirm the account holder&#39;s name. &lt;br&gt;&lt;br&gt;&lt;b&gt;Note: &lt;/b&gt;Remember to include the &lt;code&gt;Authorization&lt;/code&gt; header.
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorToken">Token shared by customer to access financial account information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentAccountHolderResponse</returns>
        public async System.Threading.Tasks.Task<PaymentAccountHolderResponse> GetVerifiedAccountHolderAsync(string processorToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<PaymentAccountHolderResponse> localVarResponse = await GetVerifiedAccountHolderWithHttpInfoAsync(processorToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Holder Details The get account holder details service retrieves the account holder information such as name, email, phone number, address, etc. of the verified financial account associated with the &lt;code&gt;processorToken&lt;/code&gt;. The &lt;code&gt;lastUpdated&lt;/code&gt; field indicates when the account information was last updated. We recommend using this service when looking for information related to the account holder(s), for instance, to confirm the account holder&#39;s name. &lt;br&gt;&lt;br&gt;&lt;b&gt;Note: &lt;/b&gt;Remember to include the &lt;code&gt;Authorization&lt;/code&gt; header.
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processorToken">Token shared by customer to access financial account information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentAccountHolderResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<PaymentAccountHolderResponse>> GetVerifiedAccountHolderWithHttpInfoAsync(string processorToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'processorToken' is set
            if (processorToken == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'processorToken' when calling PaymentProcessorApi->GetVerifiedAccountHolder");
            }


            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("processorToken", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(processorToken)); // header parameter

            localVarRequestOptions.Operation = "PaymentProcessorApi.GetVerifiedAccountHolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaymentAccountHolderResponse>("/partner/paymentProcessor/account/holder", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVerifiedAccountHolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
