/*
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yodlee.ApiClient.Client;
using Yodlee.ApiClient.Model;

namespace Yodlee.ApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConsentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Post Consent
        /// </summary>
        /// <remarks>
        /// The generate consent service is used to generate all the consent information and permissions associated to a provider. &lt;br/&gt;The scope provided in the response is based on the providerId and the datasets provided in the input. &lt;br/&gt;If no dataset value is provided, the datasets that are configured for the customer will be considered. &lt;br/&gt;The configured dataset can be overridden by providing the dataset as an input. &lt;br/&gt;If no applicationName is provided in the input, the default applicationName will be considered. &lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentRequest">Unique identifier for the provider site(mandatory), the name of the application,  &lt;br/&gt;the flag responsible to include html content in the response, &lt;br/&gt;when passed as true and the name of the dataset attribute supported by the provider.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreatedConsentResponse</returns>
        CreatedConsentResponse CreateConsent(CreateConsentRequest consentRequest, int operationIndex = 0);

        /// <summary>
        /// Post Consent
        /// </summary>
        /// <remarks>
        /// The generate consent service is used to generate all the consent information and permissions associated to a provider. &lt;br/&gt;The scope provided in the response is based on the providerId and the datasets provided in the input. &lt;br/&gt;If no dataset value is provided, the datasets that are configured for the customer will be considered. &lt;br/&gt;The configured dataset can be overridden by providing the dataset as an input. &lt;br/&gt;If no applicationName is provided in the input, the default applicationName will be considered. &lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentRequest">Unique identifier for the provider site(mandatory), the name of the application,  &lt;br/&gt;the flag responsible to include html content in the response, &lt;br/&gt;when passed as true and the name of the dataset attribute supported by the provider.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreatedConsentResponse</returns>
        ApiResponse<CreatedConsentResponse> CreateConsentWithHttpInfo(CreateConsentRequest consentRequest, int operationIndex = 0);
        /// <summary>
        /// Get Authorization Details
        /// </summary>
        /// <remarks>
        /// The get authorization URL for consent service provides the authorization URL for the renew consent flow, within the consent dashboard.&lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">Consent Id generated through POST Consent.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdatedConsentResponse</returns>
        UpdatedConsentResponse GetConsentDetails(long consentId, int operationIndex = 0);

        /// <summary>
        /// Get Authorization Details
        /// </summary>
        /// <remarks>
        /// The get authorization URL for consent service provides the authorization URL for the renew consent flow, within the consent dashboard.&lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">Consent Id generated through POST Consent.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdatedConsentResponse</returns>
        ApiResponse<UpdatedConsentResponse> GetConsentDetailsWithHttpInfo(long consentId, int operationIndex = 0);
        /// <summary>
        /// Get Consents Preferences
        /// </summary>
        /// <remarks>
        /// This API service provides user&#39;s preferences for the consent
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">consentId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConsentPreferencesResponse</returns>
        ConsentPreferencesResponse GetConsentPreferences(string consentId, int operationIndex = 0);

        /// <summary>
        /// Get Consents Preferences
        /// </summary>
        /// <remarks>
        /// This API service provides user&#39;s preferences for the consent
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">consentId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConsentPreferencesResponse</returns>
        ApiResponse<ConsentPreferencesResponse> GetConsentPreferencesWithHttpInfo(string consentId, int operationIndex = 0);
        /// <summary>
        /// Get Consents
        /// </summary>
        /// <remarks>
        /// The get consent service is used to retrieve all the consents submitted to Yodlee. &lt;br&gt;The service can be used to build a manage consent interface or a consent dashboard to implement the renew and revoke consent flows.&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentIds">Consent Id generated through POST Consent. (optional)</param>
        /// <param name="include">The flag responsible to include renew details like sharing duration and reauthorization required (optional)</param>
        /// <param name="providerAccountIds">Unique identifier for the provider account resource. This is created during account addition. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConsentResponse</returns>
        ConsentResponse GetConsents(string consentIds = default(string), string include = default(string), string providerAccountIds = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Consents
        /// </summary>
        /// <remarks>
        /// The get consent service is used to retrieve all the consents submitted to Yodlee. &lt;br&gt;The service can be used to build a manage consent interface or a consent dashboard to implement the renew and revoke consent flows.&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentIds">Consent Id generated through POST Consent. (optional)</param>
        /// <param name="include">The flag responsible to include renew details like sharing duration and reauthorization required (optional)</param>
        /// <param name="providerAccountIds">Unique identifier for the provider account resource. This is created during account addition. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConsentResponse</returns>
        ApiResponse<ConsentResponse> GetConsentsWithHttpInfo(string consentIds = default(string), string include = default(string), string providerAccountIds = default(string), int operationIndex = 0);
        /// <summary>
        /// Renew Consent
        /// </summary>
        /// <remarks>
        /// The consent renewal service is used to renew the consent by validating the consent state. This API supports both UK and AU Open Banking. &lt;/br&gt;&lt;b&gt;Renewing an UK Open Banking consent:&lt;/b&gt;&lt;br&gt;&lt;li&gt;Before the grace period of 90 days: The consent will be renewed using the third-party provider (TPP) renewal process that Yodlee does, and no consent reauthorisation is required.The API response will contain the complete renewed consent object.&lt;/li&gt;&lt;li&gt;After the grace period of 90 days: The API will provide an authorisation URL to redirect the user to the financial institution site to complete the consent reauthorization process.&lt;br&gt;&lt;b&gt;Renewing an AU Open Banking consent:&lt;/b&gt;&lt;br&gt;&lt;b&gt;consent duration days preference required consentParam&lt;/b&gt;&lt;br&gt;&lt;li&gt;Invoke this API, and in the API response, an authorisation URL will be provided to redirect the user to the financial institution site to complete the consent reauthorisation process.&lt;/li&gt;&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">Consent Id to be renewed.</param>
        /// <param name="renewConsentRequest">renewal entity from consent details service. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RenewConsentResponse</returns>
        RenewConsentResponse RenewConsent(long consentId, RenewConsentRequest renewConsentRequest = default(RenewConsentRequest), int operationIndex = 0);

        /// <summary>
        /// Renew Consent
        /// </summary>
        /// <remarks>
        /// The consent renewal service is used to renew the consent by validating the consent state. This API supports both UK and AU Open Banking. &lt;/br&gt;&lt;b&gt;Renewing an UK Open Banking consent:&lt;/b&gt;&lt;br&gt;&lt;li&gt;Before the grace period of 90 days: The consent will be renewed using the third-party provider (TPP) renewal process that Yodlee does, and no consent reauthorisation is required.The API response will contain the complete renewed consent object.&lt;/li&gt;&lt;li&gt;After the grace period of 90 days: The API will provide an authorisation URL to redirect the user to the financial institution site to complete the consent reauthorization process.&lt;br&gt;&lt;b&gt;Renewing an AU Open Banking consent:&lt;/b&gt;&lt;br&gt;&lt;b&gt;consent duration days preference required consentParam&lt;/b&gt;&lt;br&gt;&lt;li&gt;Invoke this API, and in the API response, an authorisation URL will be provided to redirect the user to the financial institution site to complete the consent reauthorisation process.&lt;/li&gt;&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">Consent Id to be renewed.</param>
        /// <param name="renewConsentRequest">renewal entity from consent details service. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RenewConsentResponse</returns>
        ApiResponse<RenewConsentResponse> RenewConsentWithHttpInfo(long consentId, RenewConsentRequest renewConsentRequest = default(RenewConsentRequest), int operationIndex = 0);
        /// <summary>
        /// Put Consent
        /// </summary>
        /// <remarks>
        /// The update consent service is used to capture the user acceptance of the consent presented to him or her. &lt;br/&gt;This service returns the authorization-redirect URL that should be used to display to the user, the bank&#39;s authentication interface.&lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">Consent Id generated through POST Consent.</param>
        /// <param name="consentRequest">Applicable Open Banking data cluster values.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdatedConsentResponse</returns>
        UpdatedConsentResponse UpdateConsent(long consentId, UpdateConsentRequest consentRequest, int operationIndex = 0);

        /// <summary>
        /// Put Consent
        /// </summary>
        /// <remarks>
        /// The update consent service is used to capture the user acceptance of the consent presented to him or her. &lt;br/&gt;This service returns the authorization-redirect URL that should be used to display to the user, the bank&#39;s authentication interface.&lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">Consent Id generated through POST Consent.</param>
        /// <param name="consentRequest">Applicable Open Banking data cluster values.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdatedConsentResponse</returns>
        ApiResponse<UpdatedConsentResponse> UpdateConsentWithHttpInfo(long consentId, UpdateConsentRequest consentRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConsentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Post Consent
        /// </summary>
        /// <remarks>
        /// The generate consent service is used to generate all the consent information and permissions associated to a provider. &lt;br/&gt;The scope provided in the response is based on the providerId and the datasets provided in the input. &lt;br/&gt;If no dataset value is provided, the datasets that are configured for the customer will be considered. &lt;br/&gt;The configured dataset can be overridden by providing the dataset as an input. &lt;br/&gt;If no applicationName is provided in the input, the default applicationName will be considered. &lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentRequest">Unique identifier for the provider site(mandatory), the name of the application,  &lt;br/&gt;the flag responsible to include html content in the response, &lt;br/&gt;when passed as true and the name of the dataset attribute supported by the provider.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatedConsentResponse</returns>
        System.Threading.Tasks.Task<CreatedConsentResponse> CreateConsentAsync(CreateConsentRequest consentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Post Consent
        /// </summary>
        /// <remarks>
        /// The generate consent service is used to generate all the consent information and permissions associated to a provider. &lt;br/&gt;The scope provided in the response is based on the providerId and the datasets provided in the input. &lt;br/&gt;If no dataset value is provided, the datasets that are configured for the customer will be considered. &lt;br/&gt;The configured dataset can be overridden by providing the dataset as an input. &lt;br/&gt;If no applicationName is provided in the input, the default applicationName will be considered. &lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentRequest">Unique identifier for the provider site(mandatory), the name of the application,  &lt;br/&gt;the flag responsible to include html content in the response, &lt;br/&gt;when passed as true and the name of the dataset attribute supported by the provider.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatedConsentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatedConsentResponse>> CreateConsentWithHttpInfoAsync(CreateConsentRequest consentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Authorization Details
        /// </summary>
        /// <remarks>
        /// The get authorization URL for consent service provides the authorization URL for the renew consent flow, within the consent dashboard.&lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">Consent Id generated through POST Consent.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdatedConsentResponse</returns>
        System.Threading.Tasks.Task<UpdatedConsentResponse> GetConsentDetailsAsync(long consentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Authorization Details
        /// </summary>
        /// <remarks>
        /// The get authorization URL for consent service provides the authorization URL for the renew consent flow, within the consent dashboard.&lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">Consent Id generated through POST Consent.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdatedConsentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedConsentResponse>> GetConsentDetailsWithHttpInfoAsync(long consentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Consents Preferences
        /// </summary>
        /// <remarks>
        /// This API service provides user&#39;s preferences for the consent
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">consentId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsentPreferencesResponse</returns>
        System.Threading.Tasks.Task<ConsentPreferencesResponse> GetConsentPreferencesAsync(string consentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Consents Preferences
        /// </summary>
        /// <remarks>
        /// This API service provides user&#39;s preferences for the consent
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">consentId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsentPreferencesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConsentPreferencesResponse>> GetConsentPreferencesWithHttpInfoAsync(string consentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Consents
        /// </summary>
        /// <remarks>
        /// The get consent service is used to retrieve all the consents submitted to Yodlee. &lt;br&gt;The service can be used to build a manage consent interface or a consent dashboard to implement the renew and revoke consent flows.&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentIds">Consent Id generated through POST Consent. (optional)</param>
        /// <param name="include">The flag responsible to include renew details like sharing duration and reauthorization required (optional)</param>
        /// <param name="providerAccountIds">Unique identifier for the provider account resource. This is created during account addition. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsentResponse</returns>
        System.Threading.Tasks.Task<ConsentResponse> GetConsentsAsync(string consentIds = default(string), string include = default(string), string providerAccountIds = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Consents
        /// </summary>
        /// <remarks>
        /// The get consent service is used to retrieve all the consents submitted to Yodlee. &lt;br&gt;The service can be used to build a manage consent interface or a consent dashboard to implement the renew and revoke consent flows.&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentIds">Consent Id generated through POST Consent. (optional)</param>
        /// <param name="include">The flag responsible to include renew details like sharing duration and reauthorization required (optional)</param>
        /// <param name="providerAccountIds">Unique identifier for the provider account resource. This is created during account addition. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConsentResponse>> GetConsentsWithHttpInfoAsync(string consentIds = default(string), string include = default(string), string providerAccountIds = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Renew Consent
        /// </summary>
        /// <remarks>
        /// The consent renewal service is used to renew the consent by validating the consent state. This API supports both UK and AU Open Banking. &lt;/br&gt;&lt;b&gt;Renewing an UK Open Banking consent:&lt;/b&gt;&lt;br&gt;&lt;li&gt;Before the grace period of 90 days: The consent will be renewed using the third-party provider (TPP) renewal process that Yodlee does, and no consent reauthorisation is required.The API response will contain the complete renewed consent object.&lt;/li&gt;&lt;li&gt;After the grace period of 90 days: The API will provide an authorisation URL to redirect the user to the financial institution site to complete the consent reauthorization process.&lt;br&gt;&lt;b&gt;Renewing an AU Open Banking consent:&lt;/b&gt;&lt;br&gt;&lt;b&gt;consent duration days preference required consentParam&lt;/b&gt;&lt;br&gt;&lt;li&gt;Invoke this API, and in the API response, an authorisation URL will be provided to redirect the user to the financial institution site to complete the consent reauthorisation process.&lt;/li&gt;&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">Consent Id to be renewed.</param>
        /// <param name="renewConsentRequest">renewal entity from consent details service. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RenewConsentResponse</returns>
        System.Threading.Tasks.Task<RenewConsentResponse> RenewConsentAsync(long consentId, RenewConsentRequest renewConsentRequest = default(RenewConsentRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Renew Consent
        /// </summary>
        /// <remarks>
        /// The consent renewal service is used to renew the consent by validating the consent state. This API supports both UK and AU Open Banking. &lt;/br&gt;&lt;b&gt;Renewing an UK Open Banking consent:&lt;/b&gt;&lt;br&gt;&lt;li&gt;Before the grace period of 90 days: The consent will be renewed using the third-party provider (TPP) renewal process that Yodlee does, and no consent reauthorisation is required.The API response will contain the complete renewed consent object.&lt;/li&gt;&lt;li&gt;After the grace period of 90 days: The API will provide an authorisation URL to redirect the user to the financial institution site to complete the consent reauthorization process.&lt;br&gt;&lt;b&gt;Renewing an AU Open Banking consent:&lt;/b&gt;&lt;br&gt;&lt;b&gt;consent duration days preference required consentParam&lt;/b&gt;&lt;br&gt;&lt;li&gt;Invoke this API, and in the API response, an authorisation URL will be provided to redirect the user to the financial institution site to complete the consent reauthorisation process.&lt;/li&gt;&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">Consent Id to be renewed.</param>
        /// <param name="renewConsentRequest">renewal entity from consent details service. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RenewConsentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RenewConsentResponse>> RenewConsentWithHttpInfoAsync(long consentId, RenewConsentRequest renewConsentRequest = default(RenewConsentRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Put Consent
        /// </summary>
        /// <remarks>
        /// The update consent service is used to capture the user acceptance of the consent presented to him or her. &lt;br/&gt;This service returns the authorization-redirect URL that should be used to display to the user, the bank&#39;s authentication interface.&lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">Consent Id generated through POST Consent.</param>
        /// <param name="consentRequest">Applicable Open Banking data cluster values.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdatedConsentResponse</returns>
        System.Threading.Tasks.Task<UpdatedConsentResponse> UpdateConsentAsync(long consentId, UpdateConsentRequest consentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Put Consent
        /// </summary>
        /// <remarks>
        /// The update consent service is used to capture the user acceptance of the consent presented to him or her. &lt;br/&gt;This service returns the authorization-redirect URL that should be used to display to the user, the bank&#39;s authentication interface.&lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">Consent Id generated through POST Consent.</param>
        /// <param name="consentRequest">Applicable Open Banking data cluster values.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdatedConsentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedConsentResponse>> UpdateConsentWithHttpInfoAsync(long consentId, UpdateConsentRequest consentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConsentsApi : IConsentsApiSync, IConsentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConsentsApi : IConsentsApi
    {
        private Yodlee.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConsentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConsentsApi(string basePath)
        {
            this.Configuration = Yodlee.ApiClient.Client.Configuration.MergeConfigurations(
                Yodlee.ApiClient.Client.GlobalConfiguration.Instance,
                new Yodlee.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yodlee.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConsentsApi(Yodlee.ApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yodlee.ApiClient.Client.Configuration.MergeConfigurations(
                Yodlee.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yodlee.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ConsentsApi(Yodlee.ApiClient.Client.ISynchronousClient client, Yodlee.ApiClient.Client.IAsynchronousClient asyncClient, Yodlee.ApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yodlee.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yodlee.ApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yodlee.ApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yodlee.ApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yodlee.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Post Consent The generate consent service is used to generate all the consent information and permissions associated to a provider. &lt;br/&gt;The scope provided in the response is based on the providerId and the datasets provided in the input. &lt;br/&gt;If no dataset value is provided, the datasets that are configured for the customer will be considered. &lt;br/&gt;The configured dataset can be overridden by providing the dataset as an input. &lt;br/&gt;If no applicationName is provided in the input, the default applicationName will be considered. &lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentRequest">Unique identifier for the provider site(mandatory), the name of the application,  &lt;br/&gt;the flag responsible to include html content in the response, &lt;br/&gt;when passed as true and the name of the dataset attribute supported by the provider.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreatedConsentResponse</returns>
        public CreatedConsentResponse CreateConsent(CreateConsentRequest consentRequest, int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<CreatedConsentResponse> localVarResponse = CreateConsentWithHttpInfo(consentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Post Consent The generate consent service is used to generate all the consent information and permissions associated to a provider. &lt;br/&gt;The scope provided in the response is based on the providerId and the datasets provided in the input. &lt;br/&gt;If no dataset value is provided, the datasets that are configured for the customer will be considered. &lt;br/&gt;The configured dataset can be overridden by providing the dataset as an input. &lt;br/&gt;If no applicationName is provided in the input, the default applicationName will be considered. &lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentRequest">Unique identifier for the provider site(mandatory), the name of the application,  &lt;br/&gt;the flag responsible to include html content in the response, &lt;br/&gt;when passed as true and the name of the dataset attribute supported by the provider.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreatedConsentResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<CreatedConsentResponse> CreateConsentWithHttpInfo(CreateConsentRequest consentRequest, int operationIndex = 0)
        {
            // verify the required parameter 'consentRequest' is set
            if (consentRequest == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'consentRequest' when calling ConsentsApi->CreateConsent");
            }

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = consentRequest;

            localVarRequestOptions.Operation = "ConsentsApi.CreateConsent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreatedConsentResponse>("/consents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateConsent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Post Consent The generate consent service is used to generate all the consent information and permissions associated to a provider. &lt;br/&gt;The scope provided in the response is based on the providerId and the datasets provided in the input. &lt;br/&gt;If no dataset value is provided, the datasets that are configured for the customer will be considered. &lt;br/&gt;The configured dataset can be overridden by providing the dataset as an input. &lt;br/&gt;If no applicationName is provided in the input, the default applicationName will be considered. &lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentRequest">Unique identifier for the provider site(mandatory), the name of the application,  &lt;br/&gt;the flag responsible to include html content in the response, &lt;br/&gt;when passed as true and the name of the dataset attribute supported by the provider.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatedConsentResponse</returns>
        public async System.Threading.Tasks.Task<CreatedConsentResponse> CreateConsentAsync(CreateConsentRequest consentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<CreatedConsentResponse> localVarResponse = await CreateConsentWithHttpInfoAsync(consentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Post Consent The generate consent service is used to generate all the consent information and permissions associated to a provider. &lt;br/&gt;The scope provided in the response is based on the providerId and the datasets provided in the input. &lt;br/&gt;If no dataset value is provided, the datasets that are configured for the customer will be considered. &lt;br/&gt;The configured dataset can be overridden by providing the dataset as an input. &lt;br/&gt;If no applicationName is provided in the input, the default applicationName will be considered. &lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentRequest">Unique identifier for the provider site(mandatory), the name of the application,  &lt;br/&gt;the flag responsible to include html content in the response, &lt;br/&gt;when passed as true and the name of the dataset attribute supported by the provider.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatedConsentResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<CreatedConsentResponse>> CreateConsentWithHttpInfoAsync(CreateConsentRequest consentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentRequest' is set
            if (consentRequest == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'consentRequest' when calling ConsentsApi->CreateConsent");
            }


            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = consentRequest;

            localVarRequestOptions.Operation = "ConsentsApi.CreateConsent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreatedConsentResponse>("/consents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateConsent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Authorization Details The get authorization URL for consent service provides the authorization URL for the renew consent flow, within the consent dashboard.&lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">Consent Id generated through POST Consent.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdatedConsentResponse</returns>
        public UpdatedConsentResponse GetConsentDetails(long consentId, int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<UpdatedConsentResponse> localVarResponse = GetConsentDetailsWithHttpInfo(consentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Authorization Details The get authorization URL for consent service provides the authorization URL for the renew consent flow, within the consent dashboard.&lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">Consent Id generated through POST Consent.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdatedConsentResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<UpdatedConsentResponse> GetConsentDetailsWithHttpInfo(long consentId, int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(consentId)); // path parameter

            localVarRequestOptions.Operation = "ConsentsApi.GetConsentDetails";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<UpdatedConsentResponse>("/consents/{consentId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConsentDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Authorization Details The get authorization URL for consent service provides the authorization URL for the renew consent flow, within the consent dashboard.&lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">Consent Id generated through POST Consent.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdatedConsentResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedConsentResponse> GetConsentDetailsAsync(long consentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<UpdatedConsentResponse> localVarResponse = await GetConsentDetailsWithHttpInfoAsync(consentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Authorization Details The get authorization URL for consent service provides the authorization URL for the renew consent flow, within the consent dashboard.&lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">Consent Id generated through POST Consent.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdatedConsentResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<UpdatedConsentResponse>> GetConsentDetailsWithHttpInfoAsync(long consentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(consentId)); // path parameter

            localVarRequestOptions.Operation = "ConsentsApi.GetConsentDetails";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UpdatedConsentResponse>("/consents/{consentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConsentDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Consents Preferences This API service provides user&#39;s preferences for the consent
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">consentId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConsentPreferencesResponse</returns>
        public ConsentPreferencesResponse GetConsentPreferences(string consentId, int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<ConsentPreferencesResponse> localVarResponse = GetConsentPreferencesWithHttpInfo(consentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Consents Preferences This API service provides user&#39;s preferences for the consent
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">consentId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConsentPreferencesResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<ConsentPreferencesResponse> GetConsentPreferencesWithHttpInfo(string consentId, int operationIndex = 0)
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'consentId' when calling ConsentsApi->GetConsentPreferences");
            }

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "consentId", consentId));

            localVarRequestOptions.Operation = "ConsentsApi.GetConsentPreferences";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ConsentPreferencesResponse>("/consents/preferences", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConsentPreferences", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Consents Preferences This API service provides user&#39;s preferences for the consent
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">consentId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsentPreferencesResponse</returns>
        public async System.Threading.Tasks.Task<ConsentPreferencesResponse> GetConsentPreferencesAsync(string consentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<ConsentPreferencesResponse> localVarResponse = await GetConsentPreferencesWithHttpInfoAsync(consentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Consents Preferences This API service provides user&#39;s preferences for the consent
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">consentId</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsentPreferencesResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<ConsentPreferencesResponse>> GetConsentPreferencesWithHttpInfoAsync(string consentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentId' is set
            if (consentId == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'consentId' when calling ConsentsApi->GetConsentPreferences");
            }


            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "consentId", consentId));

            localVarRequestOptions.Operation = "ConsentsApi.GetConsentPreferences";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConsentPreferencesResponse>("/consents/preferences", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConsentPreferences", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Consents The get consent service is used to retrieve all the consents submitted to Yodlee. &lt;br&gt;The service can be used to build a manage consent interface or a consent dashboard to implement the renew and revoke consent flows.&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentIds">Consent Id generated through POST Consent. (optional)</param>
        /// <param name="include">The flag responsible to include renew details like sharing duration and reauthorization required (optional)</param>
        /// <param name="providerAccountIds">Unique identifier for the provider account resource. This is created during account addition. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConsentResponse</returns>
        public ConsentResponse GetConsents(string consentIds = default(string), string include = default(string), string providerAccountIds = default(string), int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<ConsentResponse> localVarResponse = GetConsentsWithHttpInfo(consentIds, include, providerAccountIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Consents The get consent service is used to retrieve all the consents submitted to Yodlee. &lt;br&gt;The service can be used to build a manage consent interface or a consent dashboard to implement the renew and revoke consent flows.&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentIds">Consent Id generated through POST Consent. (optional)</param>
        /// <param name="include">The flag responsible to include renew details like sharing duration and reauthorization required (optional)</param>
        /// <param name="providerAccountIds">Unique identifier for the provider account resource. This is created during account addition. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConsentResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<ConsentResponse> GetConsentsWithHttpInfo(string consentIds = default(string), string include = default(string), string providerAccountIds = default(string), int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (consentIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "consentIds", consentIds));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            if (providerAccountIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "providerAccountIds", providerAccountIds));
            }

            localVarRequestOptions.Operation = "ConsentsApi.GetConsents";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ConsentResponse>("/consents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConsents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Consents The get consent service is used to retrieve all the consents submitted to Yodlee. &lt;br&gt;The service can be used to build a manage consent interface or a consent dashboard to implement the renew and revoke consent flows.&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentIds">Consent Id generated through POST Consent. (optional)</param>
        /// <param name="include">The flag responsible to include renew details like sharing duration and reauthorization required (optional)</param>
        /// <param name="providerAccountIds">Unique identifier for the provider account resource. This is created during account addition. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsentResponse</returns>
        public async System.Threading.Tasks.Task<ConsentResponse> GetConsentsAsync(string consentIds = default(string), string include = default(string), string providerAccountIds = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<ConsentResponse> localVarResponse = await GetConsentsWithHttpInfoAsync(consentIds, include, providerAccountIds, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Consents The get consent service is used to retrieve all the consents submitted to Yodlee. &lt;br&gt;The service can be used to build a manage consent interface or a consent dashboard to implement the renew and revoke consent flows.&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentIds">Consent Id generated through POST Consent. (optional)</param>
        /// <param name="include">The flag responsible to include renew details like sharing duration and reauthorization required (optional)</param>
        /// <param name="providerAccountIds">Unique identifier for the provider account resource. This is created during account addition. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsentResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<ConsentResponse>> GetConsentsWithHttpInfoAsync(string consentIds = default(string), string include = default(string), string providerAccountIds = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (consentIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "consentIds", consentIds));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            if (providerAccountIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Yodlee.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "providerAccountIds", providerAccountIds));
            }

            localVarRequestOptions.Operation = "ConsentsApi.GetConsents";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConsentResponse>("/consents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConsents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Renew Consent The consent renewal service is used to renew the consent by validating the consent state. This API supports both UK and AU Open Banking. &lt;/br&gt;&lt;b&gt;Renewing an UK Open Banking consent:&lt;/b&gt;&lt;br&gt;&lt;li&gt;Before the grace period of 90 days: The consent will be renewed using the third-party provider (TPP) renewal process that Yodlee does, and no consent reauthorisation is required.The API response will contain the complete renewed consent object.&lt;/li&gt;&lt;li&gt;After the grace period of 90 days: The API will provide an authorisation URL to redirect the user to the financial institution site to complete the consent reauthorization process.&lt;br&gt;&lt;b&gt;Renewing an AU Open Banking consent:&lt;/b&gt;&lt;br&gt;&lt;b&gt;consent duration days preference required consentParam&lt;/b&gt;&lt;br&gt;&lt;li&gt;Invoke this API, and in the API response, an authorisation URL will be provided to redirect the user to the financial institution site to complete the consent reauthorisation process.&lt;/li&gt;&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">Consent Id to be renewed.</param>
        /// <param name="renewConsentRequest">renewal entity from consent details service. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RenewConsentResponse</returns>
        public RenewConsentResponse RenewConsent(long consentId, RenewConsentRequest renewConsentRequest = default(RenewConsentRequest), int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<RenewConsentResponse> localVarResponse = RenewConsentWithHttpInfo(consentId, renewConsentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Renew Consent The consent renewal service is used to renew the consent by validating the consent state. This API supports both UK and AU Open Banking. &lt;/br&gt;&lt;b&gt;Renewing an UK Open Banking consent:&lt;/b&gt;&lt;br&gt;&lt;li&gt;Before the grace period of 90 days: The consent will be renewed using the third-party provider (TPP) renewal process that Yodlee does, and no consent reauthorisation is required.The API response will contain the complete renewed consent object.&lt;/li&gt;&lt;li&gt;After the grace period of 90 days: The API will provide an authorisation URL to redirect the user to the financial institution site to complete the consent reauthorization process.&lt;br&gt;&lt;b&gt;Renewing an AU Open Banking consent:&lt;/b&gt;&lt;br&gt;&lt;b&gt;consent duration days preference required consentParam&lt;/b&gt;&lt;br&gt;&lt;li&gt;Invoke this API, and in the API response, an authorisation URL will be provided to redirect the user to the financial institution site to complete the consent reauthorisation process.&lt;/li&gt;&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">Consent Id to be renewed.</param>
        /// <param name="renewConsentRequest">renewal entity from consent details service. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RenewConsentResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<RenewConsentResponse> RenewConsentWithHttpInfo(long consentId, RenewConsentRequest renewConsentRequest = default(RenewConsentRequest), int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.Data = renewConsentRequest;

            localVarRequestOptions.Operation = "ConsentsApi.RenewConsent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<RenewConsentResponse>("/consents/{consentId}/renewal", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenewConsent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Renew Consent The consent renewal service is used to renew the consent by validating the consent state. This API supports both UK and AU Open Banking. &lt;/br&gt;&lt;b&gt;Renewing an UK Open Banking consent:&lt;/b&gt;&lt;br&gt;&lt;li&gt;Before the grace period of 90 days: The consent will be renewed using the third-party provider (TPP) renewal process that Yodlee does, and no consent reauthorisation is required.The API response will contain the complete renewed consent object.&lt;/li&gt;&lt;li&gt;After the grace period of 90 days: The API will provide an authorisation URL to redirect the user to the financial institution site to complete the consent reauthorization process.&lt;br&gt;&lt;b&gt;Renewing an AU Open Banking consent:&lt;/b&gt;&lt;br&gt;&lt;b&gt;consent duration days preference required consentParam&lt;/b&gt;&lt;br&gt;&lt;li&gt;Invoke this API, and in the API response, an authorisation URL will be provided to redirect the user to the financial institution site to complete the consent reauthorisation process.&lt;/li&gt;&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">Consent Id to be renewed.</param>
        /// <param name="renewConsentRequest">renewal entity from consent details service. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RenewConsentResponse</returns>
        public async System.Threading.Tasks.Task<RenewConsentResponse> RenewConsentAsync(long consentId, RenewConsentRequest renewConsentRequest = default(RenewConsentRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<RenewConsentResponse> localVarResponse = await RenewConsentWithHttpInfoAsync(consentId, renewConsentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Renew Consent The consent renewal service is used to renew the consent by validating the consent state. This API supports both UK and AU Open Banking. &lt;/br&gt;&lt;b&gt;Renewing an UK Open Banking consent:&lt;/b&gt;&lt;br&gt;&lt;li&gt;Before the grace period of 90 days: The consent will be renewed using the third-party provider (TPP) renewal process that Yodlee does, and no consent reauthorisation is required.The API response will contain the complete renewed consent object.&lt;/li&gt;&lt;li&gt;After the grace period of 90 days: The API will provide an authorisation URL to redirect the user to the financial institution site to complete the consent reauthorization process.&lt;br&gt;&lt;b&gt;Renewing an AU Open Banking consent:&lt;/b&gt;&lt;br&gt;&lt;b&gt;consent duration days preference required consentParam&lt;/b&gt;&lt;br&gt;&lt;li&gt;Invoke this API, and in the API response, an authorisation URL will be provided to redirect the user to the financial institution site to complete the consent reauthorisation process.&lt;/li&gt;&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">Consent Id to be renewed.</param>
        /// <param name="renewConsentRequest">renewal entity from consent details service. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RenewConsentResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<RenewConsentResponse>> RenewConsentWithHttpInfoAsync(long consentId, RenewConsentRequest renewConsentRequest = default(RenewConsentRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.Data = renewConsentRequest;

            localVarRequestOptions.Operation = "ConsentsApi.RenewConsent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<RenewConsentResponse>("/consents/{consentId}/renewal", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenewConsent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Put Consent The update consent service is used to capture the user acceptance of the consent presented to him or her. &lt;br/&gt;This service returns the authorization-redirect URL that should be used to display to the user, the bank&#39;s authentication interface.&lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">Consent Id generated through POST Consent.</param>
        /// <param name="consentRequest">Applicable Open Banking data cluster values.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdatedConsentResponse</returns>
        public UpdatedConsentResponse UpdateConsent(long consentId, UpdateConsentRequest consentRequest, int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<UpdatedConsentResponse> localVarResponse = UpdateConsentWithHttpInfo(consentId, consentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Put Consent The update consent service is used to capture the user acceptance of the consent presented to him or her. &lt;br/&gt;This service returns the authorization-redirect URL that should be used to display to the user, the bank&#39;s authentication interface.&lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">Consent Id generated through POST Consent.</param>
        /// <param name="consentRequest">Applicable Open Banking data cluster values.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdatedConsentResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<UpdatedConsentResponse> UpdateConsentWithHttpInfo(long consentId, UpdateConsentRequest consentRequest, int operationIndex = 0)
        {
            // verify the required parameter 'consentRequest' is set
            if (consentRequest == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'consentRequest' when calling ConsentsApi->UpdateConsent");
            }

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.Data = consentRequest;

            localVarRequestOptions.Operation = "ConsentsApi.UpdateConsent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<UpdatedConsentResponse>("/consents/{consentId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateConsent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Put Consent The update consent service is used to capture the user acceptance of the consent presented to him or her. &lt;br/&gt;This service returns the authorization-redirect URL that should be used to display to the user, the bank&#39;s authentication interface.&lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">Consent Id generated through POST Consent.</param>
        /// <param name="consentRequest">Applicable Open Banking data cluster values.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdatedConsentResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedConsentResponse> UpdateConsentAsync(long consentId, UpdateConsentRequest consentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<UpdatedConsentResponse> localVarResponse = await UpdateConsentWithHttpInfoAsync(consentId, consentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Put Consent The update consent service is used to capture the user acceptance of the consent presented to him or her. &lt;br/&gt;This service returns the authorization-redirect URL that should be used to display to the user, the bank&#39;s authentication interface.&lt;b&gt;Note:&lt;/b&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">Consent Id generated through POST Consent.</param>
        /// <param name="consentRequest">Applicable Open Banking data cluster values.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdatedConsentResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<UpdatedConsentResponse>> UpdateConsentWithHttpInfoAsync(long consentId, UpdateConsentRequest consentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentRequest' is set
            if (consentRequest == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'consentRequest' when calling ConsentsApi->UpdateConsent");
            }


            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consentId", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            localVarRequestOptions.Data = consentRequest;

            localVarRequestOptions.Operation = "ConsentsApi.UpdateConsent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<UpdatedConsentResponse>("/consents/{consentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateConsent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
