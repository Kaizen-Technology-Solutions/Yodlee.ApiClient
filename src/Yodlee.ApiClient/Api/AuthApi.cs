/*
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Yodlee.ApiClient.Client;
using Yodlee.ApiClient.Model;

namespace Yodlee.ApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete API Key
        /// </summary>
        /// <remarks>
        /// This endpoint allows an existing API key to be deleted.&lt;br&gt;You can use one of the following authorization methods to access this API:&lt;br&gt;&lt;ol&gt;&lt;li&gt;cobsession&lt;/li&gt;&lt;li&gt;JWT token&lt;/li&gt;&lt;/ol&gt; &lt;b&gt;Notes:&lt;/b&gt; &lt;li&gt;This service is not available in developer sandbox environment and will be made availablefor testing in your dedicated environment. 
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteApiKey(string key, int operationIndex = 0);

        /// <summary>
        /// Delete API Key
        /// </summary>
        /// <remarks>
        /// This endpoint allows an existing API key to be deleted.&lt;br&gt;You can use one of the following authorization methods to access this API:&lt;br&gt;&lt;ol&gt;&lt;li&gt;cobsession&lt;/li&gt;&lt;li&gt;JWT token&lt;/li&gt;&lt;/ol&gt; &lt;b&gt;Notes:&lt;/b&gt; &lt;li&gt;This service is not available in developer sandbox environment and will be made availablefor testing in your dedicated environment. 
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteApiKeyWithHttpInfo(string key, int operationIndex = 0);
        /// <summary>
        /// Delete Token
        /// </summary>
        /// <remarks>
        /// This endpoint revokes the token passed in the Authorization header. This service is applicable for JWT-based (and all API key-based) authentication and also client credential (clientId and secret) based authentication. This service does not return a response body. The HTTP response code is 204 (success with no content). &lt;br&gt;Tokens generally have limited lifetime of up to 30 minutes. You will call this service when you finish working with one user, and you want to delete the valid token rather than simply letting it expire.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;Revoking an access token (either type, admin or a user token) can take up to 2 minutes, as the tokens are stored on a distributed system.&lt;br/&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteToken(int operationIndex = 0);

        /// <summary>
        /// Delete Token
        /// </summary>
        /// <remarks>
        /// This endpoint revokes the token passed in the Authorization header. This service is applicable for JWT-based (and all API key-based) authentication and also client credential (clientId and secret) based authentication. This service does not return a response body. The HTTP response code is 204 (success with no content). &lt;br&gt;Tokens generally have limited lifetime of up to 30 minutes. You will call this service when you finish working with one user, and you want to delete the valid token rather than simply letting it expire.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;Revoking an access token (either type, admin or a user token) can take up to 2 minutes, as the tokens are stored on a distributed system.&lt;br/&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTokenWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Generate Access Token
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;Generate Access Token using client credential authentication.&lt;/b&gt;&lt;br&gt;This service returns access tokens required to access Yodlee 1.1 APIs. These tokens are the simplest and easiest of several alternatives for authenticating with Yodlee servers.&lt;br&gt;The most commonly used services obtain data specific to an end user (your customer). For these services, you need a &lt;b&gt;user access token&lt;/b&gt;. These are simply tokens created with the user name parameter (&lt;b&gt;loginName&lt;/b&gt;) set to the id of your end user.  &lt;i&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; You determine this id and you must ensure it&#39;s unique among all your customers.&lt;/i&gt; &lt;br&gt;&lt;br&gt;Each token issued has an associated user. The token passed in the http headers explicitly names the user referenced in that API call.&lt;br&gt;&lt;br&gt;Some of the APIs do administrative work, and don&#39;t reference an end user. &lt;br/&gt;One example of administrative work is key management. Another example is registering a new user explicitly, with &lt;b&gt;POST /user/register&lt;/b&gt; call or subscribe to webhook, with &lt;b&gt;POST /config/notifications/events/{eventName}&lt;/b&gt;. &lt;br/&gt;To invoke these, you need an &lt;b&gt;admin access token&lt;/b&gt;. Create this by passing in your admin user login name in place of a regular user name.&lt;br&gt;&lt;br&gt;This service also allows for simplified registration of new users. Any time you pass in a user name not already in use, the system will automatically implicitly create a new user for you. &lt;br&gt;This user will naturally have very few associated details. You can later provide additional user information by calling the &lt;b&gt;PUT user/register service&lt;/b&gt;.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;The header &lt;code&gt;Authorization&lt;/code&gt; does not apply to this service.&lt;/li&gt;&lt;li&gt;The content type has to be passed as application/x-www-form-urlencoded.&lt;li&gt;Upgrading to client credential authentication requires infrastructure reconfiguration. &lt;li&gt;Customers wishing to switch from another authentication scheme to client credential authentication, please contact Yodlee Client Services.&lt;/li&gt;&lt;li&gt;Default expiry time of user access token and admin access token is 30 minutes.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">clientId issued by Yodlee is used to generate the OAuth token for authentication. (optional)</param>
        /// <param name="secret">secret issued by Yodlee is used to generate the OAuth token for authentication. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientCredentialTokenResponse</returns>
        ClientCredentialTokenResponse GenerateAccessToken(string clientId = default(string), string secret = default(string), int operationIndex = 0);

        /// <summary>
        /// Generate Access Token
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;Generate Access Token using client credential authentication.&lt;/b&gt;&lt;br&gt;This service returns access tokens required to access Yodlee 1.1 APIs. These tokens are the simplest and easiest of several alternatives for authenticating with Yodlee servers.&lt;br&gt;The most commonly used services obtain data specific to an end user (your customer). For these services, you need a &lt;b&gt;user access token&lt;/b&gt;. These are simply tokens created with the user name parameter (&lt;b&gt;loginName&lt;/b&gt;) set to the id of your end user.  &lt;i&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; You determine this id and you must ensure it&#39;s unique among all your customers.&lt;/i&gt; &lt;br&gt;&lt;br&gt;Each token issued has an associated user. The token passed in the http headers explicitly names the user referenced in that API call.&lt;br&gt;&lt;br&gt;Some of the APIs do administrative work, and don&#39;t reference an end user. &lt;br/&gt;One example of administrative work is key management. Another example is registering a new user explicitly, with &lt;b&gt;POST /user/register&lt;/b&gt; call or subscribe to webhook, with &lt;b&gt;POST /config/notifications/events/{eventName}&lt;/b&gt;. &lt;br/&gt;To invoke these, you need an &lt;b&gt;admin access token&lt;/b&gt;. Create this by passing in your admin user login name in place of a regular user name.&lt;br&gt;&lt;br&gt;This service also allows for simplified registration of new users. Any time you pass in a user name not already in use, the system will automatically implicitly create a new user for you. &lt;br&gt;This user will naturally have very few associated details. You can later provide additional user information by calling the &lt;b&gt;PUT user/register service&lt;/b&gt;.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;The header &lt;code&gt;Authorization&lt;/code&gt; does not apply to this service.&lt;/li&gt;&lt;li&gt;The content type has to be passed as application/x-www-form-urlencoded.&lt;li&gt;Upgrading to client credential authentication requires infrastructure reconfiguration. &lt;li&gt;Customers wishing to switch from another authentication scheme to client credential authentication, please contact Yodlee Client Services.&lt;/li&gt;&lt;li&gt;Default expiry time of user access token and admin access token is 30 minutes.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">clientId issued by Yodlee is used to generate the OAuth token for authentication. (optional)</param>
        /// <param name="secret">secret issued by Yodlee is used to generate the OAuth token for authentication. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientCredentialTokenResponse</returns>
        ApiResponse<ClientCredentialTokenResponse> GenerateAccessTokenWithHttpInfo(string clientId = default(string), string secret = default(string), int operationIndex = 0);
        /// <summary>
        /// Generate API Key
        /// </summary>
        /// <remarks>
        /// This endpoint is used to generate an API key. The RSA public key you provide should be in 2048 bit PKCS#8 encoded format. &lt;br&gt;A public key is a mandatory input for generating the API key.&lt;br/&gt;The public key should be a unique key. The apiKeyId you get in the response is what you should use to generate the JWT token.&lt;br&gt; You can use one of the following authorization methods to access&lt;br/&gt;this API:&lt;br&gt;&lt;ol&gt;&lt;li&gt;cobsession&lt;/li&gt;&lt;li&gt;JWT token&lt;/li&gt;&lt;/ol&gt; Alternatively, you can use base 64 encoded cobrandLogin and cobrandPassword in the Authorization header (Format: Authorization: Basic &lt;encoded value of cobrandLogin: cobrandPassword&gt;)&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;br&gt;&lt;li&gt;This service is not available in developer sandbox environment and will be made available for testing in your dedicated environment. The content type has to be passed as application/json for the body parameter.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyRequest">apiKeyRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiKeyResponse</returns>
        ApiKeyResponse GenerateApiKey(ApiKeyRequest apiKeyRequest, int operationIndex = 0);

        /// <summary>
        /// Generate API Key
        /// </summary>
        /// <remarks>
        /// This endpoint is used to generate an API key. The RSA public key you provide should be in 2048 bit PKCS#8 encoded format. &lt;br&gt;A public key is a mandatory input for generating the API key.&lt;br/&gt;The public key should be a unique key. The apiKeyId you get in the response is what you should use to generate the JWT token.&lt;br&gt; You can use one of the following authorization methods to access&lt;br/&gt;this API:&lt;br&gt;&lt;ol&gt;&lt;li&gt;cobsession&lt;/li&gt;&lt;li&gt;JWT token&lt;/li&gt;&lt;/ol&gt; Alternatively, you can use base 64 encoded cobrandLogin and cobrandPassword in the Authorization header (Format: Authorization: Basic &lt;encoded value of cobrandLogin: cobrandPassword&gt;)&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;br&gt;&lt;li&gt;This service is not available in developer sandbox environment and will be made available for testing in your dedicated environment. The content type has to be passed as application/json for the body parameter.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyRequest">apiKeyRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiKeyResponse</returns>
        ApiResponse<ApiKeyResponse> GenerateApiKeyWithHttpInfo(ApiKeyRequest apiKeyRequest, int operationIndex = 0);
        /// <summary>
        /// Get API Keys
        /// </summary>
        /// <remarks>
        /// This endpoint provides the list of API keys that exist for a customer.&lt;br&gt;You can use one of the following authorization methods to access this API:&lt;br&gt;&lt;ol&gt;&lt;li&gt;cobsession&lt;/li&gt;&lt;li&gt;JWT token&lt;/li&gt;&lt;/ol&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This service is not available in developer sandbox environment and will be made available for testing in your dedicated environment. 
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiKeyResponse</returns>
        ApiKeyResponse GetApiKeys(int operationIndex = 0);

        /// <summary>
        /// Get API Keys
        /// </summary>
        /// <remarks>
        /// This endpoint provides the list of API keys that exist for a customer.&lt;br&gt;You can use one of the following authorization methods to access this API:&lt;br&gt;&lt;ol&gt;&lt;li&gt;cobsession&lt;/li&gt;&lt;li&gt;JWT token&lt;/li&gt;&lt;/ol&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This service is not available in developer sandbox environment and will be made available for testing in your dedicated environment. 
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiKeyResponse</returns>
        ApiResponse<ApiKeyResponse> GetApiKeysWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete API Key
        /// </summary>
        /// <remarks>
        /// This endpoint allows an existing API key to be deleted.&lt;br&gt;You can use one of the following authorization methods to access this API:&lt;br&gt;&lt;ol&gt;&lt;li&gt;cobsession&lt;/li&gt;&lt;li&gt;JWT token&lt;/li&gt;&lt;/ol&gt; &lt;b&gt;Notes:&lt;/b&gt; &lt;li&gt;This service is not available in developer sandbox environment and will be made availablefor testing in your dedicated environment. 
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteApiKeyAsync(string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete API Key
        /// </summary>
        /// <remarks>
        /// This endpoint allows an existing API key to be deleted.&lt;br&gt;You can use one of the following authorization methods to access this API:&lt;br&gt;&lt;ol&gt;&lt;li&gt;cobsession&lt;/li&gt;&lt;li&gt;JWT token&lt;/li&gt;&lt;/ol&gt; &lt;b&gt;Notes:&lt;/b&gt; &lt;li&gt;This service is not available in developer sandbox environment and will be made availablefor testing in your dedicated environment. 
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApiKeyWithHttpInfoAsync(string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Token
        /// </summary>
        /// <remarks>
        /// This endpoint revokes the token passed in the Authorization header. This service is applicable for JWT-based (and all API key-based) authentication and also client credential (clientId and secret) based authentication. This service does not return a response body. The HTTP response code is 204 (success with no content). &lt;br&gt;Tokens generally have limited lifetime of up to 30 minutes. You will call this service when you finish working with one user, and you want to delete the valid token rather than simply letting it expire.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;Revoking an access token (either type, admin or a user token) can take up to 2 minutes, as the tokens are stored on a distributed system.&lt;br/&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTokenAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Token
        /// </summary>
        /// <remarks>
        /// This endpoint revokes the token passed in the Authorization header. This service is applicable for JWT-based (and all API key-based) authentication and also client credential (clientId and secret) based authentication. This service does not return a response body. The HTTP response code is 204 (success with no content). &lt;br&gt;Tokens generally have limited lifetime of up to 30 minutes. You will call this service when you finish working with one user, and you want to delete the valid token rather than simply letting it expire.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;Revoking an access token (either type, admin or a user token) can take up to 2 minutes, as the tokens are stored on a distributed system.&lt;br/&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTokenWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate Access Token
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;Generate Access Token using client credential authentication.&lt;/b&gt;&lt;br&gt;This service returns access tokens required to access Yodlee 1.1 APIs. These tokens are the simplest and easiest of several alternatives for authenticating with Yodlee servers.&lt;br&gt;The most commonly used services obtain data specific to an end user (your customer). For these services, you need a &lt;b&gt;user access token&lt;/b&gt;. These are simply tokens created with the user name parameter (&lt;b&gt;loginName&lt;/b&gt;) set to the id of your end user.  &lt;i&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; You determine this id and you must ensure it&#39;s unique among all your customers.&lt;/i&gt; &lt;br&gt;&lt;br&gt;Each token issued has an associated user. The token passed in the http headers explicitly names the user referenced in that API call.&lt;br&gt;&lt;br&gt;Some of the APIs do administrative work, and don&#39;t reference an end user. &lt;br/&gt;One example of administrative work is key management. Another example is registering a new user explicitly, with &lt;b&gt;POST /user/register&lt;/b&gt; call or subscribe to webhook, with &lt;b&gt;POST /config/notifications/events/{eventName}&lt;/b&gt;. &lt;br/&gt;To invoke these, you need an &lt;b&gt;admin access token&lt;/b&gt;. Create this by passing in your admin user login name in place of a regular user name.&lt;br&gt;&lt;br&gt;This service also allows for simplified registration of new users. Any time you pass in a user name not already in use, the system will automatically implicitly create a new user for you. &lt;br&gt;This user will naturally have very few associated details. You can later provide additional user information by calling the &lt;b&gt;PUT user/register service&lt;/b&gt;.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;The header &lt;code&gt;Authorization&lt;/code&gt; does not apply to this service.&lt;/li&gt;&lt;li&gt;The content type has to be passed as application/x-www-form-urlencoded.&lt;li&gt;Upgrading to client credential authentication requires infrastructure reconfiguration. &lt;li&gt;Customers wishing to switch from another authentication scheme to client credential authentication, please contact Yodlee Client Services.&lt;/li&gt;&lt;li&gt;Default expiry time of user access token and admin access token is 30 minutes.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">clientId issued by Yodlee is used to generate the OAuth token for authentication. (optional)</param>
        /// <param name="secret">secret issued by Yodlee is used to generate the OAuth token for authentication. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientCredentialTokenResponse</returns>
        System.Threading.Tasks.Task<ClientCredentialTokenResponse> GenerateAccessTokenAsync(string clientId = default(string), string secret = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate Access Token
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;Generate Access Token using client credential authentication.&lt;/b&gt;&lt;br&gt;This service returns access tokens required to access Yodlee 1.1 APIs. These tokens are the simplest and easiest of several alternatives for authenticating with Yodlee servers.&lt;br&gt;The most commonly used services obtain data specific to an end user (your customer). For these services, you need a &lt;b&gt;user access token&lt;/b&gt;. These are simply tokens created with the user name parameter (&lt;b&gt;loginName&lt;/b&gt;) set to the id of your end user.  &lt;i&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; You determine this id and you must ensure it&#39;s unique among all your customers.&lt;/i&gt; &lt;br&gt;&lt;br&gt;Each token issued has an associated user. The token passed in the http headers explicitly names the user referenced in that API call.&lt;br&gt;&lt;br&gt;Some of the APIs do administrative work, and don&#39;t reference an end user. &lt;br/&gt;One example of administrative work is key management. Another example is registering a new user explicitly, with &lt;b&gt;POST /user/register&lt;/b&gt; call or subscribe to webhook, with &lt;b&gt;POST /config/notifications/events/{eventName}&lt;/b&gt;. &lt;br/&gt;To invoke these, you need an &lt;b&gt;admin access token&lt;/b&gt;. Create this by passing in your admin user login name in place of a regular user name.&lt;br&gt;&lt;br&gt;This service also allows for simplified registration of new users. Any time you pass in a user name not already in use, the system will automatically implicitly create a new user for you. &lt;br&gt;This user will naturally have very few associated details. You can later provide additional user information by calling the &lt;b&gt;PUT user/register service&lt;/b&gt;.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;The header &lt;code&gt;Authorization&lt;/code&gt; does not apply to this service.&lt;/li&gt;&lt;li&gt;The content type has to be passed as application/x-www-form-urlencoded.&lt;li&gt;Upgrading to client credential authentication requires infrastructure reconfiguration. &lt;li&gt;Customers wishing to switch from another authentication scheme to client credential authentication, please contact Yodlee Client Services.&lt;/li&gt;&lt;li&gt;Default expiry time of user access token and admin access token is 30 minutes.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">clientId issued by Yodlee is used to generate the OAuth token for authentication. (optional)</param>
        /// <param name="secret">secret issued by Yodlee is used to generate the OAuth token for authentication. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientCredentialTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientCredentialTokenResponse>> GenerateAccessTokenWithHttpInfoAsync(string clientId = default(string), string secret = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate API Key
        /// </summary>
        /// <remarks>
        /// This endpoint is used to generate an API key. The RSA public key you provide should be in 2048 bit PKCS#8 encoded format. &lt;br&gt;A public key is a mandatory input for generating the API key.&lt;br/&gt;The public key should be a unique key. The apiKeyId you get in the response is what you should use to generate the JWT token.&lt;br&gt; You can use one of the following authorization methods to access&lt;br/&gt;this API:&lt;br&gt;&lt;ol&gt;&lt;li&gt;cobsession&lt;/li&gt;&lt;li&gt;JWT token&lt;/li&gt;&lt;/ol&gt; Alternatively, you can use base 64 encoded cobrandLogin and cobrandPassword in the Authorization header (Format: Authorization: Basic &lt;encoded value of cobrandLogin: cobrandPassword&gt;)&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;br&gt;&lt;li&gt;This service is not available in developer sandbox environment and will be made available for testing in your dedicated environment. The content type has to be passed as application/json for the body parameter.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyRequest">apiKeyRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiKeyResponse</returns>
        System.Threading.Tasks.Task<ApiKeyResponse> GenerateApiKeyAsync(ApiKeyRequest apiKeyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate API Key
        /// </summary>
        /// <remarks>
        /// This endpoint is used to generate an API key. The RSA public key you provide should be in 2048 bit PKCS#8 encoded format. &lt;br&gt;A public key is a mandatory input for generating the API key.&lt;br/&gt;The public key should be a unique key. The apiKeyId you get in the response is what you should use to generate the JWT token.&lt;br&gt; You can use one of the following authorization methods to access&lt;br/&gt;this API:&lt;br&gt;&lt;ol&gt;&lt;li&gt;cobsession&lt;/li&gt;&lt;li&gt;JWT token&lt;/li&gt;&lt;/ol&gt; Alternatively, you can use base 64 encoded cobrandLogin and cobrandPassword in the Authorization header (Format: Authorization: Basic &lt;encoded value of cobrandLogin: cobrandPassword&gt;)&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;br&gt;&lt;li&gt;This service is not available in developer sandbox environment and will be made available for testing in your dedicated environment. The content type has to be passed as application/json for the body parameter.&lt;/li&gt;
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyRequest">apiKeyRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyResponse>> GenerateApiKeyWithHttpInfoAsync(ApiKeyRequest apiKeyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get API Keys
        /// </summary>
        /// <remarks>
        /// This endpoint provides the list of API keys that exist for a customer.&lt;br&gt;You can use one of the following authorization methods to access this API:&lt;br&gt;&lt;ol&gt;&lt;li&gt;cobsession&lt;/li&gt;&lt;li&gt;JWT token&lt;/li&gt;&lt;/ol&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This service is not available in developer sandbox environment and will be made available for testing in your dedicated environment. 
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiKeyResponse</returns>
        System.Threading.Tasks.Task<ApiKeyResponse> GetApiKeysAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get API Keys
        /// </summary>
        /// <remarks>
        /// This endpoint provides the list of API keys that exist for a customer.&lt;br&gt;You can use one of the following authorization methods to access this API:&lt;br&gt;&lt;ol&gt;&lt;li&gt;cobsession&lt;/li&gt;&lt;li&gt;JWT token&lt;/li&gt;&lt;/ol&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This service is not available in developer sandbox environment and will be made available for testing in your dedicated environment. 
        /// </remarks>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyResponse>> GetApiKeysWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthApi : IAuthApiSync, IAuthApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthApi : IAuthApi
    {
        private Yodlee.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthApi(string basePath)
        {
            this.Configuration = Yodlee.ApiClient.Client.Configuration.MergeConfigurations(
                Yodlee.ApiClient.Client.GlobalConfiguration.Instance,
                new Yodlee.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Yodlee.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthApi(Yodlee.ApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Yodlee.ApiClient.Client.Configuration.MergeConfigurations(
                Yodlee.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Yodlee.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Yodlee.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AuthApi(Yodlee.ApiClient.Client.ISynchronousClient client, Yodlee.ApiClient.Client.IAsynchronousClient asyncClient, Yodlee.ApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Yodlee.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Yodlee.ApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Yodlee.ApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Yodlee.ApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Yodlee.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete API Key This endpoint allows an existing API key to be deleted.&lt;br&gt;You can use one of the following authorization methods to access this API:&lt;br&gt;&lt;ol&gt;&lt;li&gt;cobsession&lt;/li&gt;&lt;li&gt;JWT token&lt;/li&gt;&lt;/ol&gt; &lt;b&gt;Notes:&lt;/b&gt; &lt;li&gt;This service is not available in developer sandbox environment and will be made availablefor testing in your dedicated environment. 
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteApiKey(string key, int operationIndex = 0)
        {
            DeleteApiKeyWithHttpInfo(key);
        }

        /// <summary>
        /// Delete API Key This endpoint allows an existing API key to be deleted.&lt;br&gt;You can use one of the following authorization methods to access this API:&lt;br&gt;&lt;ol&gt;&lt;li&gt;cobsession&lt;/li&gt;&lt;li&gt;JWT token&lt;/li&gt;&lt;/ol&gt; &lt;b&gt;Notes:&lt;/b&gt; &lt;li&gt;This service is not available in developer sandbox environment and will be made availablefor testing in your dedicated environment. 
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yodlee.ApiClient.Client.ApiResponse<Object> DeleteApiKeyWithHttpInfo(string key, int operationIndex = 0)
        {
            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'key' when calling AuthApi->DeleteApiKey");
            }

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("key", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(key)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.DeleteApiKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/apiKey/{key}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteApiKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete API Key This endpoint allows an existing API key to be deleted.&lt;br&gt;You can use one of the following authorization methods to access this API:&lt;br&gt;&lt;ol&gt;&lt;li&gt;cobsession&lt;/li&gt;&lt;li&gt;JWT token&lt;/li&gt;&lt;/ol&gt; &lt;b&gt;Notes:&lt;/b&gt; &lt;li&gt;This service is not available in developer sandbox environment and will be made availablefor testing in your dedicated environment. 
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteApiKeyAsync(string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteApiKeyWithHttpInfoAsync(key, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete API Key This endpoint allows an existing API key to be deleted.&lt;br&gt;You can use one of the following authorization methods to access this API:&lt;br&gt;&lt;ol&gt;&lt;li&gt;cobsession&lt;/li&gt;&lt;li&gt;JWT token&lt;/li&gt;&lt;/ol&gt; &lt;b&gt;Notes:&lt;/b&gt; &lt;li&gt;This service is not available in developer sandbox environment and will be made availablefor testing in your dedicated environment. 
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<Object>> DeleteApiKeyWithHttpInfoAsync(string key, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'key' when calling AuthApi->DeleteApiKey");
            }


            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("key", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(key)); // path parameter

            localVarRequestOptions.Operation = "AuthApi.DeleteApiKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/apiKey/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteApiKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Token This endpoint revokes the token passed in the Authorization header. This service is applicable for JWT-based (and all API key-based) authentication and also client credential (clientId and secret) based authentication. This service does not return a response body. The HTTP response code is 204 (success with no content). &lt;br&gt;Tokens generally have limited lifetime of up to 30 minutes. You will call this service when you finish working with one user, and you want to delete the valid token rather than simply letting it expire.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;Revoking an access token (either type, admin or a user token) can take up to 2 minutes, as the tokens are stored on a distributed system.&lt;br/&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteToken(int operationIndex = 0)
        {
            DeleteTokenWithHttpInfo();
        }

        /// <summary>
        /// Delete Token This endpoint revokes the token passed in the Authorization header. This service is applicable for JWT-based (and all API key-based) authentication and also client credential (clientId and secret) based authentication. This service does not return a response body. The HTTP response code is 204 (success with no content). &lt;br&gt;Tokens generally have limited lifetime of up to 30 minutes. You will call this service when you finish working with one user, and you want to delete the valid token rather than simply letting it expire.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;Revoking an access token (either type, admin or a user token) can take up to 2 minutes, as the tokens are stored on a distributed system.&lt;br/&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Yodlee.ApiClient.Client.ApiResponse<Object> DeleteTokenWithHttpInfo(int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AuthApi.DeleteToken";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/token", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Token This endpoint revokes the token passed in the Authorization header. This service is applicable for JWT-based (and all API key-based) authentication and also client credential (clientId and secret) based authentication. This service does not return a response body. The HTTP response code is 204 (success with no content). &lt;br&gt;Tokens generally have limited lifetime of up to 30 minutes. You will call this service when you finish working with one user, and you want to delete the valid token rather than simply letting it expire.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;Revoking an access token (either type, admin or a user token) can take up to 2 minutes, as the tokens are stored on a distributed system.&lt;br/&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTokenAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTokenWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Token This endpoint revokes the token passed in the Authorization header. This service is applicable for JWT-based (and all API key-based) authentication and also client credential (clientId and secret) based authentication. This service does not return a response body. The HTTP response code is 204 (success with no content). &lt;br&gt;Tokens generally have limited lifetime of up to 30 minutes. You will call this service when you finish working with one user, and you want to delete the valid token rather than simply letting it expire.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;Revoking an access token (either type, admin or a user token) can take up to 2 minutes, as the tokens are stored on a distributed system.&lt;br/&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<Object>> DeleteTokenWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AuthApi.DeleteToken";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate Access Token &lt;b&gt;Generate Access Token using client credential authentication.&lt;/b&gt;&lt;br&gt;This service returns access tokens required to access Yodlee 1.1 APIs. These tokens are the simplest and easiest of several alternatives for authenticating with Yodlee servers.&lt;br&gt;The most commonly used services obtain data specific to an end user (your customer). For these services, you need a &lt;b&gt;user access token&lt;/b&gt;. These are simply tokens created with the user name parameter (&lt;b&gt;loginName&lt;/b&gt;) set to the id of your end user.  &lt;i&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; You determine this id and you must ensure it&#39;s unique among all your customers.&lt;/i&gt; &lt;br&gt;&lt;br&gt;Each token issued has an associated user. The token passed in the http headers explicitly names the user referenced in that API call.&lt;br&gt;&lt;br&gt;Some of the APIs do administrative work, and don&#39;t reference an end user. &lt;br/&gt;One example of administrative work is key management. Another example is registering a new user explicitly, with &lt;b&gt;POST /user/register&lt;/b&gt; call or subscribe to webhook, with &lt;b&gt;POST /config/notifications/events/{eventName}&lt;/b&gt;. &lt;br/&gt;To invoke these, you need an &lt;b&gt;admin access token&lt;/b&gt;. Create this by passing in your admin user login name in place of a regular user name.&lt;br&gt;&lt;br&gt;This service also allows for simplified registration of new users. Any time you pass in a user name not already in use, the system will automatically implicitly create a new user for you. &lt;br&gt;This user will naturally have very few associated details. You can later provide additional user information by calling the &lt;b&gt;PUT user/register service&lt;/b&gt;.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;The header &lt;code&gt;Authorization&lt;/code&gt; does not apply to this service.&lt;/li&gt;&lt;li&gt;The content type has to be passed as application/x-www-form-urlencoded.&lt;li&gt;Upgrading to client credential authentication requires infrastructure reconfiguration. &lt;li&gt;Customers wishing to switch from another authentication scheme to client credential authentication, please contact Yodlee Client Services.&lt;/li&gt;&lt;li&gt;Default expiry time of user access token and admin access token is 30 minutes.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">clientId issued by Yodlee is used to generate the OAuth token for authentication. (optional)</param>
        /// <param name="secret">secret issued by Yodlee is used to generate the OAuth token for authentication. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientCredentialTokenResponse</returns>
        public ClientCredentialTokenResponse GenerateAccessToken(string clientId = default(string), string secret = default(string), int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<ClientCredentialTokenResponse> localVarResponse = GenerateAccessTokenWithHttpInfo(clientId, secret);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Access Token &lt;b&gt;Generate Access Token using client credential authentication.&lt;/b&gt;&lt;br&gt;This service returns access tokens required to access Yodlee 1.1 APIs. These tokens are the simplest and easiest of several alternatives for authenticating with Yodlee servers.&lt;br&gt;The most commonly used services obtain data specific to an end user (your customer). For these services, you need a &lt;b&gt;user access token&lt;/b&gt;. These are simply tokens created with the user name parameter (&lt;b&gt;loginName&lt;/b&gt;) set to the id of your end user.  &lt;i&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; You determine this id and you must ensure it&#39;s unique among all your customers.&lt;/i&gt; &lt;br&gt;&lt;br&gt;Each token issued has an associated user. The token passed in the http headers explicitly names the user referenced in that API call.&lt;br&gt;&lt;br&gt;Some of the APIs do administrative work, and don&#39;t reference an end user. &lt;br/&gt;One example of administrative work is key management. Another example is registering a new user explicitly, with &lt;b&gt;POST /user/register&lt;/b&gt; call or subscribe to webhook, with &lt;b&gt;POST /config/notifications/events/{eventName}&lt;/b&gt;. &lt;br/&gt;To invoke these, you need an &lt;b&gt;admin access token&lt;/b&gt;. Create this by passing in your admin user login name in place of a regular user name.&lt;br&gt;&lt;br&gt;This service also allows for simplified registration of new users. Any time you pass in a user name not already in use, the system will automatically implicitly create a new user for you. &lt;br&gt;This user will naturally have very few associated details. You can later provide additional user information by calling the &lt;b&gt;PUT user/register service&lt;/b&gt;.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;The header &lt;code&gt;Authorization&lt;/code&gt; does not apply to this service.&lt;/li&gt;&lt;li&gt;The content type has to be passed as application/x-www-form-urlencoded.&lt;li&gt;Upgrading to client credential authentication requires infrastructure reconfiguration. &lt;li&gt;Customers wishing to switch from another authentication scheme to client credential authentication, please contact Yodlee Client Services.&lt;/li&gt;&lt;li&gt;Default expiry time of user access token and admin access token is 30 minutes.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">clientId issued by Yodlee is used to generate the OAuth token for authentication. (optional)</param>
        /// <param name="secret">secret issued by Yodlee is used to generate the OAuth token for authentication. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientCredentialTokenResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<ClientCredentialTokenResponse> GenerateAccessTokenWithHttpInfo(string clientId = default(string), string secret = default(string), int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("clientId", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (secret != null)
            {
                localVarRequestOptions.FormParameters.Add("secret", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(secret)); // form parameter
            }

            localVarRequestOptions.Operation = "AuthApi.GenerateAccessToken";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ClientCredentialTokenResponse>("/auth/token", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateAccessToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate Access Token &lt;b&gt;Generate Access Token using client credential authentication.&lt;/b&gt;&lt;br&gt;This service returns access tokens required to access Yodlee 1.1 APIs. These tokens are the simplest and easiest of several alternatives for authenticating with Yodlee servers.&lt;br&gt;The most commonly used services obtain data specific to an end user (your customer). For these services, you need a &lt;b&gt;user access token&lt;/b&gt;. These are simply tokens created with the user name parameter (&lt;b&gt;loginName&lt;/b&gt;) set to the id of your end user.  &lt;i&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; You determine this id and you must ensure it&#39;s unique among all your customers.&lt;/i&gt; &lt;br&gt;&lt;br&gt;Each token issued has an associated user. The token passed in the http headers explicitly names the user referenced in that API call.&lt;br&gt;&lt;br&gt;Some of the APIs do administrative work, and don&#39;t reference an end user. &lt;br/&gt;One example of administrative work is key management. Another example is registering a new user explicitly, with &lt;b&gt;POST /user/register&lt;/b&gt; call or subscribe to webhook, with &lt;b&gt;POST /config/notifications/events/{eventName}&lt;/b&gt;. &lt;br/&gt;To invoke these, you need an &lt;b&gt;admin access token&lt;/b&gt;. Create this by passing in your admin user login name in place of a regular user name.&lt;br&gt;&lt;br&gt;This service also allows for simplified registration of new users. Any time you pass in a user name not already in use, the system will automatically implicitly create a new user for you. &lt;br&gt;This user will naturally have very few associated details. You can later provide additional user information by calling the &lt;b&gt;PUT user/register service&lt;/b&gt;.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;The header &lt;code&gt;Authorization&lt;/code&gt; does not apply to this service.&lt;/li&gt;&lt;li&gt;The content type has to be passed as application/x-www-form-urlencoded.&lt;li&gt;Upgrading to client credential authentication requires infrastructure reconfiguration. &lt;li&gt;Customers wishing to switch from another authentication scheme to client credential authentication, please contact Yodlee Client Services.&lt;/li&gt;&lt;li&gt;Default expiry time of user access token and admin access token is 30 minutes.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">clientId issued by Yodlee is used to generate the OAuth token for authentication. (optional)</param>
        /// <param name="secret">secret issued by Yodlee is used to generate the OAuth token for authentication. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientCredentialTokenResponse</returns>
        public async System.Threading.Tasks.Task<ClientCredentialTokenResponse> GenerateAccessTokenAsync(string clientId = default(string), string secret = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<ClientCredentialTokenResponse> localVarResponse = await GenerateAccessTokenWithHttpInfoAsync(clientId, secret, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Access Token &lt;b&gt;Generate Access Token using client credential authentication.&lt;/b&gt;&lt;br&gt;This service returns access tokens required to access Yodlee 1.1 APIs. These tokens are the simplest and easiest of several alternatives for authenticating with Yodlee servers.&lt;br&gt;The most commonly used services obtain data specific to an end user (your customer). For these services, you need a &lt;b&gt;user access token&lt;/b&gt;. These are simply tokens created with the user name parameter (&lt;b&gt;loginName&lt;/b&gt;) set to the id of your end user.  &lt;i&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; You determine this id and you must ensure it&#39;s unique among all your customers.&lt;/i&gt; &lt;br&gt;&lt;br&gt;Each token issued has an associated user. The token passed in the http headers explicitly names the user referenced in that API call.&lt;br&gt;&lt;br&gt;Some of the APIs do administrative work, and don&#39;t reference an end user. &lt;br/&gt;One example of administrative work is key management. Another example is registering a new user explicitly, with &lt;b&gt;POST /user/register&lt;/b&gt; call or subscribe to webhook, with &lt;b&gt;POST /config/notifications/events/{eventName}&lt;/b&gt;. &lt;br/&gt;To invoke these, you need an &lt;b&gt;admin access token&lt;/b&gt;. Create this by passing in your admin user login name in place of a regular user name.&lt;br&gt;&lt;br&gt;This service also allows for simplified registration of new users. Any time you pass in a user name not already in use, the system will automatically implicitly create a new user for you. &lt;br&gt;This user will naturally have very few associated details. You can later provide additional user information by calling the &lt;b&gt;PUT user/register service&lt;/b&gt;.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;The header &lt;code&gt;Authorization&lt;/code&gt; does not apply to this service.&lt;/li&gt;&lt;li&gt;The content type has to be passed as application/x-www-form-urlencoded.&lt;li&gt;Upgrading to client credential authentication requires infrastructure reconfiguration. &lt;li&gt;Customers wishing to switch from another authentication scheme to client credential authentication, please contact Yodlee Client Services.&lt;/li&gt;&lt;li&gt;Default expiry time of user access token and admin access token is 30 minutes.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">clientId issued by Yodlee is used to generate the OAuth token for authentication. (optional)</param>
        /// <param name="secret">secret issued by Yodlee is used to generate the OAuth token for authentication. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientCredentialTokenResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<ClientCredentialTokenResponse>> GenerateAccessTokenWithHttpInfoAsync(string clientId = default(string), string secret = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("clientId", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (secret != null)
            {
                localVarRequestOptions.FormParameters.Add("secret", Yodlee.ApiClient.Client.ClientUtils.ParameterToString(secret)); // form parameter
            }

            localVarRequestOptions.Operation = "AuthApi.GenerateAccessToken";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ClientCredentialTokenResponse>("/auth/token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateAccessToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate API Key This endpoint is used to generate an API key. The RSA public key you provide should be in 2048 bit PKCS#8 encoded format. &lt;br&gt;A public key is a mandatory input for generating the API key.&lt;br/&gt;The public key should be a unique key. The apiKeyId you get in the response is what you should use to generate the JWT token.&lt;br&gt; You can use one of the following authorization methods to access&lt;br/&gt;this API:&lt;br&gt;&lt;ol&gt;&lt;li&gt;cobsession&lt;/li&gt;&lt;li&gt;JWT token&lt;/li&gt;&lt;/ol&gt; Alternatively, you can use base 64 encoded cobrandLogin and cobrandPassword in the Authorization header (Format: Authorization: Basic &lt;encoded value of cobrandLogin: cobrandPassword&gt;)&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;br&gt;&lt;li&gt;This service is not available in developer sandbox environment and will be made available for testing in your dedicated environment. The content type has to be passed as application/json for the body parameter.&lt;/li&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyRequest">apiKeyRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiKeyResponse</returns>
        public ApiKeyResponse GenerateApiKey(ApiKeyRequest apiKeyRequest, int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<ApiKeyResponse> localVarResponse = GenerateApiKeyWithHttpInfo(apiKeyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate API Key This endpoint is used to generate an API key. The RSA public key you provide should be in 2048 bit PKCS#8 encoded format. &lt;br&gt;A public key is a mandatory input for generating the API key.&lt;br/&gt;The public key should be a unique key. The apiKeyId you get in the response is what you should use to generate the JWT token.&lt;br&gt; You can use one of the following authorization methods to access&lt;br/&gt;this API:&lt;br&gt;&lt;ol&gt;&lt;li&gt;cobsession&lt;/li&gt;&lt;li&gt;JWT token&lt;/li&gt;&lt;/ol&gt; Alternatively, you can use base 64 encoded cobrandLogin and cobrandPassword in the Authorization header (Format: Authorization: Basic &lt;encoded value of cobrandLogin: cobrandPassword&gt;)&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;br&gt;&lt;li&gt;This service is not available in developer sandbox environment and will be made available for testing in your dedicated environment. The content type has to be passed as application/json for the body parameter.&lt;/li&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyRequest">apiKeyRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiKeyResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<ApiKeyResponse> GenerateApiKeyWithHttpInfo(ApiKeyRequest apiKeyRequest, int operationIndex = 0)
        {
            // verify the required parameter 'apiKeyRequest' is set
            if (apiKeyRequest == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'apiKeyRequest' when calling AuthApi->GenerateApiKey");
            }

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = apiKeyRequest;

            localVarRequestOptions.Operation = "AuthApi.GenerateApiKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiKeyResponse>("/auth/apiKey", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateApiKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate API Key This endpoint is used to generate an API key. The RSA public key you provide should be in 2048 bit PKCS#8 encoded format. &lt;br&gt;A public key is a mandatory input for generating the API key.&lt;br/&gt;The public key should be a unique key. The apiKeyId you get in the response is what you should use to generate the JWT token.&lt;br&gt; You can use one of the following authorization methods to access&lt;br/&gt;this API:&lt;br&gt;&lt;ol&gt;&lt;li&gt;cobsession&lt;/li&gt;&lt;li&gt;JWT token&lt;/li&gt;&lt;/ol&gt; Alternatively, you can use base 64 encoded cobrandLogin and cobrandPassword in the Authorization header (Format: Authorization: Basic &lt;encoded value of cobrandLogin: cobrandPassword&gt;)&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;br&gt;&lt;li&gt;This service is not available in developer sandbox environment and will be made available for testing in your dedicated environment. The content type has to be passed as application/json for the body parameter.&lt;/li&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyRequest">apiKeyRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiKeyResponse</returns>
        public async System.Threading.Tasks.Task<ApiKeyResponse> GenerateApiKeyAsync(ApiKeyRequest apiKeyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<ApiKeyResponse> localVarResponse = await GenerateApiKeyWithHttpInfoAsync(apiKeyRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate API Key This endpoint is used to generate an API key. The RSA public key you provide should be in 2048 bit PKCS#8 encoded format. &lt;br&gt;A public key is a mandatory input for generating the API key.&lt;br/&gt;The public key should be a unique key. The apiKeyId you get in the response is what you should use to generate the JWT token.&lt;br&gt; You can use one of the following authorization methods to access&lt;br/&gt;this API:&lt;br&gt;&lt;ol&gt;&lt;li&gt;cobsession&lt;/li&gt;&lt;li&gt;JWT token&lt;/li&gt;&lt;/ol&gt; Alternatively, you can use base 64 encoded cobrandLogin and cobrandPassword in the Authorization header (Format: Authorization: Basic &lt;encoded value of cobrandLogin: cobrandPassword&gt;)&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;br&gt;&lt;li&gt;This service is not available in developer sandbox environment and will be made available for testing in your dedicated environment. The content type has to be passed as application/json for the body parameter.&lt;/li&gt;
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyRequest">apiKeyRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiKeyResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<ApiKeyResponse>> GenerateApiKeyWithHttpInfoAsync(ApiKeyRequest apiKeyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apiKeyRequest' is set
            if (apiKeyRequest == null)
            {
                throw new Yodlee.ApiClient.Client.ApiException(400, "Missing required parameter 'apiKeyRequest' when calling AuthApi->GenerateApiKey");
            }


            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = apiKeyRequest;

            localVarRequestOptions.Operation = "AuthApi.GenerateApiKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiKeyResponse>("/auth/apiKey", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateApiKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get API Keys This endpoint provides the list of API keys that exist for a customer.&lt;br&gt;You can use one of the following authorization methods to access this API:&lt;br&gt;&lt;ol&gt;&lt;li&gt;cobsession&lt;/li&gt;&lt;li&gt;JWT token&lt;/li&gt;&lt;/ol&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This service is not available in developer sandbox environment and will be made available for testing in your dedicated environment. 
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiKeyResponse</returns>
        public ApiKeyResponse GetApiKeys(int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.ApiResponse<ApiKeyResponse> localVarResponse = GetApiKeysWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get API Keys This endpoint provides the list of API keys that exist for a customer.&lt;br&gt;You can use one of the following authorization methods to access this API:&lt;br&gt;&lt;ol&gt;&lt;li&gt;cobsession&lt;/li&gt;&lt;li&gt;JWT token&lt;/li&gt;&lt;/ol&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This service is not available in developer sandbox environment and will be made available for testing in your dedicated environment. 
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiKeyResponse</returns>
        public Yodlee.ApiClient.Client.ApiResponse<ApiKeyResponse> GetApiKeysWithHttpInfo(int operationIndex = 0)
        {
            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AuthApi.GetApiKeys";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiKeyResponse>("/auth/apiKey", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get API Keys This endpoint provides the list of API keys that exist for a customer.&lt;br&gt;You can use one of the following authorization methods to access this API:&lt;br&gt;&lt;ol&gt;&lt;li&gt;cobsession&lt;/li&gt;&lt;li&gt;JWT token&lt;/li&gt;&lt;/ol&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This service is not available in developer sandbox environment and will be made available for testing in your dedicated environment. 
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiKeyResponse</returns>
        public async System.Threading.Tasks.Task<ApiKeyResponse> GetApiKeysAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Yodlee.ApiClient.Client.ApiResponse<ApiKeyResponse> localVarResponse = await GetApiKeysWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get API Keys This endpoint provides the list of API keys that exist for a customer.&lt;br&gt;You can use one of the following authorization methods to access this API:&lt;br&gt;&lt;ol&gt;&lt;li&gt;cobsession&lt;/li&gt;&lt;li&gt;JWT token&lt;/li&gt;&lt;/ol&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This service is not available in developer sandbox environment and will be made available for testing in your dedicated environment. 
        /// </summary>
        /// <exception cref="Yodlee.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiKeyResponse)</returns>
        public async System.Threading.Tasks.Task<Yodlee.ApiClient.Client.ApiResponse<ApiKeyResponse>> GetApiKeysWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Yodlee.ApiClient.Client.RequestOptions localVarRequestOptions = new Yodlee.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json;charset=UTF-8"
            };

            var localVarContentType = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Yodlee.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AuthApi.GetApiKeys";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiKeyResponse>("/auth/apiKey", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
