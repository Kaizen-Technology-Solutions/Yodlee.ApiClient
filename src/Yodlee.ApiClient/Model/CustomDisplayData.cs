/*
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yodlee.ApiClient.Client.OpenAPIDateConverter;

namespace Yodlee.ApiClient.Model
{
    /// <summary>
    /// CustomDisplayData
    /// </summary>
    [DataContract(Name = "CustomDisplayData")]
    public partial class CustomDisplayData : IEquatable<CustomDisplayData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomDisplayData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomDisplayData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomDisplayData" /> class.
        /// </summary>
        /// <param name="consentConfirmation">consentConfirmation (required).</param>
        /// <param name="deletePreference">deletePreference (required).</param>
        /// <param name="thirdParty">thirdParty (required).</param>
        /// <param name="clientTrustedAdvisorTxt">clientTrustedAdvisorTxt (required).</param>
        /// <param name="userDataTreatment">userDataTreatment (required).</param>
        public CustomDisplayData(ConsentConfirmation consentConfirmation = default(ConsentConfirmation), DeletePreference deletePreference = default(DeletePreference), ThirdParty thirdParty = default(ThirdParty), ClientTrustedAdvisorTxt clientTrustedAdvisorTxt = default(ClientTrustedAdvisorTxt), UserDataTreatment userDataTreatment = default(UserDataTreatment))
        {
            // to ensure "consentConfirmation" is required (not null)
            if (consentConfirmation == null)
            {
                throw new ArgumentNullException("consentConfirmation is a required property for CustomDisplayData and cannot be null");
            }
            this.ConsentConfirmation = consentConfirmation;
            // to ensure "deletePreference" is required (not null)
            if (deletePreference == null)
            {
                throw new ArgumentNullException("deletePreference is a required property for CustomDisplayData and cannot be null");
            }
            this.DeletePreference = deletePreference;
            // to ensure "thirdParty" is required (not null)
            if (thirdParty == null)
            {
                throw new ArgumentNullException("thirdParty is a required property for CustomDisplayData and cannot be null");
            }
            this.ThirdParty = thirdParty;
            // to ensure "clientTrustedAdvisorTxt" is required (not null)
            if (clientTrustedAdvisorTxt == null)
            {
                throw new ArgumentNullException("clientTrustedAdvisorTxt is a required property for CustomDisplayData and cannot be null");
            }
            this.ClientTrustedAdvisorTxt = clientTrustedAdvisorTxt;
            // to ensure "userDataTreatment" is required (not null)
            if (userDataTreatment == null)
            {
                throw new ArgumentNullException("userDataTreatment is a required property for CustomDisplayData and cannot be null");
            }
            this.UserDataTreatment = userDataTreatment;
        }

        /// <summary>
        /// Gets or Sets ConsentConfirmation
        /// </summary>
        [DataMember(Name = "consentConfirmation", IsRequired = true, EmitDefaultValue = true)]
        public ConsentConfirmation ConsentConfirmation { get; set; }

        /// <summary>
        /// Gets or Sets DeletePreference
        /// </summary>
        [DataMember(Name = "deletePreference", IsRequired = true, EmitDefaultValue = true)]
        public DeletePreference DeletePreference { get; set; }

        /// <summary>
        /// Gets or Sets ThirdParty
        /// </summary>
        [DataMember(Name = "thirdParty", IsRequired = true, EmitDefaultValue = true)]
        public ThirdParty ThirdParty { get; set; }

        /// <summary>
        /// Gets or Sets ClientTrustedAdvisorTxt
        /// </summary>
        [DataMember(Name = "clientTrustedAdvisorTxt", IsRequired = true, EmitDefaultValue = true)]
        public ClientTrustedAdvisorTxt ClientTrustedAdvisorTxt { get; set; }

        /// <summary>
        /// Gets or Sets UserDataTreatment
        /// </summary>
        [DataMember(Name = "userDataTreatment", IsRequired = true, EmitDefaultValue = true)]
        public UserDataTreatment UserDataTreatment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomDisplayData {\n");
            sb.Append("  ConsentConfirmation: ").Append(ConsentConfirmation).Append("\n");
            sb.Append("  DeletePreference: ").Append(DeletePreference).Append("\n");
            sb.Append("  ThirdParty: ").Append(ThirdParty).Append("\n");
            sb.Append("  ClientTrustedAdvisorTxt: ").Append(ClientTrustedAdvisorTxt).Append("\n");
            sb.Append("  UserDataTreatment: ").Append(UserDataTreatment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomDisplayData);
        }

        /// <summary>
        /// Returns true if CustomDisplayData instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomDisplayData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomDisplayData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ConsentConfirmation == input.ConsentConfirmation ||
                    (this.ConsentConfirmation != null &&
                    this.ConsentConfirmation.Equals(input.ConsentConfirmation))
                ) && 
                (
                    this.DeletePreference == input.DeletePreference ||
                    (this.DeletePreference != null &&
                    this.DeletePreference.Equals(input.DeletePreference))
                ) && 
                (
                    this.ThirdParty == input.ThirdParty ||
                    (this.ThirdParty != null &&
                    this.ThirdParty.Equals(input.ThirdParty))
                ) && 
                (
                    this.ClientTrustedAdvisorTxt == input.ClientTrustedAdvisorTxt ||
                    (this.ClientTrustedAdvisorTxt != null &&
                    this.ClientTrustedAdvisorTxt.Equals(input.ClientTrustedAdvisorTxt))
                ) && 
                (
                    this.UserDataTreatment == input.UserDataTreatment ||
                    (this.UserDataTreatment != null &&
                    this.UserDataTreatment.Equals(input.UserDataTreatment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConsentConfirmation != null)
                {
                    hashCode = (hashCode * 59) + this.ConsentConfirmation.GetHashCode();
                }
                if (this.DeletePreference != null)
                {
                    hashCode = (hashCode * 59) + this.DeletePreference.GetHashCode();
                }
                if (this.ThirdParty != null)
                {
                    hashCode = (hashCode * 59) + this.ThirdParty.GetHashCode();
                }
                if (this.ClientTrustedAdvisorTxt != null)
                {
                    hashCode = (hashCode * 59) + this.ClientTrustedAdvisorTxt.GetHashCode();
                }
                if (this.UserDataTreatment != null)
                {
                    hashCode = (hashCode * 59) + this.UserDataTreatment.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
