/*
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yodlee.ApiClient.Client.OpenAPIDateConverter;

namespace Yodlee.ApiClient.Model
{
    /// <summary>
    /// VerifiedAccountResponse
    /// </summary>
    [DataContract(Name = "VerifiedAccountResponse")]
    public partial class VerifiedAccountResponse : IEquatable<VerifiedAccountResponse>, IValidatableObject
    {
        /// <summary>
        /// The overall status of the verification request
        /// </summary>
        /// <value>The overall status of the verification request</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum COMPLETED for value: COMPLETED
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED = 1,

            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 2

        }


        /// <summary>
        /// The overall status of the verification request
        /// </summary>
        /// <value>The overall status of the verification request</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public StateEnum? State { get; set; }

        /// <summary>
        /// Returns false as State should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeState()
        {
            return false;
        }
        /// <summary>
        /// The reason for the failure of the verification request
        /// </summary>
        /// <value>The reason for the failure of the verification request</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FailedReasonEnum
        {
            /// <summary>
            /// Enum ACCOUNTLOCKED for value: ACCOUNT_LOCKED
            /// </summary>
            [EnumMember(Value = "ACCOUNT_LOCKED")]
            ACCOUNTLOCKED = 1,

            /// <summary>
            /// Enum ADDLAUTHENTICATIONREQUIRED for value: ADDL_AUTHENTICATION_REQUIRED
            /// </summary>
            [EnumMember(Value = "ADDL_AUTHENTICATION_REQUIRED")]
            ADDLAUTHENTICATIONREQUIRED = 2,

            /// <summary>
            /// Enum CREDENTIALSUPDATENEEDED for value: CREDENTIALS_UPDATE_NEEDED
            /// </summary>
            [EnumMember(Value = "CREDENTIALS_UPDATE_NEEDED")]
            CREDENTIALSUPDATENEEDED = 3,

            /// <summary>
            /// Enum INCORRECTCREDENTIALS for value: INCORRECT_CREDENTIALS
            /// </summary>
            [EnumMember(Value = "INCORRECT_CREDENTIALS")]
            INCORRECTCREDENTIALS = 4,

            /// <summary>
            /// Enum INVALIDADDLINFOPROVIDED for value: INVALID_ADDL_INFO_PROVIDED
            /// </summary>
            [EnumMember(Value = "INVALID_ADDL_INFO_PROVIDED")]
            INVALIDADDLINFOPROVIDED = 5,

            /// <summary>
            /// Enum REQUESTTIMEOUT for value: REQUEST_TIME_OUT
            /// </summary>
            [EnumMember(Value = "REQUEST_TIME_OUT")]
            REQUESTTIMEOUT = 6,

            /// <summary>
            /// Enum SITEBLOCKINGERROR for value: SITE_BLOCKING_ERROR
            /// </summary>
            [EnumMember(Value = "SITE_BLOCKING_ERROR")]
            SITEBLOCKINGERROR = 7,

            /// <summary>
            /// Enum UNEXPECTEDSITEERROR for value: UNEXPECTED_SITE_ERROR
            /// </summary>
            [EnumMember(Value = "UNEXPECTED_SITE_ERROR")]
            UNEXPECTEDSITEERROR = 8,

            /// <summary>
            /// Enum SITENOTSUPPORTED for value: SITE_NOT_SUPPORTED
            /// </summary>
            [EnumMember(Value = "SITE_NOT_SUPPORTED")]
            SITENOTSUPPORTED = 9,

            /// <summary>
            /// Enum SITEUNAVAILABLE for value: SITE_UNAVAILABLE
            /// </summary>
            [EnumMember(Value = "SITE_UNAVAILABLE")]
            SITEUNAVAILABLE = 10,

            /// <summary>
            /// Enum TECHERROR for value: TECH_ERROR
            /// </summary>
            [EnumMember(Value = "TECH_ERROR")]
            TECHERROR = 11,

            /// <summary>
            /// Enum USERACTIONNEEDEDATSITE for value: USER_ACTION_NEEDED_AT_SITE
            /// </summary>
            [EnumMember(Value = "USER_ACTION_NEEDED_AT_SITE")]
            USERACTIONNEEDEDATSITE = 12,

            /// <summary>
            /// Enum SITESESSIONINVALIDATED for value: SITE_SESSION_INVALIDATED
            /// </summary>
            [EnumMember(Value = "SITE_SESSION_INVALIDATED")]
            SITESESSIONINVALIDATED = 13,

            /// <summary>
            /// Enum NEWAUTHENTICATIONREQUIRED for value: NEW_AUTHENTICATION_REQUIRED
            /// </summary>
            [EnumMember(Value = "NEW_AUTHENTICATION_REQUIRED")]
            NEWAUTHENTICATIONREQUIRED = 14,

            /// <summary>
            /// Enum CONSENTREQUIRED for value: CONSENT_REQUIRED
            /// </summary>
            [EnumMember(Value = "CONSENT_REQUIRED")]
            CONSENTREQUIRED = 15,

            /// <summary>
            /// Enum CONSENTEXPIRED for value: CONSENT_EXPIRED
            /// </summary>
            [EnumMember(Value = "CONSENT_EXPIRED")]
            CONSENTEXPIRED = 16,

            /// <summary>
            /// Enum CONSENTREVOKED for value: CONSENT_REVOKED
            /// </summary>
            [EnumMember(Value = "CONSENT_REVOKED")]
            CONSENTREVOKED = 17,

            /// <summary>
            /// Enum INCORRECTOAUTHTOKEN for value: INCORRECT_OAUTH_TOKEN
            /// </summary>
            [EnumMember(Value = "INCORRECT_OAUTH_TOKEN")]
            INCORRECTOAUTHTOKEN = 18,

            /// <summary>
            /// Enum REQUIREDDATANOTAVAILABLE for value: REQUIRED_DATA_NOT_AVAILABLE
            /// </summary>
            [EnumMember(Value = "REQUIRED_DATA_NOT_AVAILABLE")]
            REQUIREDDATANOTAVAILABLE = 19,

            /// <summary>
            /// Enum MATCHINGFAILED for value: MATCHING_FAILED
            /// </summary>
            [EnumMember(Value = "MATCHING_FAILED")]
            MATCHINGFAILED = 20,

            /// <summary>
            /// Enum NOELIGIBLEACCOUNTS for value: NO_ELIGIBLE_ACCOUNTS
            /// </summary>
            [EnumMember(Value = "NO_ELIGIBLE_ACCOUNTS")]
            NOELIGIBLEACCOUNTS = 21,

            /// <summary>
            /// Enum USERINPUTREQUIRED for value: USER_INPUT_REQUIRED
            /// </summary>
            [EnumMember(Value = "USER_INPUT_REQUIRED")]
            USERINPUTREQUIRED = 22

        }


        /// <summary>
        /// The reason for the failure of the verification request
        /// </summary>
        /// <value>The reason for the failure of the verification request</value>
        [DataMember(Name = "failedReason", EmitDefaultValue = false)]
        public FailedReasonEnum? FailedReason { get; set; }

        /// <summary>
        /// Returns false as FailedReason should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFailedReason()
        {
            return false;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifiedAccountResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public VerifiedAccountResponse()
        {
        }

        /// <summary>
        /// The unique identifier for the verification request that returns contextual data
        /// </summary>
        /// <value>The unique identifier for the verification request that returns contextual data</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; private set; }

        /// <summary>
        /// Returns false as RequestId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequestId()
        {
            return false;
        }
        /// <summary>
        /// The date of the verification request
        /// </summary>
        /// <value>The date of the verification request</value>
        [DataMember(Name = "requestDate", EmitDefaultValue = false)]
        public string RequestDate { get; private set; }

        /// <summary>
        /// Returns false as RequestDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequestDate()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets VerifiedAccount
        /// </summary>
        [DataMember(Name = "verifiedAccount", EmitDefaultValue = false)]
        public List<VerifiedAccounts> VerifiedAccount { get; private set; }

        /// <summary>
        /// Returns false as VerifiedAccount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVerifiedAccount()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VerifiedAccountResponse {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  RequestDate: ").Append(RequestDate).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  VerifiedAccount: ").Append(VerifiedAccount).Append("\n");
            sb.Append("  FailedReason: ").Append(FailedReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VerifiedAccountResponse);
        }

        /// <summary>
        /// Returns true if VerifiedAccountResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of VerifiedAccountResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VerifiedAccountResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.RequestDate == input.RequestDate ||
                    (this.RequestDate != null &&
                    this.RequestDate.Equals(input.RequestDate))
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.VerifiedAccount == input.VerifiedAccount ||
                    this.VerifiedAccount != null &&
                    input.VerifiedAccount != null &&
                    this.VerifiedAccount.SequenceEqual(input.VerifiedAccount)
                ) && 
                (
                    this.FailedReason == input.FailedReason ||
                    this.FailedReason.Equals(input.FailedReason)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.RequestDate != null)
                {
                    hashCode = (hashCode * 59) + this.RequestDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.State.GetHashCode();
                if (this.VerifiedAccount != null)
                {
                    hashCode = (hashCode * 59) + this.VerifiedAccount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FailedReason.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
