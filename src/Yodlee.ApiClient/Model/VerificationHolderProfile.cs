/*
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yodlee.ApiClient.Client.OpenAPIDateConverter;

namespace Yodlee.ApiClient.Model
{
    /// <summary>
    /// VerificationHolderProfile
    /// </summary>
    [DataContract(Name = "VerificationHolderProfile")]
    public partial class VerificationHolderProfile : IEquatable<VerificationHolderProfile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VerificationHolderProfile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public VerificationHolderProfile()
        {
        }

        /// <summary>
        /// The primary key of the account resource and the unique identifier for the account
        /// </summary>
        /// <value>The primary key of the account resource and the unique identifier for the account</value>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public long AccountId { get; private set; }

        /// <summary>
        /// Returns false as AccountId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAccountId()
        {
            return false;
        }
        /// <summary>
        /// The account holder&#39;s address available at the profile and account levels
        /// </summary>
        /// <value>The account holder&#39;s address available at the profile and account levels</value>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public List<AbstractAddress> Address { get; private set; }

        /// <summary>
        /// Returns false as Address should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAddress()
        {
            return false;
        }
        /// <summary>
        /// The account holder&#39;s phone number available at the profile and account levels
        /// </summary>
        /// <value>The account holder&#39;s phone number available at the profile and account levels</value>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
        public List<PhoneNumber> PhoneNumber { get; private set; }

        /// <summary>
        /// Returns false as PhoneNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePhoneNumber()
        {
            return false;
        }
        /// <summary>
        /// The primary key of the provider account resource
        /// </summary>
        /// <value>The primary key of the provider account resource</value>
        [DataMember(Name = "providerAccountId", EmitDefaultValue = false)]
        public long ProviderAccountId { get; private set; }

        /// <summary>
        /// Returns false as ProviderAccountId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProviderAccountId()
        {
            return false;
        }
        /// <summary>
        /// The holder entity is account-specific and captures the ownership status and the name details of the user
        /// </summary>
        /// <value>The holder entity is account-specific and captures the ownership status and the name details of the user</value>
        [DataMember(Name = "holder", EmitDefaultValue = false)]
        public List<VerificationHolder> Holder { get; private set; }

        /// <summary>
        /// Returns false as Holder should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHolder()
        {
            return false;
        }
        /// <summary>
        /// The account holder&#39;s email ID available at the profile and account levels
        /// </summary>
        /// <value>The account holder&#39;s email ID available at the profile and account levels</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public List<Email> Email { get; private set; }

        /// <summary>
        /// Returns false as Email should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEmail()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VerificationHolderProfile {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  ProviderAccountId: ").Append(ProviderAccountId).Append("\n");
            sb.Append("  Holder: ").Append(Holder).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VerificationHolderProfile);
        }

        /// <summary>
        /// Returns true if VerificationHolderProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of VerificationHolderProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VerificationHolderProfile input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountId == input.AccountId ||
                    this.AccountId.Equals(input.AccountId)
                ) && 
                (
                    this.Address == input.Address ||
                    this.Address != null &&
                    input.Address != null &&
                    this.Address.SequenceEqual(input.Address)
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    this.PhoneNumber != null &&
                    input.PhoneNumber != null &&
                    this.PhoneNumber.SequenceEqual(input.PhoneNumber)
                ) && 
                (
                    this.ProviderAccountId == input.ProviderAccountId ||
                    this.ProviderAccountId.Equals(input.ProviderAccountId)
                ) && 
                (
                    this.Holder == input.Holder ||
                    this.Holder != null &&
                    input.Holder != null &&
                    this.Holder.SequenceEqual(input.Holder)
                ) && 
                (
                    this.Email == input.Email ||
                    this.Email != null &&
                    input.Email != null &&
                    this.Email.SequenceEqual(input.Email)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.PhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProviderAccountId.GetHashCode();
                if (this.Holder != null)
                {
                    hashCode = (hashCode * 59) + this.Holder.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
