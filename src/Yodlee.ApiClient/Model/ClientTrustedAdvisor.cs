/*
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yodlee.ApiClient.Client.OpenAPIDateConverter;

namespace Yodlee.ApiClient.Model
{
    /// <summary>
    /// ClientTrustedAdvisor
    /// </summary>
    [DataContract(Name = "ClientTrustedAdvisor")]
    public partial class ClientTrustedAdvisor : IEquatable<ClientTrustedAdvisor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientTrustedAdvisor" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ClientTrustedAdvisor() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientTrustedAdvisor" /> class.
        /// </summary>
        /// <param name="role">&lt;b&gt;Role of the Client Trusted Advisor&lt;/b&gt;: Example : Lawyer , Accountant , etc... (required).</param>
        /// <param name="name">Name of the client trusted advisor (required).</param>
        /// <param name="email">&lt;b&gt;Email Id of the Client Trusted Advisor&lt;/b&gt;: PRIMARY , SECONDARY , PERSONAL , WORK and OTHERS (required).</param>
        public ClientTrustedAdvisor(string role = default(string), string name = default(string), string email = default(string))
        {
            // to ensure "role" is required (not null)
            if (role == null)
            {
                throw new ArgumentNullException("role is a required property for ClientTrustedAdvisor and cannot be null");
            }
            this.Role = role;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ClientTrustedAdvisor and cannot be null");
            }
            this.Name = name;
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for ClientTrustedAdvisor and cannot be null");
            }
            this.Email = email;
        }

        /// <summary>
        /// &lt;b&gt;Role of the Client Trusted Advisor&lt;/b&gt;: Example : Lawyer , Accountant , etc...
        /// </summary>
        /// <value>&lt;b&gt;Role of the Client Trusted Advisor&lt;/b&gt;: Example : Lawyer , Accountant , etc...</value>
        [DataMember(Name = "role", IsRequired = true, EmitDefaultValue = true)]
        public string Role { get; set; }

        /// <summary>
        /// Name of the client trusted advisor
        /// </summary>
        /// <value>Name of the client trusted advisor</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// &lt;b&gt;Email Id of the Client Trusted Advisor&lt;/b&gt;: PRIMARY , SECONDARY , PERSONAL , WORK and OTHERS
        /// </summary>
        /// <value>&lt;b&gt;Email Id of the Client Trusted Advisor&lt;/b&gt;: PRIMARY , SECONDARY , PERSONAL , WORK and OTHERS</value>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClientTrustedAdvisor {\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClientTrustedAdvisor);
        }

        /// <summary>
        /// Returns true if ClientTrustedAdvisor instances are equal
        /// </summary>
        /// <param name="input">Instance of ClientTrustedAdvisor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClientTrustedAdvisor input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Role != null)
                {
                    hashCode = (hashCode * 59) + this.Role.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
