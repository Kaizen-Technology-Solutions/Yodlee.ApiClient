/*
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yodlee.ApiClient.Client.OpenAPIDateConverter;

namespace Yodlee.ApiClient.Model
{
    /// <summary>
    /// FullAccountNumbers
    /// </summary>
    [DataContract(Name = "FullAccountNumbers")]
    public partial class FullAccountNumbers : IEquatable<FullAccountNumbers>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FullAccountNumbers" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public FullAccountNumbers()
        {
        }

        /// <summary>
        /// The payment account number is used for payments in all regions, this may be looked as an ACH account number in the US.&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /partner/paymentProcessor/account&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The payment account number is used for payments in all regions, this may be looked as an ACH account number in the US.&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /partner/paymentProcessor/account&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "paymentAccountNumber", EmitDefaultValue = false)]
        public string PaymentAccountNumber { get; private set; }

        /// <summary>
        /// Returns false as PaymentAccountNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentAccountNumber()
        {
            return false;
        }
        /// <summary>
        /// The unmasked account number is same as account number that is used to refer to an account and is not partial or masked.&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /partner/paymentProcessor/account&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The unmasked account number is same as account number that is used to refer to an account and is not partial or masked.&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /partner/paymentProcessor/account&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "unmaskedAccountNumber", EmitDefaultValue = false)]
        public string UnmaskedAccountNumber { get; private set; }

        /// <summary>
        /// Returns false as UnmaskedAccountNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUnmaskedAccountNumber()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FullAccountNumbers {\n");
            sb.Append("  PaymentAccountNumber: ").Append(PaymentAccountNumber).Append("\n");
            sb.Append("  UnmaskedAccountNumber: ").Append(UnmaskedAccountNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FullAccountNumbers);
        }

        /// <summary>
        /// Returns true if FullAccountNumbers instances are equal
        /// </summary>
        /// <param name="input">Instance of FullAccountNumbers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FullAccountNumbers input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PaymentAccountNumber == input.PaymentAccountNumber ||
                    (this.PaymentAccountNumber != null &&
                    this.PaymentAccountNumber.Equals(input.PaymentAccountNumber))
                ) && 
                (
                    this.UnmaskedAccountNumber == input.UnmaskedAccountNumber ||
                    (this.UnmaskedAccountNumber != null &&
                    this.UnmaskedAccountNumber.Equals(input.UnmaskedAccountNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PaymentAccountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentAccountNumber.GetHashCode();
                }
                if (this.UnmaskedAccountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.UnmaskedAccountNumber.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
