/*
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yodlee.ApiClient.Client.OpenAPIDateConverter;

namespace Yodlee.ApiClient.Model
{
    /// <summary>
    /// CobrandLoginResponse
    /// </summary>
    [DataContract(Name = "CobrandLoginResponse")]
    public partial class CobrandLoginResponse : IEquatable<CobrandLoginResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CobrandLoginResponse" /> class.
        /// </summary>
        /// <param name="session">session.</param>
        public CobrandLoginResponse(CobrandSession session = default(CobrandSession))
        {
            this.Session = session;
        }

        /// <summary>
        /// Gets or Sets Session
        /// </summary>
        [DataMember(Name = "session", EmitDefaultValue = false)]
        public CobrandSession Session { get; set; }

        /// <summary>
        /// Unique identifier of the cobrand (customer) in the system.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST cobrand/login&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Unique identifier of the cobrand (customer) in the system.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST cobrand/login&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "cobrandId", EmitDefaultValue = false)]
        public long CobrandId { get; private set; }

        /// <summary>
        /// Returns false as CobrandId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCobrandId()
        {
            return false;
        }
        /// <summary>
        /// The application identifier.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST cobrand/login&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The application identifier.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST cobrand/login&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "applicationId", EmitDefaultValue = false)]
        public string ApplicationId { get; private set; }

        /// <summary>
        /// Returns false as ApplicationId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApplicationId()
        {
            return false;
        }
        /// <summary>
        /// The customer&#39;s locale that will be considered for the localization functionality.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST cobrand/login&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The customer&#39;s locale that will be considered for the localization functionality.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST cobrand/login&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "locale", EmitDefaultValue = false)]
        public string Locale { get; private set; }

        /// <summary>
        /// Returns false as Locale should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLocale()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CobrandLoginResponse {\n");
            sb.Append("  Session: ").Append(Session).Append("\n");
            sb.Append("  CobrandId: ").Append(CobrandId).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CobrandLoginResponse);
        }

        /// <summary>
        /// Returns true if CobrandLoginResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CobrandLoginResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CobrandLoginResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Session == input.Session ||
                    (this.Session != null &&
                    this.Session.Equals(input.Session))
                ) && 
                (
                    this.CobrandId == input.CobrandId ||
                    this.CobrandId.Equals(input.CobrandId)
                ) && 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Session != null)
                {
                    hashCode = (hashCode * 59) + this.Session.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CobrandId.GetHashCode();
                if (this.ApplicationId != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationId.GetHashCode();
                }
                if (this.Locale != null)
                {
                    hashCode = (hashCode * 59) + this.Locale.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
