/*
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yodlee.ApiClient.Client.OpenAPIDateConverter;

namespace Yodlee.ApiClient.Model
{
    /// <summary>
    /// DerivedNetworth
    /// </summary>
    [DataContract(Name = "DerivedNetworth")]
    public partial class DerivedNetworth : IEquatable<DerivedNetworth>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DerivedNetworth" /> class.
        /// </summary>
        /// <param name="liability">liability.</param>
        /// <param name="networth">networth.</param>
        /// <param name="asset">asset.</param>
        public DerivedNetworth(Money liability = default(Money), Money networth = default(Money), Money asset = default(Money))
        {
            this.Liability = liability;
            this.Networth = networth;
            this.Asset = asset;
        }

        /// <summary>
        /// The date as of when the networth information is provided.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, creditcard, investment, insurance, realEstate, loan&lt;br&gt;
        /// </summary>
        /// <value>The date as of when the networth information is provided.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, creditcard, investment, insurance, realEstate, loan&lt;br&gt;</value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public string Date { get; private set; }

        /// <summary>
        /// Returns false as Date should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDate()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Liability
        /// </summary>
        [DataMember(Name = "liability", EmitDefaultValue = false)]
        public Money Liability { get; set; }

        /// <summary>
        /// Balances of the accounts over the period of time.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, creditcard, investment, insurance, realEstate, loan&lt;br&gt;
        /// </summary>
        /// <value>Balances of the accounts over the period of time.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, creditcard, investment, insurance, realEstate, loan&lt;br&gt;</value>
        [DataMember(Name = "historicalBalances", EmitDefaultValue = false)]
        public List<DerivedNetworthHistoricalBalance> HistoricalBalances { get; private set; }

        /// <summary>
        /// Returns false as HistoricalBalances should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHistoricalBalances()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Networth
        /// </summary>
        [DataMember(Name = "networth", EmitDefaultValue = false)]
        public Money Networth { get; set; }

        /// <summary>
        /// Gets or Sets Asset
        /// </summary>
        [DataMember(Name = "asset", EmitDefaultValue = false)]
        public Money Asset { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DerivedNetworth {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Liability: ").Append(Liability).Append("\n");
            sb.Append("  HistoricalBalances: ").Append(HistoricalBalances).Append("\n");
            sb.Append("  Networth: ").Append(Networth).Append("\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DerivedNetworth);
        }

        /// <summary>
        /// Returns true if DerivedNetworth instances are equal
        /// </summary>
        /// <param name="input">Instance of DerivedNetworth to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DerivedNetworth input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Liability == input.Liability ||
                    (this.Liability != null &&
                    this.Liability.Equals(input.Liability))
                ) && 
                (
                    this.HistoricalBalances == input.HistoricalBalances ||
                    this.HistoricalBalances != null &&
                    input.HistoricalBalances != null &&
                    this.HistoricalBalances.SequenceEqual(input.HistoricalBalances)
                ) && 
                (
                    this.Networth == input.Networth ||
                    (this.Networth != null &&
                    this.Networth.Equals(input.Networth))
                ) && 
                (
                    this.Asset == input.Asset ||
                    (this.Asset != null &&
                    this.Asset.Equals(input.Asset))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.Liability != null)
                {
                    hashCode = (hashCode * 59) + this.Liability.GetHashCode();
                }
                if (this.HistoricalBalances != null)
                {
                    hashCode = (hashCode * 59) + this.HistoricalBalances.GetHashCode();
                }
                if (this.Networth != null)
                {
                    hashCode = (hashCode * 59) + this.Networth.GetHashCode();
                }
                if (this.Asset != null)
                {
                    hashCode = (hashCode * 59) + this.Asset.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
