/*
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yodlee.ApiClient.Client.OpenAPIDateConverter;

namespace Yodlee.ApiClient.Model
{
    /// <summary>
    /// Scope
    /// </summary>
    [DataContract(Name = "Scope")]
    public partial class Scope : IEquatable<Scope>, IValidatableObject
    {
        /// <summary>
        /// Unique Dataset Cluster name for the consent group like &lt;br/&gt; ACCOUNT_DETAILS&lt;br/&gt; STATEMENT_DETAILS&lt;br/&gt; CONTACT_DETAILS&lt;br/&gt; TRANSACTION_DETAILS
        /// </summary>
        /// <value>Unique Dataset Cluster name for the consent group like &lt;br/&gt; ACCOUNT_DETAILS&lt;br/&gt; STATEMENT_DETAILS&lt;br/&gt; CONTACT_DETAILS&lt;br/&gt; TRANSACTION_DETAILS</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScopeIdEnum
        {
            /// <summary>
            /// Enum ACCOUNTDETAILS for value: ACCOUNT_DETAILS
            /// </summary>
            [EnumMember(Value = "ACCOUNT_DETAILS")]
            ACCOUNTDETAILS = 1,

            /// <summary>
            /// Enum TRANSACTIONDETAILS for value: TRANSACTION_DETAILS
            /// </summary>
            [EnumMember(Value = "TRANSACTION_DETAILS")]
            TRANSACTIONDETAILS = 2,

            /// <summary>
            /// Enum STATEMENTDETAILS for value: STATEMENT_DETAILS
            /// </summary>
            [EnumMember(Value = "STATEMENT_DETAILS")]
            STATEMENTDETAILS = 3,

            /// <summary>
            /// Enum CONTACTDETAILS for value: CONTACT_DETAILS
            /// </summary>
            [EnumMember(Value = "CONTACT_DETAILS")]
            CONTACTDETAILS = 4

        }


        /// <summary>
        /// Unique Dataset Cluster name for the consent group like &lt;br/&gt; ACCOUNT_DETAILS&lt;br/&gt; STATEMENT_DETAILS&lt;br/&gt; CONTACT_DETAILS&lt;br/&gt; TRANSACTION_DETAILS
        /// </summary>
        /// <value>Unique Dataset Cluster name for the consent group like &lt;br/&gt; ACCOUNT_DETAILS&lt;br/&gt; STATEMENT_DETAILS&lt;br/&gt; CONTACT_DETAILS&lt;br/&gt; TRANSACTION_DETAILS</value>
        [DataMember(Name = "scopeId", IsRequired = true, EmitDefaultValue = true)]
        public ScopeIdEnum ScopeId { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Scope" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Scope() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Scope" /> class.
        /// </summary>
        /// <param name="titleBody">Title body that explains the purpose of the scope. (required).</param>
        /// <param name="scopeId">Unique Dataset Cluster name for the consent group like &lt;br/&gt; ACCOUNT_DETAILS&lt;br/&gt; STATEMENT_DETAILS&lt;br/&gt; CONTACT_DETAILS&lt;br/&gt; TRANSACTION_DETAILS (required).</param>
        /// <param name="datasetAttributes">Permissions that are associated with the Consent group like&lt;br/&gt; BASIC_AGG_DATA.BASIC_ACCOUNT_INFO&lt;br/&gt; BASIC_AGG_DATA.ACCOUNT_DETAILS&lt;br/&gt; BASIC_AGG_DATA.STATEMENTS&lt;br/&gt; BASIC_AGG_DATA.TRANSACTIONS&lt;br/&gt; ACCT_PROFILE.HOLDER_NAME&lt;br/&gt; ACCT_PROFILE.FULL_ACCT_NUMBER&lt;br/&gt; ACCT_PROFILE.BANK_TRANSFER_CODE&lt;br/&gt; ACCT_PROFILE.HOLDER_DETAILS.</param>
        /// <param name="title">Title for the Data Cluster. (required).</param>
        public Scope(List<string> titleBody = default(List<string>), ScopeIdEnum scopeId = default(ScopeIdEnum), List<string> datasetAttributes = default(List<string>), string title = default(string))
        {
            // to ensure "titleBody" is required (not null)
            if (titleBody == null)
            {
                throw new ArgumentNullException("titleBody is a required property for Scope and cannot be null");
            }
            this.TitleBody = titleBody;
            this.ScopeId = scopeId;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for Scope and cannot be null");
            }
            this.Title = title;
            this.DatasetAttributes = datasetAttributes;
        }

        /// <summary>
        /// Title body that explains the purpose of the scope.
        /// </summary>
        /// <value>Title body that explains the purpose of the scope.</value>
        [DataMember(Name = "titleBody", IsRequired = true, EmitDefaultValue = true)]
        public List<string> TitleBody { get; set; }

        /// <summary>
        /// Permissions that are associated with the Consent group like&lt;br/&gt; BASIC_AGG_DATA.BASIC_ACCOUNT_INFO&lt;br/&gt; BASIC_AGG_DATA.ACCOUNT_DETAILS&lt;br/&gt; BASIC_AGG_DATA.STATEMENTS&lt;br/&gt; BASIC_AGG_DATA.TRANSACTIONS&lt;br/&gt; ACCT_PROFILE.HOLDER_NAME&lt;br/&gt; ACCT_PROFILE.FULL_ACCT_NUMBER&lt;br/&gt; ACCT_PROFILE.BANK_TRANSFER_CODE&lt;br/&gt; ACCT_PROFILE.HOLDER_DETAILS
        /// </summary>
        /// <value>Permissions that are associated with the Consent group like&lt;br/&gt; BASIC_AGG_DATA.BASIC_ACCOUNT_INFO&lt;br/&gt; BASIC_AGG_DATA.ACCOUNT_DETAILS&lt;br/&gt; BASIC_AGG_DATA.STATEMENTS&lt;br/&gt; BASIC_AGG_DATA.TRANSACTIONS&lt;br/&gt; ACCT_PROFILE.HOLDER_NAME&lt;br/&gt; ACCT_PROFILE.FULL_ACCT_NUMBER&lt;br/&gt; ACCT_PROFILE.BANK_TRANSFER_CODE&lt;br/&gt; ACCT_PROFILE.HOLDER_DETAILS</value>
        [DataMember(Name = "datasetAttributes", EmitDefaultValue = false)]
        public List<string> DatasetAttributes { get; set; }

        /// <summary>
        /// Title for the Data Cluster.
        /// </summary>
        /// <value>Title for the Data Cluster.</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Scope {\n");
            sb.Append("  TitleBody: ").Append(TitleBody).Append("\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  DatasetAttributes: ").Append(DatasetAttributes).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Scope);
        }

        /// <summary>
        /// Returns true if Scope instances are equal
        /// </summary>
        /// <param name="input">Instance of Scope to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Scope input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TitleBody == input.TitleBody ||
                    this.TitleBody != null &&
                    input.TitleBody != null &&
                    this.TitleBody.SequenceEqual(input.TitleBody)
                ) && 
                (
                    this.ScopeId == input.ScopeId ||
                    this.ScopeId.Equals(input.ScopeId)
                ) && 
                (
                    this.DatasetAttributes == input.DatasetAttributes ||
                    this.DatasetAttributes != null &&
                    input.DatasetAttributes != null &&
                    this.DatasetAttributes.SequenceEqual(input.DatasetAttributes)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TitleBody != null)
                {
                    hashCode = (hashCode * 59) + this.TitleBody.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ScopeId.GetHashCode();
                if (this.DatasetAttributes != null)
                {
                    hashCode = (hashCode * 59) + this.DatasetAttributes.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
