/*
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yodlee.ApiClient.Client.OpenAPIDateConverter;

namespace Yodlee.ApiClient.Model
{
    /// <summary>
    /// Institution
    /// </summary>
    [DataContract(Name = "Institution")]
    public partial class Institution : IEquatable<Institution>, IValidatableObject
    {
        /// <summary>
        /// Indicates the priority for which the service is invoked.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>Indicates the priority for which the service is invoked.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PRIORITYEnum
        {
            /// <summary>
            /// Enum POPULAR for value: POPULAR
            /// </summary>
            [EnumMember(Value = "POPULAR")]
            POPULAR = 1,

            /// <summary>
            /// Enum SUGGESTED for value: SUGGESTED
            /// </summary>
            [EnumMember(Value = "SUGGESTED")]
            SUGGESTED = 2,

            /// <summary>
            /// Enum COBRAND for value: COBRAND
            /// </summary>
            [EnumMember(Value = "COBRAND")]
            COBRAND = 3,

            /// <summary>
            /// Enum SEARCH for value: SEARCH
            /// </summary>
            [EnumMember(Value = "SEARCH")]
            SEARCH = 4,

            /// <summary>
            /// Enum ALL for value: ALL
            /// </summary>
            [EnumMember(Value = "ALL")]
            ALL = 5

        }


        /// <summary>
        /// Indicates the priority for which the service is invoked.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
        /// </summary>
        /// <value>Indicates the priority for which the service is invoked.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;</value>
        [DataMember(Name = "PRIORITY", EmitDefaultValue = false)]
        public PRIORITYEnum? PRIORITY { get; set; }

        /// <summary>
        /// Returns false as PRIORITY should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePRIORITY()
        {
            return false;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Institution" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Institution()
        {
        }

        /// <summary>
        /// The language in which the provider details are provided. For example, a site supports two languages English and French. English being the primary language, the provider response will be provided in French depending on the user&#39;s locale. The language follows the two letter ISO code.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The language in which the provider details are provided. For example, a site supports two languages English and French. English being the primary language, the provider response will be provided in French depending on the user&#39;s locale. The language follows the two letter ISO code.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "languageISOCode", EmitDefaultValue = false)]
        public string LanguageISOCode { get; private set; }

        /// <summary>
        /// Returns false as LanguageISOCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLanguageISOCode()
        {
            return false;
        }
        /// <summary>
        /// Favicon link of the provider.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Favicon link of the provider.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "favicon", EmitDefaultValue = false)]
        public string Favicon { get; private set; }

        /// <summary>
        /// Returns false as Favicon should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFavicon()
        {
            return false;
        }
        /// <summary>
        /// Country to which the provider belongs.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Country to which the provider belongs.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "countryISOCode", EmitDefaultValue = false)]
        public string CountryISOCode { get; private set; }

        /// <summary>
        /// Returns false as CountryISOCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCountryISOCode()
        {
            return false;
        }
        /// <summary>
        /// Indicates that the site has been added by the user at least once.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Indicates that the site has been added by the user at least once.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "isAddedByUser", EmitDefaultValue = false)]
        public string IsAddedByUser { get; private set; }

        /// <summary>
        /// Returns false as IsAddedByUser should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsAddedByUser()
        {
            return false;
        }
        /// <summary>
        /// The primary language of the site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The primary language of the site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "primaryLanguageISOCode", EmitDefaultValue = false)]
        public string PrimaryLanguageISOCode { get; private set; }

        /// <summary>
        /// Returns false as PrimaryLanguageISOCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePrimaryLanguageISOCode()
        {
            return false;
        }
        /// <summary>
        /// The base URL of the provider&#39;s site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The base URL of the provider&#39;s site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "baseUrl", EmitDefaultValue = false)]
        public string BaseUrl { get; private set; }

        /// <summary>
        /// Returns false as BaseUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBaseUrl()
        {
            return false;
        }
        /// <summary>
        /// The login URL of the provider&#39;s site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The login URL of the provider&#39;s site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "loginUrl", EmitDefaultValue = false)]
        public string LoginUrl { get; private set; }

        /// <summary>
        /// Returns false as LoginUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLoginUrl()
        {
            return false;
        }
        /// <summary>
        /// providerId&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>providerId&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "providerId", EmitDefaultValue = false)]
        public List<long> ProviderId { get; private set; }

        /// <summary>
        /// Returns false as ProviderId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProviderId()
        {
            return false;
        }
        /// <summary>
        /// The name of a provider site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The name of a provider site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; private set; }

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return false;
        }
        /// <summary>
        /// The logo link of the provider institution. The link will return the logo in the PNG format.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The logo link of the provider institution. The link will return the logo in the PNG format.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "logo", EmitDefaultValue = false)]
        public string Logo { get; private set; }

        /// <summary>
        /// Returns false as Logo should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLogo()
        {
            return false;
        }
        /// <summary>
        /// Unique identifier for the provider site.(e.g., financial institution sites, biller sites, lender sites, etc.).&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Unique identifier for the provider site.(e.g., financial institution sites, biller sites, lender sites, etc.).&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Determines when the provider information was updated by Yodlee. If the customer caches the data, the cache is recommended to be refreshed based on this field.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>Determines when the provider information was updated by Yodlee. If the customer caches the data, the cache is recommended to be refreshed based on this field.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET institutions&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public string LastModified { get; private set; }

        /// <summary>
        /// Returns false as LastModified should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastModified()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Institution {\n");
            sb.Append("  LanguageISOCode: ").Append(LanguageISOCode).Append("\n");
            sb.Append("  Favicon: ").Append(Favicon).Append("\n");
            sb.Append("  CountryISOCode: ").Append(CountryISOCode).Append("\n");
            sb.Append("  IsAddedByUser: ").Append(IsAddedByUser).Append("\n");
            sb.Append("  PRIORITY: ").Append(PRIORITY).Append("\n");
            sb.Append("  PrimaryLanguageISOCode: ").Append(PrimaryLanguageISOCode).Append("\n");
            sb.Append("  BaseUrl: ").Append(BaseUrl).Append("\n");
            sb.Append("  LoginUrl: ").Append(LoginUrl).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Institution);
        }

        /// <summary>
        /// Returns true if Institution instances are equal
        /// </summary>
        /// <param name="input">Instance of Institution to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Institution input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LanguageISOCode == input.LanguageISOCode ||
                    (this.LanguageISOCode != null &&
                    this.LanguageISOCode.Equals(input.LanguageISOCode))
                ) && 
                (
                    this.Favicon == input.Favicon ||
                    (this.Favicon != null &&
                    this.Favicon.Equals(input.Favicon))
                ) && 
                (
                    this.CountryISOCode == input.CountryISOCode ||
                    (this.CountryISOCode != null &&
                    this.CountryISOCode.Equals(input.CountryISOCode))
                ) && 
                (
                    this.IsAddedByUser == input.IsAddedByUser ||
                    (this.IsAddedByUser != null &&
                    this.IsAddedByUser.Equals(input.IsAddedByUser))
                ) && 
                (
                    this.PRIORITY == input.PRIORITY ||
                    this.PRIORITY.Equals(input.PRIORITY)
                ) && 
                (
                    this.PrimaryLanguageISOCode == input.PrimaryLanguageISOCode ||
                    (this.PrimaryLanguageISOCode != null &&
                    this.PrimaryLanguageISOCode.Equals(input.PrimaryLanguageISOCode))
                ) && 
                (
                    this.BaseUrl == input.BaseUrl ||
                    (this.BaseUrl != null &&
                    this.BaseUrl.Equals(input.BaseUrl))
                ) && 
                (
                    this.LoginUrl == input.LoginUrl ||
                    (this.LoginUrl != null &&
                    this.LoginUrl.Equals(input.LoginUrl))
                ) && 
                (
                    this.ProviderId == input.ProviderId ||
                    this.ProviderId != null &&
                    input.ProviderId != null &&
                    this.ProviderId.SequenceEqual(input.ProviderId)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Logo == input.Logo ||
                    (this.Logo != null &&
                    this.Logo.Equals(input.Logo))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LanguageISOCode != null)
                {
                    hashCode = (hashCode * 59) + this.LanguageISOCode.GetHashCode();
                }
                if (this.Favicon != null)
                {
                    hashCode = (hashCode * 59) + this.Favicon.GetHashCode();
                }
                if (this.CountryISOCode != null)
                {
                    hashCode = (hashCode * 59) + this.CountryISOCode.GetHashCode();
                }
                if (this.IsAddedByUser != null)
                {
                    hashCode = (hashCode * 59) + this.IsAddedByUser.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PRIORITY.GetHashCode();
                if (this.PrimaryLanguageISOCode != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryLanguageISOCode.GetHashCode();
                }
                if (this.BaseUrl != null)
                {
                    hashCode = (hashCode * 59) + this.BaseUrl.GetHashCode();
                }
                if (this.LoginUrl != null)
                {
                    hashCode = (hashCode * 59) + this.LoginUrl.GetHashCode();
                }
                if (this.ProviderId != null)
                {
                    hashCode = (hashCode * 59) + this.ProviderId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Logo != null)
                {
                    hashCode = (hashCode * 59) + this.Logo.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.LastModified != null)
                {
                    hashCode = (hashCode * 59) + this.LastModified.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
