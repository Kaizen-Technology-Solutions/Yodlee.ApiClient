/*
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yodlee.ApiClient.Client.OpenAPIDateConverter;

namespace Yodlee.ApiClient.Model
{
    /// <summary>
    /// PaymentAccountBalance
    /// </summary>
    [DataContract(Name = "PaymentAccountBalance")]
    public partial class PaymentAccountBalance : IEquatable<PaymentAccountBalance>, IValidatableObject
    {
        /// <summary>
        /// The status of the account that is updated by the user through an application or an API.&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;ACTIVE:&lt;/b&gt; All the added aggregated accounts status will be made \&quot;ACTIVE\&quot; by default.&lt;/li&gt;&lt;li&gt;&lt;b&gt;TO_BE_CLOSED:&lt;/b&gt; If the aggregated accounts are not found or closed in the data provider site, Yodlee system marks the status as TO_BE_CLOSED.&lt;/li&gt;&lt;li&gt;&lt;b&gt;INACTIVE:&lt;/b&gt; Users can update the status as INACTIVE to stop updating and to stop considering the account in other services.&lt;/li&gt;&lt;li&gt;&lt;b&gt;CLOSED:&lt;/b&gt; Users can update the status as CLOSED, if the account is closed with the provider.&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /partner/paymentProcessor/account&lt;/li&gt;&lt;li&gt;GET /partner/paymentProcessor/account/balance&lt;/li&gt;&lt;li&gt;GET /partner/paymentProcessor/account/holder&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The status of the account that is updated by the user through an application or an API.&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;ACTIVE:&lt;/b&gt; All the added aggregated accounts status will be made \&quot;ACTIVE\&quot; by default.&lt;/li&gt;&lt;li&gt;&lt;b&gt;TO_BE_CLOSED:&lt;/b&gt; If the aggregated accounts are not found or closed in the data provider site, Yodlee system marks the status as TO_BE_CLOSED.&lt;/li&gt;&lt;li&gt;&lt;b&gt;INACTIVE:&lt;/b&gt; Users can update the status as INACTIVE to stop updating and to stop considering the account in other services.&lt;/li&gt;&lt;li&gt;&lt;b&gt;CLOSED:&lt;/b&gt; Users can update the status as CLOSED, if the account is closed with the provider.&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /partner/paymentProcessor/account&lt;/li&gt;&lt;li&gt;GET /partner/paymentProcessor/account/balance&lt;/li&gt;&lt;li&gt;GET /partner/paymentProcessor/account/holder&lt;/li&gt;&lt;/ul&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccountStatusEnum
        {
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,

            /// <summary>
            /// Enum INACTIVE for value: INACTIVE
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE = 2,

            /// <summary>
            /// Enum TOBECLOSED for value: TO_BE_CLOSED
            /// </summary>
            [EnumMember(Value = "TO_BE_CLOSED")]
            TOBECLOSED = 3,

            /// <summary>
            /// Enum CLOSED for value: CLOSED
            /// </summary>
            [EnumMember(Value = "CLOSED")]
            CLOSED = 4,

            /// <summary>
            /// Enum DELETED for value: DELETED
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETED = 5

        }


        /// <summary>
        /// The status of the account that is updated by the user through an application or an API.&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;ACTIVE:&lt;/b&gt; All the added aggregated accounts status will be made \&quot;ACTIVE\&quot; by default.&lt;/li&gt;&lt;li&gt;&lt;b&gt;TO_BE_CLOSED:&lt;/b&gt; If the aggregated accounts are not found or closed in the data provider site, Yodlee system marks the status as TO_BE_CLOSED.&lt;/li&gt;&lt;li&gt;&lt;b&gt;INACTIVE:&lt;/b&gt; Users can update the status as INACTIVE to stop updating and to stop considering the account in other services.&lt;/li&gt;&lt;li&gt;&lt;b&gt;CLOSED:&lt;/b&gt; Users can update the status as CLOSED, if the account is closed with the provider.&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /partner/paymentProcessor/account&lt;/li&gt;&lt;li&gt;GET /partner/paymentProcessor/account/balance&lt;/li&gt;&lt;li&gt;GET /partner/paymentProcessor/account/holder&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The status of the account that is updated by the user through an application or an API.&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;ACTIVE:&lt;/b&gt; All the added aggregated accounts status will be made \&quot;ACTIVE\&quot; by default.&lt;/li&gt;&lt;li&gt;&lt;b&gt;TO_BE_CLOSED:&lt;/b&gt; If the aggregated accounts are not found or closed in the data provider site, Yodlee system marks the status as TO_BE_CLOSED.&lt;/li&gt;&lt;li&gt;&lt;b&gt;INACTIVE:&lt;/b&gt; Users can update the status as INACTIVE to stop updating and to stop considering the account in other services.&lt;/li&gt;&lt;li&gt;&lt;b&gt;CLOSED:&lt;/b&gt; Users can update the status as CLOSED, if the account is closed with the provider.&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /partner/paymentProcessor/account&lt;/li&gt;&lt;li&gt;GET /partner/paymentProcessor/account/balance&lt;/li&gt;&lt;li&gt;GET /partner/paymentProcessor/account/holder&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "accountStatus", EmitDefaultValue = false)]
        public AccountStatusEnum? AccountStatus { get; set; }

        /// <summary>
        /// Returns false as AccountStatus should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAccountStatus()
        {
            return false;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentAccountBalance" /> class.
        /// </summary>
        /// <param name="currentBalance">currentBalance.</param>
        /// <param name="availableBalance">availableBalance.</param>
        public PaymentAccountBalance(Money currentBalance = default(Money), Money availableBalance = default(Money))
        {
            this.CurrentBalance = currentBalance;
            this.AvailableBalance = availableBalance;
        }

        /// <summary>
        /// The date time the account information was last retrieved from the provider site and updated in the Yodlee system.&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /partner/paymentProcessor/account&lt;/li&gt;&lt;li&gt;GET /partner/paymentProcessor/account/balance&lt;/li&gt;&lt;li&gt;GET /partner/paymentProcessor/account/holder&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The date time the account information was last retrieved from the provider site and updated in the Yodlee system.&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /partner/paymentProcessor/account&lt;/li&gt;&lt;li&gt;GET /partner/paymentProcessor/account/balance&lt;/li&gt;&lt;li&gt;GET /partner/paymentProcessor/account/holder&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "lastUpdated", EmitDefaultValue = false)]
        public string LastUpdated { get; private set; }

        /// <summary>
        /// Returns false as LastUpdated should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastUpdated()
        {
            return false;
        }
        /// <summary>
        /// The account name as it appears at the site.&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /partner/paymentProcessor/account&lt;/li&gt;&lt;li&gt;GET /partner/paymentProcessor/account/balance&lt;/li&gt;&lt;li&gt;GET /partner/paymentProcessor/account/holder&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The account name as it appears at the site.&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /partner/paymentProcessor/account&lt;/li&gt;&lt;li&gt;GET /partner/paymentProcessor/account/balance&lt;/li&gt;&lt;li&gt;GET /partner/paymentProcessor/account/holder&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "accountName", EmitDefaultValue = false)]
        public string AccountName { get; private set; }

        /// <summary>
        /// Returns false as AccountName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAccountName()
        {
            return false;
        }
        /// <summary>
        /// The type of account that is aggregated, i.e., savings, checking, charge, etc. The account type is derived based on the attributes of the account. &lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /partner/paymentProcessor/account&lt;/li&gt;&lt;li&gt;GET /partner/paymentProcessor/account/balance&lt;/li&gt;&lt;li&gt;GET /partner/paymentProcessor/account/holder&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The type of account that is aggregated, i.e., savings, checking, charge, etc. The account type is derived based on the attributes of the account. &lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /partner/paymentProcessor/account&lt;/li&gt;&lt;li&gt;GET /partner/paymentProcessor/account/balance&lt;/li&gt;&lt;li&gt;GET /partner/paymentProcessor/account/holder&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "accountType", EmitDefaultValue = false)]
        public string AccountType { get; private set; }

        /// <summary>
        /// Returns false as AccountType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAccountType()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CurrentBalance
        /// </summary>
        [DataMember(Name = "currentBalance", EmitDefaultValue = false)]
        public Money CurrentBalance { get; set; }

        /// <summary>
        /// The primary key of the account resource and the unique identifier for the account.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /partner/paymentProcessor/account&lt;/li&gt;&lt;li&gt;GET /partner/paymentProcessor/account/balance&lt;/li&gt;&lt;li&gt;GET /partner/paymentProcessor/account/holder&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The primary key of the account resource and the unique identifier for the account.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET /partner/paymentProcessor/account&lt;/li&gt;&lt;li&gt;GET /partner/paymentProcessor/account/balance&lt;/li&gt;&lt;li&gt;GET /partner/paymentProcessor/account/holder&lt;/li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets AvailableBalance
        /// </summary>
        [DataMember(Name = "availableBalance", EmitDefaultValue = false)]
        public Money AvailableBalance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentAccountBalance {\n");
            sb.Append("  AccountStatus: ").Append(AccountStatus).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  CurrentBalance: ").Append(CurrentBalance).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AvailableBalance: ").Append(AvailableBalance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentAccountBalance);
        }

        /// <summary>
        /// Returns true if PaymentAccountBalance instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentAccountBalance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentAccountBalance input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountStatus == input.AccountStatus ||
                    this.AccountStatus.Equals(input.AccountStatus)
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.CurrentBalance == input.CurrentBalance ||
                    (this.CurrentBalance != null &&
                    this.CurrentBalance.Equals(input.CurrentBalance))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.AvailableBalance == input.AvailableBalance ||
                    (this.AvailableBalance != null &&
                    this.AvailableBalance.Equals(input.AvailableBalance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AccountStatus.GetHashCode();
                if (this.LastUpdated != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdated.GetHashCode();
                }
                if (this.AccountName != null)
                {
                    hashCode = (hashCode * 59) + this.AccountName.GetHashCode();
                }
                if (this.AccountType != null)
                {
                    hashCode = (hashCode * 59) + this.AccountType.GetHashCode();
                }
                if (this.CurrentBalance != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentBalance.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.AvailableBalance != null)
                {
                    hashCode = (hashCode * 59) + this.AvailableBalance.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
