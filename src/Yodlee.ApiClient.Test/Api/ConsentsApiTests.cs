/*
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Yodlee.ApiClient.Client;
using Yodlee.ApiClient.Api;
// uncomment below to import models
//using Yodlee.ApiClient.Model;

namespace Yodlee.ApiClient.Test.Api
{
    /// <summary>
    ///  Class for testing ConsentsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ConsentsApiTests : IDisposable
    {
        private ConsentsApi instance;

        public ConsentsApiTests()
        {
            instance = new ConsentsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ConsentsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ConsentsApi
            //Assert.IsType<ConsentsApi>(instance);
        }

        /// <summary>
        /// Test CreateConsent
        /// </summary>
        [Fact]
        public void CreateConsentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateConsentRequest consentRequest = null;
            //var response = instance.CreateConsent(consentRequest);
            //Assert.IsType<CreatedConsentResponse>(response);
        }

        /// <summary>
        /// Test GetConsentDetails
        /// </summary>
        [Fact]
        public void GetConsentDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long consentId = null;
            //var response = instance.GetConsentDetails(consentId);
            //Assert.IsType<UpdatedConsentResponse>(response);
        }

        /// <summary>
        /// Test GetConsentPreferences
        /// </summary>
        [Fact]
        public void GetConsentPreferencesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string consentId = null;
            //var response = instance.GetConsentPreferences(consentId);
            //Assert.IsType<ConsentPreferencesResponse>(response);
        }

        /// <summary>
        /// Test GetConsents
        /// </summary>
        [Fact]
        public void GetConsentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string consentIds = null;
            //string include = null;
            //string providerAccountIds = null;
            //var response = instance.GetConsents(consentIds, include, providerAccountIds);
            //Assert.IsType<ConsentResponse>(response);
        }

        /// <summary>
        /// Test RenewConsent
        /// </summary>
        [Fact]
        public void RenewConsentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long consentId = null;
            //RenewConsentRequest renewConsentRequest = null;
            //var response = instance.RenewConsent(consentId, renewConsentRequest);
            //Assert.IsType<RenewConsentResponse>(response);
        }

        /// <summary>
        /// Test UpdateConsent
        /// </summary>
        [Fact]
        public void UpdateConsentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long consentId = null;
            //UpdateConsentRequest consentRequest = null;
            //var response = instance.UpdateConsent(consentId, consentRequest);
            //Assert.IsType<UpdatedConsentResponse>(response);
        }
    }
}
