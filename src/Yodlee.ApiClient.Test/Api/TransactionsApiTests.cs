/*
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Yodlee.ApiClient.Client;
using Yodlee.ApiClient.Api;
// uncomment below to import models
//using Yodlee.ApiClient.Model;

namespace Yodlee.ApiClient.Test.Api
{
    /// <summary>
    ///  Class for testing TransactionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TransactionsApiTests : IDisposable
    {
        private TransactionsApi instance;

        public TransactionsApiTests()
        {
            instance = new TransactionsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TransactionsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TransactionsApi
            //Assert.IsType<TransactionsApi>(instance);
        }

        /// <summary>
        /// Test CreateOrRunTransactionCategorizationRules
        /// </summary>
        [Fact]
        public void CreateOrRunTransactionCategorizationRulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string action = null;
            //string ruleParam = null;
            //instance.CreateOrRunTransactionCategorizationRules(action, ruleParam);
        }

        /// <summary>
        /// Test CreateTransactionCategory
        /// </summary>
        [Fact]
        public void CreateTransactionCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransactionCategoryRequest transactionCategoryRequest = null;
            //instance.CreateTransactionCategory(transactionCategoryRequest);
        }

        /// <summary>
        /// Test DeleteTransactionCategorizationRule
        /// </summary>
        [Fact]
        public void DeleteTransactionCategorizationRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long ruleId = null;
            //instance.DeleteTransactionCategorizationRule(ruleId);
        }

        /// <summary>
        /// Test DeleteTransactionCategory
        /// </summary>
        [Fact]
        public void DeleteTransactionCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long categoryId = null;
            //instance.DeleteTransactionCategory(categoryId);
        }

        /// <summary>
        /// Test GetTransactionCategories
        /// </summary>
        [Fact]
        public void GetTransactionCategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTransactionCategories();
            //Assert.IsType<TransactionCategoryResponse>(response);
        }

        /// <summary>
        /// Test GetTransactionCategorizationRules
        /// </summary>
        [Fact]
        public void GetTransactionCategorizationRulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTransactionCategorizationRules();
            //Assert.IsType<TransactionCategorizationRuleResponse>(response);
        }

        /// <summary>
        /// Test GetTransactionCategorizationRulesDeprecated
        /// </summary>
        [Fact]
        public void GetTransactionCategorizationRulesDeprecatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTransactionCategorizationRulesDeprecated();
            //Assert.IsType<List<TransactionCategorizationRule>>(response);
        }

        /// <summary>
        /// Test GetTransactions
        /// </summary>
        [Fact]
        public void GetTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string baseType = null;
            //string categoryId = null;
            //string categoryType = null;
            //string container = null;
            //string detailCategoryId = null;
            //string fromDate = null;
            //string highLevelCategoryId = null;
            //string keyword = null;
            //int? skip = null;
            //string toDate = null;
            //int? top = null;
            //string type = null;
            //var response = instance.GetTransactions(accountId, baseType, categoryId, categoryType, container, detailCategoryId, fromDate, highLevelCategoryId, keyword, skip, toDate, top, type);
            //Assert.IsType<TransactionResponse>(response);
        }

        /// <summary>
        /// Test GetTransactionsCount
        /// </summary>
        [Fact]
        public void GetTransactionsCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string baseType = null;
            //string categoryId = null;
            //string categoryType = null;
            //string container = null;
            //string detailCategoryId = null;
            //string fromDate = null;
            //string highLevelCategoryId = null;
            //string keyword = null;
            //string toDate = null;
            //string type = null;
            //var response = instance.GetTransactionsCount(accountId, baseType, categoryId, categoryType, container, detailCategoryId, fromDate, highLevelCategoryId, keyword, toDate, type);
            //Assert.IsType<TransactionCountResponse>(response);
        }

        /// <summary>
        /// Test RunTransactionCategorizationRule
        /// </summary>
        [Fact]
        public void RunTransactionCategorizationRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string action = null;
            //long ruleId = null;
            //instance.RunTransactionCategorizationRule(action, ruleId);
        }

        /// <summary>
        /// Test UpdateTransaction
        /// </summary>
        [Fact]
        public void UpdateTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long transactionId = null;
            //TransactionRequest transactionRequest = null;
            //instance.UpdateTransaction(transactionId, transactionRequest);
        }

        /// <summary>
        /// Test UpdateTransactionCategorizationRule
        /// </summary>
        [Fact]
        public void UpdateTransactionCategorizationRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long ruleId = null;
            //TransactionCategorizationRuleRequest transactionCategoriesRuleRequest = null;
            //instance.UpdateTransactionCategorizationRule(ruleId, transactionCategoriesRuleRequest);
        }

        /// <summary>
        /// Test UpdateTransactionCategory
        /// </summary>
        [Fact]
        public void UpdateTransactionCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateCategoryRequest updateCategoryRequest = null;
            //instance.UpdateTransactionCategory(updateCategoryRequest);
        }
    }
}
