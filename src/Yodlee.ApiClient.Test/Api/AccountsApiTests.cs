/*
 * Yodlee Core APIs
 *
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Yodlee.ApiClient.Client;
using Yodlee.ApiClient.Api;
// uncomment below to import models
//using Yodlee.ApiClient.Model;

namespace Yodlee.ApiClient.Test.Api
{
    /// <summary>
    ///  Class for testing AccountsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AccountsApiTests : IDisposable
    {
        private AccountsApi instance;

        public AccountsApiTests()
        {
            instance = new AccountsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AccountsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AccountsApi
            //Assert.IsType<AccountsApi>(instance);
        }

        /// <summary>
        /// Test CreateManualAccount
        /// </summary>
        [Fact]
        public void CreateManualAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateAccountRequest accountParam = null;
            //var response = instance.CreateManualAccount(accountParam);
            //Assert.IsType<CreatedAccountResponse>(response);
        }

        /// <summary>
        /// Test DeleteAccount
        /// </summary>
        [Fact]
        public void DeleteAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long accountId = null;
            //instance.DeleteAccount(accountId);
        }

        /// <summary>
        /// Test EvaluateAddress
        /// </summary>
        [Fact]
        public void EvaluateAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EvaluateAddressRequest addressParam = null;
            //var response = instance.EvaluateAddress(addressParam);
            //Assert.IsType<EvaluateAddressResponse>(response);
        }

        /// <summary>
        /// Test GetAccount
        /// </summary>
        [Fact]
        public void GetAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long accountId = null;
            //string include = null;
            //var response = instance.GetAccount(accountId, include);
            //Assert.IsType<AccountResponse>(response);
        }

        /// <summary>
        /// Test GetAllAccounts
        /// </summary>
        [Fact]
        public void GetAllAccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string container = null;
            //string include = null;
            //string providerAccountId = null;
            //string requestId = null;
            //string status = null;
            //var response = instance.GetAllAccounts(accountId, container, include, providerAccountId, requestId, status);
            //Assert.IsType<AccountResponse>(response);
        }

        /// <summary>
        /// Test GetAssociatedAccounts
        /// </summary>
        [Fact]
        public void GetAssociatedAccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long providerAccountId = null;
            //var response = instance.GetAssociatedAccounts(providerAccountId);
            //Assert.IsType<AssociatedAccountsResponse>(response);
        }

        /// <summary>
        /// Test GetHistoricalBalances
        /// </summary>
        [Fact]
        public void GetHistoricalBalancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string fromDate = null;
            //bool? includeCF = null;
            //string interval = null;
            //int? skip = null;
            //string toDate = null;
            //int? top = null;
            //var response = instance.GetHistoricalBalances(accountId, fromDate, includeCF, interval, skip, toDate, top);
            //Assert.IsType<AccountHistoricalBalancesResponse>(response);
        }

        /// <summary>
        /// Test GetLatestBalances
        /// </summary>
        [Fact]
        public void GetLatestBalancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string providerAccountId = null;
            //var response = instance.GetLatestBalances(accountId, providerAccountId);
            //Assert.IsType<AccountBalanceResponse>(response);
        }

        /// <summary>
        /// Test MigrateAccounts
        /// </summary>
        [Fact]
        public void MigrateAccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long providerAccountId = null;
            //var response = instance.MigrateAccounts(providerAccountId);
            //Assert.IsType<AccountMigrationResponse>(response);
        }

        /// <summary>
        /// Test UpdateAccount
        /// </summary>
        [Fact]
        public void UpdateAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long accountId = null;
            //UpdateAccountRequest accountRequest = null;
            //instance.UpdateAccount(accountId, accountRequest);
        }
    }
}
